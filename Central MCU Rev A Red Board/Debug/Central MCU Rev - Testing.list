
Central MCU Rev - Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf5c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800d134  0800d134  0000e134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1cc  0800d1cc  0000f188  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1cc  0800d1cc  0000e1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1d4  0800d1d4  0000f188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1d4  0800d1d4  0000e1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d1d8  0800d1d8  0000e1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000188  20000000  0800d1dc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ebc  20000188  0800d364  0000f188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002044  0800d364  00010044  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f188  2**0
                  CONTENTS, READONLY
 12 .debug_info   000201ae  00000000  00000000  0000f1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042d7  00000000  00000000  0002f366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a38  00000000  00000000  00033640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001466  00000000  00000000  00035078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029cdc  00000000  00000000  000364de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022135  00000000  00000000  000601ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103793  00000000  00000000  000822ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00185a82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f7c  00000000  00000000  00185ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0018ca44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000188 	.word	0x20000188
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d11c 	.word	0x0800d11c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000018c 	.word	0x2000018c
 8000214:	0800d11c 	.word	0x0800d11c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f001 fe16 	bl	800213e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 fa4b 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f001 f835 	bl	8001584 <MX_GPIO_Init>
  MX_TIM1_Init();
 800051a:	f000 fad1 	bl	8000ac0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800051e:	f000 fb63 	bl	8000be8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000522:	f000 fbbb 	bl	8000c9c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000526:	f000 fc13 	bl	8000d50 <MX_TIM4_Init>
  MX_TIM5_Init();
 800052a:	f000 fc6b 	bl	8000e04 <MX_TIM5_Init>
  MX_TIM8_Init();
 800052e:	f000 fd3b 	bl	8000fa8 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000532:	f000 fdcd 	bl	80010d0 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000536:	f000 fe51 	bl	80011dc <MX_TIM16_Init>
  MX_TIM17_Init();
 800053a:	f000 fec9 	bl	80012d0 <MX_TIM17_Init>
  MX_TIM20_Init();
 800053e:	f000 ff41 	bl	80013c4 <MX_TIM20_Init>
  MX_USB_Device_Init();
 8000542:	f00c f89d 	bl	800c680 <MX_USB_Device_Init>
  MX_I2C2_Init();
 8000546:	f000 fa7b 	bl	8000a40 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800054a:	f000 ffcf 	bl	80014ec <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800054e:	f000 fcb3 	bl	8000eb8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000552:	f000 fcf1 	bl	8000f38 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000556:	486a      	ldr	r0, [pc, #424]	@ (8000700 <main+0x1f8>)
 8000558:	f005 fc94 	bl	8005e84 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800055c:	2100      	movs	r1, #0
 800055e:	4869      	ldr	r0, [pc, #420]	@ (8000704 <main+0x1fc>)
 8000560:	f005 fd8e 	bl	8006080 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000564:	2100      	movs	r1, #0
 8000566:	4868      	ldr	r0, [pc, #416]	@ (8000708 <main+0x200>)
 8000568:	f005 fd8a 	bl	8006080 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800056c:	2100      	movs	r1, #0
 800056e:	4867      	ldr	r0, [pc, #412]	@ (800070c <main+0x204>)
 8000570:	f005 fd86 	bl	8006080 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000574:	2100      	movs	r1, #0
 8000576:	4866      	ldr	r0, [pc, #408]	@ (8000710 <main+0x208>)
 8000578:	f005 fd82 	bl	8006080 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800057c:	2100      	movs	r1, #0
 800057e:	4865      	ldr	r0, [pc, #404]	@ (8000714 <main+0x20c>)
 8000580:	f005 fd7e 	bl	8006080 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000584:	2100      	movs	r1, #0
 8000586:	4864      	ldr	r0, [pc, #400]	@ (8000718 <main+0x210>)
 8000588:	f005 fd7a 	bl	8006080 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800058c:	2100      	movs	r1, #0
 800058e:	4863      	ldr	r0, [pc, #396]	@ (800071c <main+0x214>)
 8000590:	f005 fd76 	bl	8006080 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8000594:	2100      	movs	r1, #0
 8000596:	4862      	ldr	r0, [pc, #392]	@ (8000720 <main+0x218>)
 8000598:	f005 fd72 	bl	8006080 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800059c:	2100      	movs	r1, #0
 800059e:	4861      	ldr	r0, [pc, #388]	@ (8000724 <main+0x21c>)
 80005a0:	f005 fd6e 	bl	8006080 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_1);
 80005a4:	2100      	movs	r1, #0
 80005a6:	4860      	ldr	r0, [pc, #384]	@ (8000728 <main+0x220>)
 80005a8:	f005 fd6a 	bl	8006080 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 35999); // motor 0
 80005ac:	4b55      	ldr	r3, [pc, #340]	@ (8000704 <main+0x1fc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80005b4:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 35999);// motor 1
 80005b6:	4b54      	ldr	r3, [pc, #336]	@ (8000708 <main+0x200>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80005be:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 35999);// motor 2
 80005c0:	4b52      	ldr	r3, [pc, #328]	@ (800070c <main+0x204>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80005c8:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 35999);// motor 3
 80005ca:	4b51      	ldr	r3, [pc, #324]	@ (8000710 <main+0x208>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80005d2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 35999);// motor 4
 80005d4:	4b4f      	ldr	r3, [pc, #316]	@ (8000714 <main+0x20c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80005dc:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 35999); //grabber pwm, grabber isn't planned at this time
 80005de:	4b4e      	ldr	r3, [pc, #312]	@ (8000718 <main+0x210>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80005e6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 35999);// motor 5
 80005e8:	4b4c      	ldr	r3, [pc, #304]	@ (800071c <main+0x214>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80005f0:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 35999);// motor 6
 80005f2:	4b4b      	ldr	r3, [pc, #300]	@ (8000720 <main+0x218>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80005fa:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, 35999);// motor 7
 80005fc:	4b49      	ldr	r3, [pc, #292]	@ (8000724 <main+0x21c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8000604:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, 35999);// torpedo pwm, torpedo hasn't been planned yet
 8000606:	4b48      	ldr	r3, [pc, #288]	@ (8000728 <main+0x220>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 800060e:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_Delay(3000); // delay for 3 seconds since the ESC's need to calibrate themselves
 8000610:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000614:	f001 fe04 	bl	8002220 <HAL_Delay>
  {

		//HAL_GPIO_TogglePin(GPIOC, LED_GREEN_Pin | LED_YELLOW_Pin);
		//HAL_Delay(100);

	  if (okayToRunMotorsYet == 1){
 8000618:	4b44      	ldr	r3, [pc, #272]	@ (800072c <main+0x224>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d12f      	bne.n	8000680 <main+0x178>
	  Set_TIM_Compare(&htim1, usbBuffer[0]);
 8000620:	4b43      	ldr	r3, [pc, #268]	@ (8000730 <main+0x228>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	4837      	ldr	r0, [pc, #220]	@ (8000704 <main+0x1fc>)
 8000628:	f001 f8fe 	bl	8001828 <Set_TIM_Compare>
	  Set_TIM_Compare(&htim2, usbBuffer[1]);
 800062c:	4b40      	ldr	r3, [pc, #256]	@ (8000730 <main+0x228>)
 800062e:	685b      	ldr	r3, [r3, #4]
 8000630:	4619      	mov	r1, r3
 8000632:	4835      	ldr	r0, [pc, #212]	@ (8000708 <main+0x200>)
 8000634:	f001 f8f8 	bl	8001828 <Set_TIM_Compare>
	  Set_TIM_Compare(&htim3, usbBuffer[2]);
 8000638:	4b3d      	ldr	r3, [pc, #244]	@ (8000730 <main+0x228>)
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	4619      	mov	r1, r3
 800063e:	4833      	ldr	r0, [pc, #204]	@ (800070c <main+0x204>)
 8000640:	f001 f8f2 	bl	8001828 <Set_TIM_Compare>
	  Set_TIM_Compare(&htim4, usbBuffer[3]);
 8000644:	4b3a      	ldr	r3, [pc, #232]	@ (8000730 <main+0x228>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	4619      	mov	r1, r3
 800064a:	4831      	ldr	r0, [pc, #196]	@ (8000710 <main+0x208>)
 800064c:	f001 f8ec 	bl	8001828 <Set_TIM_Compare>
	  Set_TIM_Compare(&htim5, usbBuffer[4]);
 8000650:	4b37      	ldr	r3, [pc, #220]	@ (8000730 <main+0x228>)
 8000652:	691b      	ldr	r3, [r3, #16]
 8000654:	4619      	mov	r1, r3
 8000656:	482f      	ldr	r0, [pc, #188]	@ (8000714 <main+0x20c>)
 8000658:	f001 f8e6 	bl	8001828 <Set_TIM_Compare>
	  Set_TIM_Compare(&htim15, usbBuffer[5]);
 800065c:	4b34      	ldr	r3, [pc, #208]	@ (8000730 <main+0x228>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	4619      	mov	r1, r3
 8000662:	482e      	ldr	r0, [pc, #184]	@ (800071c <main+0x214>)
 8000664:	f001 f8e0 	bl	8001828 <Set_TIM_Compare>
	  Set_TIM_Compare(&htim16, usbBuffer[6]);
 8000668:	4b31      	ldr	r3, [pc, #196]	@ (8000730 <main+0x228>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	4619      	mov	r1, r3
 800066e:	482c      	ldr	r0, [pc, #176]	@ (8000720 <main+0x218>)
 8000670:	f001 f8da 	bl	8001828 <Set_TIM_Compare>
	  Set_TIM_Compare(&htim17, usbBuffer[7]);
 8000674:	4b2e      	ldr	r3, [pc, #184]	@ (8000730 <main+0x228>)
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	4619      	mov	r1, r3
 800067a:	482a      	ldr	r0, [pc, #168]	@ (8000724 <main+0x21c>)
 800067c:	f001 f8d4 	bl	8001828 <Set_TIM_Compare>
	  }

	  if (usbBuffer[8] !=0){ // if the kill value isn't zero then set the internal kill pin high
 8000680:	4b2b      	ldr	r3, [pc, #172]	@ (8000730 <main+0x228>)
 8000682:	6a1b      	ldr	r3, [r3, #32]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d00c      	beq.n	80006a2 <main+0x19a>
		  HAL_GPIO_WritePin(GPIOC, INT_KILL_Pin, GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800068e:	4829      	ldr	r0, [pc, #164]	@ (8000734 <main+0x22c>)
 8000690:	f002 f952 	bl	8002938 <HAL_GPIO_WritePin>
		  intKillState = 1;
 8000694:	4b28      	ldr	r3, [pc, #160]	@ (8000738 <main+0x230>)
 8000696:	2201      	movs	r2, #1
 8000698:	701a      	strb	r2, [r3, #0]
		  prevIntKillState = 1;
 800069a:	4b28      	ldr	r3, [pc, #160]	@ (800073c <main+0x234>)
 800069c:	2201      	movs	r2, #1
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	e008      	b.n	80006b4 <main+0x1ac>
	  }

	  else {
		  HAL_GPIO_WritePin(GPIOC, INT_KILL_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006a8:	4822      	ldr	r0, [pc, #136]	@ (8000734 <main+0x22c>)
 80006aa:	f002 f945 	bl	8002938 <HAL_GPIO_WritePin>
		  intKillState = 0;
 80006ae:	4b22      	ldr	r3, [pc, #136]	@ (8000738 <main+0x230>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	  }

	  if ((usbBuffer[9] == 1) || (powerDown == 1)){ // if the button or usb packet triggers power down then set power off pin high
 80006b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000730 <main+0x228>)
 80006b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d003      	beq.n	80006c4 <main+0x1bc>
 80006bc:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <main+0x238>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d106      	bne.n	80006d2 <main+0x1ca>
		  HAL_GPIO_WritePin(GPIOA, POWER_OFF_Pin, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80006ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006ce:	f002 f933 	bl	8002938 <HAL_GPIO_WritePin>
	  }

	  extKillState = HAL_GPIO_ReadPin(EXT_KILL_GPIO_Port, EXT_KILL_Pin);
 80006d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006d6:	481b      	ldr	r0, [pc, #108]	@ (8000744 <main+0x23c>)
 80006d8:	f002 f916 	bl	8002908 <HAL_GPIO_ReadPin>
 80006dc:	4603      	mov	r3, r0
 80006de:	461a      	mov	r2, r3
 80006e0:	4b19      	ldr	r3, [pc, #100]	@ (8000748 <main+0x240>)
 80006e2:	701a      	strb	r2, [r3, #0]

	  if  ((extKillState == 1) && (prevExtKillState == 0)){
 80006e4:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <main+0x240>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d13c      	bne.n	8000766 <main+0x25e>
 80006ec:	4b17      	ldr	r3, [pc, #92]	@ (800074c <main+0x244>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d138      	bne.n	8000766 <main+0x25e>
		  prevExtKillState = 1;
 80006f4:	4b15      	ldr	r3, [pc, #84]	@ (800074c <main+0x244>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]

		  // if the ext kill state is high then set the motor values to zero
		  //so that hopefully the motors don't immediately spin after kill magnet is replaced.

		  for (uint8_t i = 0; i < 8; i++) {
 80006fa:	2300      	movs	r3, #0
 80006fc:	71fb      	strb	r3, [r7, #7]
 80006fe:	e02f      	b.n	8000760 <main+0x258>
 8000700:	20000374 	.word	0x20000374
 8000704:	200001f8 	.word	0x200001f8
 8000708:	20000244 	.word	0x20000244
 800070c:	20000290 	.word	0x20000290
 8000710:	200002dc 	.word	0x200002dc
 8000714:	20000328 	.word	0x20000328
 8000718:	2000040c 	.word	0x2000040c
 800071c:	20000458 	.word	0x20000458
 8000720:	200004a4 	.word	0x200004a4
 8000724:	200004f0 	.word	0x200004f0
 8000728:	2000053c 	.word	0x2000053c
 800072c:	20000000 	.word	0x20000000
 8000730:	2000061c 	.word	0x2000061c
 8000734:	48000800 	.word	0x48000800
 8000738:	20000662 	.word	0x20000662
 800073c:	20000665 	.word	0x20000665
 8000740:	20000669 	.word	0x20000669
 8000744:	48000400 	.word	0x48000400
 8000748:	20000663 	.word	0x20000663
 800074c:	20000664 	.word	0x20000664
		      usbBuffer[i] = 0;
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	4a78      	ldr	r2, [pc, #480]	@ (8000934 <main+0x42c>)
 8000754:	2100      	movs	r1, #0
 8000756:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (uint8_t i = 0; i < 8; i++) {
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	3301      	adds	r3, #1
 800075e:	71fb      	strb	r3, [r7, #7]
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	2b07      	cmp	r3, #7
 8000764:	d9f4      	bls.n	8000750 <main+0x248>
		  }
		  // fixme send usb data telling computer the sub is supposed to be killed so that the motors don't continue running after un-killing
	  }

	  if (((prevExtKillState == 1) && (extKillState == 0) && (intKillState == 0)) || ((intKillState == 0) && (prevIntKillState == 1) && (extKillState == 0))){
 8000766:	4b74      	ldr	r3, [pc, #464]	@ (8000938 <main+0x430>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d107      	bne.n	800077e <main+0x276>
 800076e:	4b73      	ldr	r3, [pc, #460]	@ (800093c <main+0x434>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d103      	bne.n	800077e <main+0x276>
 8000776:	4b72      	ldr	r3, [pc, #456]	@ (8000940 <main+0x438>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d00b      	beq.n	8000796 <main+0x28e>
 800077e:	4b70      	ldr	r3, [pc, #448]	@ (8000940 <main+0x438>)
 8000780:	781b      	ldrb	r3, [r3, #0]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d144      	bne.n	8000810 <main+0x308>
 8000786:	4b6f      	ldr	r3, [pc, #444]	@ (8000944 <main+0x43c>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d140      	bne.n	8000810 <main+0x308>
 800078e:	4b6b      	ldr	r3, [pc, #428]	@ (800093c <main+0x434>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d13c      	bne.n	8000810 <main+0x308>
		  	  // if we were killed before and now we aren't and neither of the kills are triggered anymore then calibrate the ESC's
		  prevExtKillState = 0;
 8000796:	4b68      	ldr	r3, [pc, #416]	@ (8000938 <main+0x430>)
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
		  prevIntKillState = 0;
 800079c:	4b69      	ldr	r3, [pc, #420]	@ (8000944 <main+0x43c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
		  okayToRunMotorsYet = 0;
 80007a2:	4b69      	ldr	r3, [pc, #420]	@ (8000948 <main+0x440>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]

		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 35999); // set all motors to 1500uS so they can be calibrated after being re-powered
 80007a8:	4b68      	ldr	r3, [pc, #416]	@ (800094c <main+0x444>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80007b0:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 35999);
 80007b2:	4b67      	ldr	r3, [pc, #412]	@ (8000950 <main+0x448>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80007ba:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 35999);
 80007bc:	4b65      	ldr	r3, [pc, #404]	@ (8000954 <main+0x44c>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80007c4:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 35999);
 80007c6:	4b64      	ldr	r3, [pc, #400]	@ (8000958 <main+0x450>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80007ce:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 35999);
 80007d0:	4b62      	ldr	r3, [pc, #392]	@ (800095c <main+0x454>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80007d8:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 35999);
 80007da:	4b61      	ldr	r3, [pc, #388]	@ (8000960 <main+0x458>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80007e2:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 35999);
 80007e4:	4b5f      	ldr	r3, [pc, #380]	@ (8000964 <main+0x45c>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80007ec:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, 35999);
 80007ee:	4b5e      	ldr	r3, [pc, #376]	@ (8000968 <main+0x460>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80007f6:	635a      	str	r2, [r3, #52]	@ 0x34

	  	  	__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 80007f8:	4b5c      	ldr	r3, [pc, #368]	@ (800096c <main+0x464>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f06f 0201 	mvn.w	r2, #1
 8000800:	611a      	str	r2, [r3, #16]
	    	  __HAL_TIM_SET_COUNTER(&htim7, 0);
 8000802:	4b5a      	ldr	r3, [pc, #360]	@ (800096c <main+0x464>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	@ 0x24
	  	    HAL_TIM_Base_Start_IT(&htim7); // start 3 second timer to calibrate ESC's
 800080a:	4858      	ldr	r0, [pc, #352]	@ (800096c <main+0x464>)
 800080c:	f005 fb3a 	bl	8005e84 <HAL_TIM_Base_Start_IT>
	  }



	  HAL_I2C_Mem_Read(&hi2c2, I2C_DEVICE_ADDRESS << 1, REGISTER_ADDRESS, I2C_MEMADD_SIZE_8BIT, received_data, 2, HAL_MAX_DELAY);
 8000810:	f04f 33ff 	mov.w	r3, #4294967295
 8000814:	9302      	str	r3, [sp, #8]
 8000816:	2302      	movs	r3, #2
 8000818:	9301      	str	r3, [sp, #4]
 800081a:	4b55      	ldr	r3, [pc, #340]	@ (8000970 <main+0x468>)
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2301      	movs	r3, #1
 8000820:	2200      	movs	r2, #0
 8000822:	2190      	movs	r1, #144	@ 0x90
 8000824:	4853      	ldr	r0, [pc, #332]	@ (8000974 <main+0x46c>)
 8000826:	f002 f955 	bl	8002ad4 <HAL_I2C_Mem_Read>

	  tempData = received_data[0];
 800082a:	4b51      	ldr	r3, [pc, #324]	@ (8000970 <main+0x468>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	461a      	mov	r2, r3
 8000830:	4b51      	ldr	r3, [pc, #324]	@ (8000978 <main+0x470>)
 8000832:	801a      	strh	r2, [r3, #0]

	    CDC_Transmit_FS((uint8_t *)ascii_str, sizeof(ascii_str) - 1);

*/

	      GPIO_PinState buttonState = HAL_GPIO_ReadPin(GPIOC, BUTTON_IN_Pin); // read the button status
 8000834:	2180      	movs	r1, #128	@ 0x80
 8000836:	4851      	ldr	r0, [pc, #324]	@ (800097c <main+0x474>)
 8000838:	f002 f866 	bl	8002908 <HAL_GPIO_ReadPin>
 800083c:	4603      	mov	r3, r0
 800083e:	71bb      	strb	r3, [r7, #6]

	      if (buttonState == GPIO_PIN_RESET && (buttonPushedAlready == 0)) // if the button gets pulled low (pushed) and it wasn't pulled low on the previous cycle
 8000840:	79bb      	ldrb	r3, [r7, #6]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d142      	bne.n	80008cc <main+0x3c4>
 8000846:	4b4e      	ldr	r3, [pc, #312]	@ (8000980 <main+0x478>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d13e      	bne.n	80008cc <main+0x3c4>
	  {
	    	  wentLowTime = HAL_GetTick();
 800084e:	f001 fcdb 	bl	8002208 <HAL_GetTick>
 8000852:	4603      	mov	r3, r0
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4b4b      	ldr	r3, [pc, #300]	@ (8000984 <main+0x47c>)
 8000858:	701a      	strb	r2, [r3, #0]
	    	  lockColor = 1; // lock the current led color so that we can blink it repeatedly
 800085a:	4b4b      	ldr	r3, [pc, #300]	@ (8000988 <main+0x480>)
 800085c:	2201      	movs	r2, #1
 800085e:	701a      	strb	r2, [r3, #0]
	    	  buttonPushedAlready = 1; // this lets us know the button it already pushed so it doesn't get stuck if the button is held down
 8000860:	4b47      	ldr	r3, [pc, #284]	@ (8000980 <main+0x478>)
 8000862:	2201      	movs	r2, #1
 8000864:	701a      	strb	r2, [r3, #0]

	    	  if (color == 'G'){ // if the red led is on, the 'G' is confusing but this is what the color variable gets set to when the red led is on
 8000866:	4b49      	ldr	r3, [pc, #292]	@ (800098c <main+0x484>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b47      	cmp	r3, #71	@ 0x47
 800086c:	d10c      	bne.n	8000888 <main+0x380>
	    		  /*we will use red to turn the sub off.
	    		   * The red led will flash slowly and the user will have to push it a
	    		   * second time in order to avoid accidentally powering the sub off
	    		   */

	    		  __HAL_TIM_SET_AUTORELOAD(&htim6, 7500); // give a longer period for the red led
 800086e:	4b48      	ldr	r3, [pc, #288]	@ (8000990 <main+0x488>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 8000876:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000878:	4b45      	ldr	r3, [pc, #276]	@ (8000990 <main+0x488>)
 800087a:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 800087e:	60da      	str	r2, [r3, #12]
	    		  checkRedMode = 1; // enter checkRedMode (we check for the second button push)
 8000880:	4b44      	ldr	r3, [pc, #272]	@ (8000994 <main+0x48c>)
 8000882:	2201      	movs	r2, #1
 8000884:	701a      	strb	r2, [r3, #0]
 8000886:	e019      	b.n	80008bc <main+0x3b4>
	    	  }
	    	  else {

	    		  if (color == 'B'){ // happens when the actual led is green
 8000888:	4b40      	ldr	r3, [pc, #256]	@ (800098c <main+0x484>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b42      	cmp	r3, #66	@ 0x42
 800088e:	d104      	bne.n	800089a <main+0x392>

		    		  CDC_Transmit_FS((uint8_t *)"Green\r\n", 7);
 8000890:	2107      	movs	r1, #7
 8000892:	4841      	ldr	r0, [pc, #260]	@ (8000998 <main+0x490>)
 8000894:	f00b ffbc 	bl	800c810 <CDC_Transmit_FS>
 8000898:	e007      	b.n	80008aa <main+0x3a2>
		    		  // fix me transmit something over USB so software can know we want to enter autonomous mode or whatever
	    		  }
	    		  else if (color == 'R'){ // happens when the actual led is Blue
 800089a:	4b3c      	ldr	r3, [pc, #240]	@ (800098c <main+0x484>)
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b52      	cmp	r3, #82	@ 0x52
 80008a0:	d103      	bne.n	80008aa <main+0x3a2>
		    		  CDC_Transmit_FS((uint8_t *)"Blue\r\n", 6);
 80008a2:	2106      	movs	r1, #6
 80008a4:	483d      	ldr	r0, [pc, #244]	@ (800099c <main+0x494>)
 80008a6:	f00b ffb3 	bl	800c810 <CDC_Transmit_FS>
		    		  // fix me transmit something over USB so software can know we want to enter autonomous mode or whatever
	    		  }
	    	  __HAL_TIM_SET_AUTORELOAD(&htim6, 2000); // for non red colors we blink the leds faster
 80008aa:	4b39      	ldr	r3, [pc, #228]	@ (8000990 <main+0x488>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008b4:	4b36      	ldr	r3, [pc, #216]	@ (8000990 <main+0x488>)
 80008b6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80008ba:	60da      	str	r2, [r3, #12]
	    	  }
	    	  __HAL_TIM_SET_COUNTER(&htim6, __HAL_TIM_GET_AUTORELOAD(&htim6) - 1); // force the previous timer to overflow, otherwise the led might stay on for a bit before the blink starts
 80008bc:	4b34      	ldr	r3, [pc, #208]	@ (8000990 <main+0x488>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008c2:	4b33      	ldr	r3, [pc, #204]	@ (8000990 <main+0x488>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	3a01      	subs	r2, #1
 80008c8:	625a      	str	r2, [r3, #36]	@ 0x24
 80008ca:	e017      	b.n	80008fc <main+0x3f4>
	  }

	      else if ((buttonPushedAlready == 1) && (buttonState == GPIO_PIN_SET) && ((HAL_GetTick() - wentLowTime) > 200)){
 80008cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000980 <main+0x478>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	d113      	bne.n	80008fc <main+0x3f4>
 80008d4:	79bb      	ldrb	r3, [r7, #6]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d110      	bne.n	80008fc <main+0x3f4>
 80008da:	f001 fc95 	bl	8002208 <HAL_GetTick>
 80008de:	4603      	mov	r3, r0
 80008e0:	4a28      	ldr	r2, [pc, #160]	@ (8000984 <main+0x47c>)
 80008e2:	7812      	ldrb	r2, [r2, #0]
 80008e4:	1a9b      	subs	r3, r3, r2
 80008e6:	2bc8      	cmp	r3, #200	@ 0xc8
 80008e8:	d908      	bls.n	80008fc <main+0x3f4>
	    	  wentHighTime = HAL_GetTick();
 80008ea:	f001 fc8d 	bl	8002208 <HAL_GetTick>
 80008ee:	4603      	mov	r3, r0
 80008f0:	b2da      	uxtb	r2, r3
 80008f2:	4b2b      	ldr	r3, [pc, #172]	@ (80009a0 <main+0x498>)
 80008f4:	701a      	strb	r2, [r3, #0]
	    	  buttonReleased = 1; // we know the button was released
 80008f6:	4b2b      	ldr	r3, [pc, #172]	@ (80009a4 <main+0x49c>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	701a      	strb	r2, [r3, #0]
	      }

	      if ((checkRedMode == 1) && (buttonReleased == 1) && (buttonState == GPIO_PIN_RESET) && ((HAL_GetTick() - wentHighTime) > 200)){
 80008fc:	4b25      	ldr	r3, [pc, #148]	@ (8000994 <main+0x48c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b01      	cmp	r3, #1
 8000902:	f47f ae89 	bne.w	8000618 <main+0x110>
 8000906:	4b27      	ldr	r3, [pc, #156]	@ (80009a4 <main+0x49c>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b01      	cmp	r3, #1
 800090c:	f47f ae84 	bne.w	8000618 <main+0x110>
 8000910:	79bb      	ldrb	r3, [r7, #6]
 8000912:	2b00      	cmp	r3, #0
 8000914:	f47f ae80 	bne.w	8000618 <main+0x110>
 8000918:	f001 fc76 	bl	8002208 <HAL_GetTick>
 800091c:	4603      	mov	r3, r0
 800091e:	4a20      	ldr	r2, [pc, #128]	@ (80009a0 <main+0x498>)
 8000920:	7812      	ldrb	r2, [r2, #0]
 8000922:	1a9b      	subs	r3, r3, r2
 8000924:	2bc8      	cmp	r3, #200	@ 0xc8
 8000926:	f67f ae77 	bls.w	8000618 <main+0x110>
	    	  powerDown = 1; // power down if the red led is flashing and gets pressed a second time
 800092a:	4b1f      	ldr	r3, [pc, #124]	@ (80009a8 <main+0x4a0>)
 800092c:	2201      	movs	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
  {
 8000930:	e672      	b.n	8000618 <main+0x110>
 8000932:	bf00      	nop
 8000934:	2000061c 	.word	0x2000061c
 8000938:	20000664 	.word	0x20000664
 800093c:	20000663 	.word	0x20000663
 8000940:	20000662 	.word	0x20000662
 8000944:	20000665 	.word	0x20000665
 8000948:	20000000 	.word	0x20000000
 800094c:	200001f8 	.word	0x200001f8
 8000950:	20000244 	.word	0x20000244
 8000954:	20000290 	.word	0x20000290
 8000958:	200002dc 	.word	0x200002dc
 800095c:	20000328 	.word	0x20000328
 8000960:	20000458 	.word	0x20000458
 8000964:	200004a4 	.word	0x200004a4
 8000968:	200004f0 	.word	0x200004f0
 800096c:	200003c0 	.word	0x200003c0
 8000970:	20000660 	.word	0x20000660
 8000974:	200001a4 	.word	0x200001a4
 8000978:	2000065c 	.word	0x2000065c
 800097c:	48000800 	.word	0x48000800
 8000980:	20000667 	.word	0x20000667
 8000984:	2000066b 	.word	0x2000066b
 8000988:	20000666 	.word	0x20000666
 800098c:	20000001 	.word	0x20000001
 8000990:	20000374 	.word	0x20000374
 8000994:	2000066a 	.word	0x2000066a
 8000998:	0800d134 	.word	0x0800d134
 800099c:	0800d13c 	.word	0x0800d13c
 80009a0:	2000066c 	.word	0x2000066c
 80009a4:	20000668 	.word	0x20000668
 80009a8:	20000669 	.word	0x20000669

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b094      	sub	sp, #80	@ 0x50
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 0318 	add.w	r3, r7, #24
 80009b6:	2238      	movs	r2, #56	@ 0x38
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f00c fb74 	bl	800d0a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ce:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009d2:	f004 f9d3 	bl	8004d7c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e0:	2302      	movs	r3, #2
 80009e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e4:	2303      	movs	r3, #3
 80009e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80009e8:	2301      	movs	r3, #1
 80009ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80009ec:	230c      	movs	r3, #12
 80009ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80009f4:	2304      	movs	r3, #4
 80009f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 80009f8:	2308      	movs	r3, #8
 80009fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fc:	f107 0318 	add.w	r3, r7, #24
 8000a00:	4618      	mov	r0, r3
 8000a02:	f004 fa6f 	bl	8004ee4 <HAL_RCC_OscConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000a0c:	f000 ff4c 	bl	80018a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a10:	230f      	movs	r3, #15
 8000a12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a14:	2303      	movs	r3, #3
 8000a16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f004 fd6d 	bl	8005508 <HAL_RCC_ClockConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a34:	f000 ff38 	bl	80018a8 <Error_Handler>
  }
}
 8000a38:	bf00      	nop
 8000a3a:	3750      	adds	r7, #80	@ 0x50
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab4 <MX_I2C2_Init+0x74>)
 8000a46:	4a1c      	ldr	r2, [pc, #112]	@ (8000ab8 <MX_I2C2_Init+0x78>)
 8000a48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00805C87;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <MX_I2C2_Init+0x74>)
 8000a4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000abc <MX_I2C2_Init+0x7c>)
 8000a4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a50:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <MX_I2C2_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a56:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <MX_I2C2_Init+0x74>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <MX_I2C2_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a62:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <MX_I2C2_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <MX_I2C2_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <MX_I2C2_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <MX_I2C2_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a7a:	480e      	ldr	r0, [pc, #56]	@ (8000ab4 <MX_I2C2_Init+0x74>)
 8000a7c:	f001 ff8e 	bl	800299c <HAL_I2C_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a86:	f000 ff0f 	bl	80018a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4809      	ldr	r0, [pc, #36]	@ (8000ab4 <MX_I2C2_Init+0x74>)
 8000a8e:	f002 fba9 	bl	80031e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a98:	f000 ff06 	bl	80018a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <MX_I2C2_Init+0x74>)
 8000aa0:	f002 fbeb 	bl	800327a <HAL_I2CEx_ConfigDigitalFilter>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000aaa:	f000 fefd 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200001a4 	.word	0x200001a4
 8000ab8:	40005800 	.word	0x40005800
 8000abc:	00805c87 	.word	0x00805c87

08000ac0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b098      	sub	sp, #96	@ 0x60
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]
 8000ae2:	615a      	str	r2, [r3, #20]
 8000ae4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2234      	movs	r2, #52	@ 0x34
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f00c fadb 	bl	800d0a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000af2:	4b3b      	ldr	r3, [pc, #236]	@ (8000be0 <MX_TIM1_Init+0x120>)
 8000af4:	4a3b      	ldr	r2, [pc, #236]	@ (8000be4 <MX_TIM1_Init+0x124>)
 8000af6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000af8:	4b39      	ldr	r3, [pc, #228]	@ (8000be0 <MX_TIM1_Init+0x120>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afe:	4b38      	ldr	r3, [pc, #224]	@ (8000be0 <MX_TIM1_Init+0x120>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b04:	4b36      	ldr	r3, [pc, #216]	@ (8000be0 <MX_TIM1_Init+0x120>)
 8000b06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0c:	4b34      	ldr	r3, [pc, #208]	@ (8000be0 <MX_TIM1_Init+0x120>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b12:	4b33      	ldr	r3, [pc, #204]	@ (8000be0 <MX_TIM1_Init+0x120>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b18:	4b31      	ldr	r3, [pc, #196]	@ (8000be0 <MX_TIM1_Init+0x120>)
 8000b1a:	2280      	movs	r2, #128	@ 0x80
 8000b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b1e:	4830      	ldr	r0, [pc, #192]	@ (8000be0 <MX_TIM1_Init+0x120>)
 8000b20:	f005 fa57 	bl	8005fd2 <HAL_TIM_PWM_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000b2a:	f000 febd 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b32:	2300      	movs	r3, #0
 8000b34:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b3a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4827      	ldr	r0, [pc, #156]	@ (8000be0 <MX_TIM1_Init+0x120>)
 8000b42:	f006 fa3f 	bl	8006fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b4c:	f000 feac 	bl	80018a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b50:	2360      	movs	r3, #96	@ 0x60
 8000b52:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b6c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b70:	2200      	movs	r2, #0
 8000b72:	4619      	mov	r1, r3
 8000b74:	481a      	ldr	r0, [pc, #104]	@ (8000be0 <MX_TIM1_Init+0x120>)
 8000b76:	f005 fce5 	bl	8006544 <HAL_TIM_PWM_ConfigChannel>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b80:	f000 fe92 	bl	80018a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b98:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000baa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000bae:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4807      	ldr	r0, [pc, #28]	@ (8000be0 <MX_TIM1_Init+0x120>)
 8000bc2:	f006 fa95 	bl	80070f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000bcc:	f000 fe6c 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bd0:	4803      	ldr	r0, [pc, #12]	@ (8000be0 <MX_TIM1_Init+0x120>)
 8000bd2:	f001 f81d 	bl	8001c10 <HAL_TIM_MspPostInit>

}
 8000bd6:	bf00      	nop
 8000bd8:	3760      	adds	r7, #96	@ 0x60
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200001f8 	.word	0x200001f8
 8000be4:	40012c00 	.word	0x40012c00

08000be8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	@ 0x28
 8000bec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
 8000c08:	615a      	str	r2, [r3, #20]
 8000c0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c0c:	4b22      	ldr	r3, [pc, #136]	@ (8000c98 <MX_TIM2_Init+0xb0>)
 8000c0e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c14:	4b20      	ldr	r3, [pc, #128]	@ (8000c98 <MX_TIM2_Init+0xb0>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c98 <MX_TIM2_Init+0xb0>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c20:	4b1d      	ldr	r3, [pc, #116]	@ (8000c98 <MX_TIM2_Init+0xb0>)
 8000c22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c28:	4b1b      	ldr	r3, [pc, #108]	@ (8000c98 <MX_TIM2_Init+0xb0>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <MX_TIM2_Init+0xb0>)
 8000c30:	2280      	movs	r2, #128	@ 0x80
 8000c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c34:	4818      	ldr	r0, [pc, #96]	@ (8000c98 <MX_TIM2_Init+0xb0>)
 8000c36:	f005 f9cc 	bl	8005fd2 <HAL_TIM_PWM_Init>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000c40:	f000 fe32 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4811      	ldr	r0, [pc, #68]	@ (8000c98 <MX_TIM2_Init+0xb0>)
 8000c54:	f006 f9b6 	bl	8006fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000c5e:	f000 fe23 	bl	80018a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c62:	2360      	movs	r3, #96	@ 0x60
 8000c64:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c72:	463b      	mov	r3, r7
 8000c74:	2200      	movs	r2, #0
 8000c76:	4619      	mov	r1, r3
 8000c78:	4807      	ldr	r0, [pc, #28]	@ (8000c98 <MX_TIM2_Init+0xb0>)
 8000c7a:	f005 fc63 	bl	8006544 <HAL_TIM_PWM_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000c84:	f000 fe10 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c88:	4803      	ldr	r0, [pc, #12]	@ (8000c98 <MX_TIM2_Init+0xb0>)
 8000c8a:	f000 ffc1 	bl	8001c10 <HAL_TIM_MspPostInit>

}
 8000c8e:	bf00      	nop
 8000c90:	3728      	adds	r7, #40	@ 0x28
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000244 	.word	0x20000244

08000c9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	@ 0x28
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cae:	463b      	mov	r3, r7
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
 8000cbc:	615a      	str	r2, [r3, #20]
 8000cbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cc0:	4b21      	ldr	r3, [pc, #132]	@ (8000d48 <MX_TIM3_Init+0xac>)
 8000cc2:	4a22      	ldr	r2, [pc, #136]	@ (8000d4c <MX_TIM3_Init+0xb0>)
 8000cc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cc6:	4b20      	ldr	r3, [pc, #128]	@ (8000d48 <MX_TIM3_Init+0xac>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d48 <MX_TIM3_Init+0xac>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d48 <MX_TIM3_Init+0xac>)
 8000cd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cda:	4b1b      	ldr	r3, [pc, #108]	@ (8000d48 <MX_TIM3_Init+0xac>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ce0:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <MX_TIM3_Init+0xac>)
 8000ce2:	2280      	movs	r2, #128	@ 0x80
 8000ce4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ce6:	4818      	ldr	r0, [pc, #96]	@ (8000d48 <MX_TIM3_Init+0xac>)
 8000ce8:	f005 f973 	bl	8005fd2 <HAL_TIM_PWM_Init>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000cf2:	f000 fdd9 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cfe:	f107 031c 	add.w	r3, r7, #28
 8000d02:	4619      	mov	r1, r3
 8000d04:	4810      	ldr	r0, [pc, #64]	@ (8000d48 <MX_TIM3_Init+0xac>)
 8000d06:	f006 f95d 	bl	8006fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000d10:	f000 fdca 	bl	80018a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d14:	2360      	movs	r3, #96	@ 0x60
 8000d16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d20:	2300      	movs	r3, #0
 8000d22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d24:	463b      	mov	r3, r7
 8000d26:	2200      	movs	r2, #0
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4807      	ldr	r0, [pc, #28]	@ (8000d48 <MX_TIM3_Init+0xac>)
 8000d2c:	f005 fc0a 	bl	8006544 <HAL_TIM_PWM_ConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000d36:	f000 fdb7 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d3a:	4803      	ldr	r0, [pc, #12]	@ (8000d48 <MX_TIM3_Init+0xac>)
 8000d3c:	f000 ff68 	bl	8001c10 <HAL_TIM_MspPostInit>

}
 8000d40:	bf00      	nop
 8000d42:	3728      	adds	r7, #40	@ 0x28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000290 	.word	0x20000290
 8000d4c:	40000400 	.word	0x40000400

08000d50 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	@ 0x28
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d62:	463b      	mov	r3, r7
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
 8000d70:	615a      	str	r2, [r3, #20]
 8000d72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d74:	4b21      	ldr	r3, [pc, #132]	@ (8000dfc <MX_TIM4_Init+0xac>)
 8000d76:	4a22      	ldr	r2, [pc, #136]	@ (8000e00 <MX_TIM4_Init+0xb0>)
 8000d78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d7a:	4b20      	ldr	r3, [pc, #128]	@ (8000dfc <MX_TIM4_Init+0xac>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d80:	4b1e      	ldr	r3, [pc, #120]	@ (8000dfc <MX_TIM4_Init+0xac>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d86:	4b1d      	ldr	r3, [pc, #116]	@ (8000dfc <MX_TIM4_Init+0xac>)
 8000d88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dfc <MX_TIM4_Init+0xac>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d94:	4b19      	ldr	r3, [pc, #100]	@ (8000dfc <MX_TIM4_Init+0xac>)
 8000d96:	2280      	movs	r2, #128	@ 0x80
 8000d98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d9a:	4818      	ldr	r0, [pc, #96]	@ (8000dfc <MX_TIM4_Init+0xac>)
 8000d9c:	f005 f919 	bl	8005fd2 <HAL_TIM_PWM_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000da6:	f000 fd7f 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000db2:	f107 031c 	add.w	r3, r7, #28
 8000db6:	4619      	mov	r1, r3
 8000db8:	4810      	ldr	r0, [pc, #64]	@ (8000dfc <MX_TIM4_Init+0xac>)
 8000dba:	f006 f903 	bl	8006fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000dc4:	f000 fd70 	bl	80018a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dc8:	2360      	movs	r3, #96	@ 0x60
 8000dca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4807      	ldr	r0, [pc, #28]	@ (8000dfc <MX_TIM4_Init+0xac>)
 8000de0:	f005 fbb0 	bl	8006544 <HAL_TIM_PWM_ConfigChannel>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000dea:	f000 fd5d 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000dee:	4803      	ldr	r0, [pc, #12]	@ (8000dfc <MX_TIM4_Init+0xac>)
 8000df0:	f000 ff0e 	bl	8001c10 <HAL_TIM_MspPostInit>

}
 8000df4:	bf00      	nop
 8000df6:	3728      	adds	r7, #40	@ 0x28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	200002dc 	.word	0x200002dc
 8000e00:	40000800 	.word	0x40000800

08000e04 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	@ 0x28
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e16:	463b      	mov	r3, r7
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
 8000e24:	615a      	str	r2, [r3, #20]
 8000e26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e28:	4b21      	ldr	r3, [pc, #132]	@ (8000eb0 <MX_TIM5_Init+0xac>)
 8000e2a:	4a22      	ldr	r2, [pc, #136]	@ (8000eb4 <MX_TIM5_Init+0xb0>)
 8000e2c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e2e:	4b20      	ldr	r3, [pc, #128]	@ (8000eb0 <MX_TIM5_Init+0xac>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e34:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb0 <MX_TIM5_Init+0xac>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb0 <MX_TIM5_Init+0xac>)
 8000e3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e40:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e42:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <MX_TIM5_Init+0xac>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e48:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <MX_TIM5_Init+0xac>)
 8000e4a:	2280      	movs	r2, #128	@ 0x80
 8000e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e4e:	4818      	ldr	r0, [pc, #96]	@ (8000eb0 <MX_TIM5_Init+0xac>)
 8000e50:	f005 f8bf 	bl	8005fd2 <HAL_TIM_PWM_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8000e5a:	f000 fd25 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4810      	ldr	r0, [pc, #64]	@ (8000eb0 <MX_TIM5_Init+0xac>)
 8000e6e:	f006 f8a9 	bl	8006fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8000e78:	f000 fd16 	bl	80018a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7c:	2360      	movs	r3, #96	@ 0x60
 8000e7e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e8c:	463b      	mov	r3, r7
 8000e8e:	2200      	movs	r2, #0
 8000e90:	4619      	mov	r1, r3
 8000e92:	4807      	ldr	r0, [pc, #28]	@ (8000eb0 <MX_TIM5_Init+0xac>)
 8000e94:	f005 fb56 	bl	8006544 <HAL_TIM_PWM_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8000e9e:	f000 fd03 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000ea2:	4803      	ldr	r0, [pc, #12]	@ (8000eb0 <MX_TIM5_Init+0xac>)
 8000ea4:	f000 feb4 	bl	8001c10 <HAL_TIM_MspPostInit>

}
 8000ea8:	bf00      	nop
 8000eaa:	3728      	adds	r7, #40	@ 0x28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000328 	.word	0x20000328
 8000eb4:	40000c00 	.word	0x40000c00

08000eb8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ec8:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <MX_TIM6_Init+0x78>)
 8000eca:	4a1a      	ldr	r2, [pc, #104]	@ (8000f34 <MX_TIM6_Init+0x7c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 900;
 8000ece:	4b18      	ldr	r3, [pc, #96]	@ (8000f30 <MX_TIM6_Init+0x78>)
 8000ed0:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8000ed4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed6:	4b16      	ldr	r3, [pc, #88]	@ (8000f30 <MX_TIM6_Init+0x78>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000edc:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <MX_TIM6_Init+0x78>)
 8000ede:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ee2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <MX_TIM6_Init+0x78>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000eea:	4811      	ldr	r0, [pc, #68]	@ (8000f30 <MX_TIM6_Init+0x78>)
 8000eec:	f004 ff72 	bl	8005dd4 <HAL_TIM_Base_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000ef6:	f000 fcd7 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	4619      	mov	r1, r3
 8000f06:	480a      	ldr	r0, [pc, #40]	@ (8000f30 <MX_TIM6_Init+0x78>)
 8000f08:	f006 f85c 	bl	8006fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000f12:	f000 fcc9 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  // Enable the TIM6 interrupt

  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2036      	movs	r0, #54	@ 0x36
 8000f1c:	f001 fa7d 	bl	800241a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f20:	2036      	movs	r0, #54	@ 0x36
 8000f22:	f001 fa94 	bl	800244e <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM6_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000374 	.word	0x20000374
 8000f34:	40001000 	.word	0x40001000

08000f38 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000f48:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <MX_TIM7_Init+0x68>)
 8000f4a:	4a16      	ldr	r2, [pc, #88]	@ (8000fa4 <MX_TIM7_Init+0x6c>)
 8000f4c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 850;
 8000f4e:	4b14      	ldr	r3, [pc, #80]	@ (8000fa0 <MX_TIM7_Init+0x68>)
 8000f50:	f240 3252 	movw	r2, #850	@ 0x352
 8000f54:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f56:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <MX_TIM7_Init+0x68>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000f5c:	4b10      	ldr	r3, [pc, #64]	@ (8000fa0 <MX_TIM7_Init+0x68>)
 8000f5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f62:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f64:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <MX_TIM7_Init+0x68>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f6a:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <MX_TIM7_Init+0x68>)
 8000f6c:	f004 ff32 	bl	8005dd4 <HAL_TIM_Base_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000f76:	f000 fc97 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	4619      	mov	r1, r3
 8000f86:	4806      	ldr	r0, [pc, #24]	@ (8000fa0 <MX_TIM7_Init+0x68>)
 8000f88:	f006 f81c 	bl	8006fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000f92:	f000 fc89 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200003c0 	.word	0x200003c0
 8000fa4:	40001400 	.word	0x40001400

08000fa8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b098      	sub	sp, #96	@ 0x60
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]
 8000fca:	615a      	str	r2, [r3, #20]
 8000fcc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	2234      	movs	r2, #52	@ 0x34
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f00c f867 	bl	800d0a8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fda:	4b3b      	ldr	r3, [pc, #236]	@ (80010c8 <MX_TIM8_Init+0x120>)
 8000fdc:	4a3b      	ldr	r2, [pc, #236]	@ (80010cc <MX_TIM8_Init+0x124>)
 8000fde:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000fe0:	4b39      	ldr	r3, [pc, #228]	@ (80010c8 <MX_TIM8_Init+0x120>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe6:	4b38      	ldr	r3, [pc, #224]	@ (80010c8 <MX_TIM8_Init+0x120>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000fec:	4b36      	ldr	r3, [pc, #216]	@ (80010c8 <MX_TIM8_Init+0x120>)
 8000fee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ff2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff4:	4b34      	ldr	r3, [pc, #208]	@ (80010c8 <MX_TIM8_Init+0x120>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000ffa:	4b33      	ldr	r3, [pc, #204]	@ (80010c8 <MX_TIM8_Init+0x120>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001000:	4b31      	ldr	r3, [pc, #196]	@ (80010c8 <MX_TIM8_Init+0x120>)
 8001002:	2280      	movs	r2, #128	@ 0x80
 8001004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001006:	4830      	ldr	r0, [pc, #192]	@ (80010c8 <MX_TIM8_Init+0x120>)
 8001008:	f004 ffe3 	bl	8005fd2 <HAL_TIM_PWM_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001012:	f000 fc49 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001016:	2300      	movs	r3, #0
 8001018:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800101a:	2300      	movs	r3, #0
 800101c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001022:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001026:	4619      	mov	r1, r3
 8001028:	4827      	ldr	r0, [pc, #156]	@ (80010c8 <MX_TIM8_Init+0x120>)
 800102a:	f005 ffcb 	bl	8006fc4 <HAL_TIMEx_MasterConfigSynchronization>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001034:	f000 fc38 	bl	80018a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001038:	2360      	movs	r3, #96	@ 0x60
 800103a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001040:	2300      	movs	r3, #0
 8001042:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001044:	2300      	movs	r3, #0
 8001046:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001048:	2300      	movs	r3, #0
 800104a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800104c:	2300      	movs	r3, #0
 800104e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001050:	2300      	movs	r3, #0
 8001052:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001054:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001058:	2200      	movs	r2, #0
 800105a:	4619      	mov	r1, r3
 800105c:	481a      	ldr	r0, [pc, #104]	@ (80010c8 <MX_TIM8_Init+0x120>)
 800105e:	f005 fa71 	bl	8006544 <HAL_TIM_PWM_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001068:	f000 fc1e 	bl	80018a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001080:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001084:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800108a:	2300      	movs	r3, #0
 800108c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001092:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001096:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800109c:	2300      	movs	r3, #0
 800109e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	4619      	mov	r1, r3
 80010a8:	4807      	ldr	r0, [pc, #28]	@ (80010c8 <MX_TIM8_Init+0x120>)
 80010aa:	f006 f821 	bl	80070f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80010b4:	f000 fbf8 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80010b8:	4803      	ldr	r0, [pc, #12]	@ (80010c8 <MX_TIM8_Init+0x120>)
 80010ba:	f000 fda9 	bl	8001c10 <HAL_TIM_MspPostInit>

}
 80010be:	bf00      	nop
 80010c0:	3760      	adds	r7, #96	@ 0x60
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000040c 	.word	0x2000040c
 80010cc:	40013400 	.word	0x40013400

080010d0 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b098      	sub	sp, #96	@ 0x60
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]
 80010f2:	615a      	str	r2, [r3, #20]
 80010f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	2234      	movs	r2, #52	@ 0x34
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f00b ffd3 	bl	800d0a8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001102:	4b34      	ldr	r3, [pc, #208]	@ (80011d4 <MX_TIM15_Init+0x104>)
 8001104:	4a34      	ldr	r2, [pc, #208]	@ (80011d8 <MX_TIM15_Init+0x108>)
 8001106:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8001108:	4b32      	ldr	r3, [pc, #200]	@ (80011d4 <MX_TIM15_Init+0x104>)
 800110a:	2200      	movs	r2, #0
 800110c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110e:	4b31      	ldr	r3, [pc, #196]	@ (80011d4 <MX_TIM15_Init+0x104>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001114:	4b2f      	ldr	r3, [pc, #188]	@ (80011d4 <MX_TIM15_Init+0x104>)
 8001116:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800111a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111c:	4b2d      	ldr	r3, [pc, #180]	@ (80011d4 <MX_TIM15_Init+0x104>)
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001122:	4b2c      	ldr	r3, [pc, #176]	@ (80011d4 <MX_TIM15_Init+0x104>)
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001128:	4b2a      	ldr	r3, [pc, #168]	@ (80011d4 <MX_TIM15_Init+0x104>)
 800112a:	2280      	movs	r2, #128	@ 0x80
 800112c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800112e:	4829      	ldr	r0, [pc, #164]	@ (80011d4 <MX_TIM15_Init+0x104>)
 8001130:	f004 ff4f 	bl	8005fd2 <HAL_TIM_PWM_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 800113a:	f000 fbb5 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001146:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800114a:	4619      	mov	r1, r3
 800114c:	4821      	ldr	r0, [pc, #132]	@ (80011d4 <MX_TIM15_Init+0x104>)
 800114e:	f005 ff39 	bl	8006fc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001158:	f000 fba6 	bl	80018a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800115c:	2360      	movs	r3, #96	@ 0x60
 800115e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001164:	2300      	movs	r3, #0
 8001166:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001168:	2300      	movs	r3, #0
 800116a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116c:	2300      	movs	r3, #0
 800116e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001174:	2300      	movs	r3, #0
 8001176:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001178:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800117c:	2200      	movs	r2, #0
 800117e:	4619      	mov	r1, r3
 8001180:	4814      	ldr	r0, [pc, #80]	@ (80011d4 <MX_TIM15_Init+0x104>)
 8001182:	f005 f9df 	bl	8006544 <HAL_TIM_PWM_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 800118c:	f000 fb8c 	bl	80018a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	4619      	mov	r1, r3
 80011b6:	4807      	ldr	r0, [pc, #28]	@ (80011d4 <MX_TIM15_Init+0x104>)
 80011b8:	f005 ff9a 	bl	80070f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 80011c2:	f000 fb71 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80011c6:	4803      	ldr	r0, [pc, #12]	@ (80011d4 <MX_TIM15_Init+0x104>)
 80011c8:	f000 fd22 	bl	8001c10 <HAL_TIM_MspPostInit>

}
 80011cc:	bf00      	nop
 80011ce:	3760      	adds	r7, #96	@ 0x60
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000458 	.word	0x20000458
 80011d8:	40014000 	.word	0x40014000

080011dc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b094      	sub	sp, #80	@ 0x50
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]
 80011f2:	615a      	str	r2, [r3, #20]
 80011f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011f6:	463b      	mov	r3, r7
 80011f8:	2234      	movs	r2, #52	@ 0x34
 80011fa:	2100      	movs	r1, #0
 80011fc:	4618      	mov	r0, r3
 80011fe:	f00b ff53 	bl	800d0a8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001202:	4b31      	ldr	r3, [pc, #196]	@ (80012c8 <MX_TIM16_Init+0xec>)
 8001204:	4a31      	ldr	r2, [pc, #196]	@ (80012cc <MX_TIM16_Init+0xf0>)
 8001206:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001208:	4b2f      	ldr	r3, [pc, #188]	@ (80012c8 <MX_TIM16_Init+0xec>)
 800120a:	2200      	movs	r2, #0
 800120c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120e:	4b2e      	ldr	r3, [pc, #184]	@ (80012c8 <MX_TIM16_Init+0xec>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001214:	4b2c      	ldr	r3, [pc, #176]	@ (80012c8 <MX_TIM16_Init+0xec>)
 8001216:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800121a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121c:	4b2a      	ldr	r3, [pc, #168]	@ (80012c8 <MX_TIM16_Init+0xec>)
 800121e:	2200      	movs	r2, #0
 8001220:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001222:	4b29      	ldr	r3, [pc, #164]	@ (80012c8 <MX_TIM16_Init+0xec>)
 8001224:	2200      	movs	r2, #0
 8001226:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001228:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <MX_TIM16_Init+0xec>)
 800122a:	2280      	movs	r2, #128	@ 0x80
 800122c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800122e:	4826      	ldr	r0, [pc, #152]	@ (80012c8 <MX_TIM16_Init+0xec>)
 8001230:	f004 fdd0 	bl	8005dd4 <HAL_TIM_Base_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800123a:	f000 fb35 	bl	80018a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800123e:	4822      	ldr	r0, [pc, #136]	@ (80012c8 <MX_TIM16_Init+0xec>)
 8001240:	f004 fec7 	bl	8005fd2 <HAL_TIM_PWM_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800124a:	f000 fb2d 	bl	80018a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124e:	2360      	movs	r3, #96	@ 0x60
 8001250:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001256:	2300      	movs	r3, #0
 8001258:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800125a:	2300      	movs	r3, #0
 800125c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001266:	2300      	movs	r3, #0
 8001268:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800126a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800126e:	2200      	movs	r2, #0
 8001270:	4619      	mov	r1, r3
 8001272:	4815      	ldr	r0, [pc, #84]	@ (80012c8 <MX_TIM16_Init+0xec>)
 8001274:	f005 f966 	bl	8006544 <HAL_TIM_PWM_ConfigChannel>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800127e:	f000 fb13 	bl	80018a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800128a:	2300      	movs	r3, #0
 800128c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001296:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800129a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	4619      	mov	r1, r3
 80012a8:	4807      	ldr	r0, [pc, #28]	@ (80012c8 <MX_TIM16_Init+0xec>)
 80012aa:	f005 ff21 	bl	80070f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80012b4:	f000 faf8 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80012b8:	4803      	ldr	r0, [pc, #12]	@ (80012c8 <MX_TIM16_Init+0xec>)
 80012ba:	f000 fca9 	bl	8001c10 <HAL_TIM_MspPostInit>

}
 80012be:	bf00      	nop
 80012c0:	3750      	adds	r7, #80	@ 0x50
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200004a4 	.word	0x200004a4
 80012cc:	40014400 	.word	0x40014400

080012d0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b094      	sub	sp, #80	@ 0x50
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]
 80012e6:	615a      	str	r2, [r3, #20]
 80012e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012ea:	463b      	mov	r3, r7
 80012ec:	2234      	movs	r2, #52	@ 0x34
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f00b fed9 	bl	800d0a8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80012f6:	4b31      	ldr	r3, [pc, #196]	@ (80013bc <MX_TIM17_Init+0xec>)
 80012f8:	4a31      	ldr	r2, [pc, #196]	@ (80013c0 <MX_TIM17_Init+0xf0>)
 80012fa:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80012fc:	4b2f      	ldr	r3, [pc, #188]	@ (80013bc <MX_TIM17_Init+0xec>)
 80012fe:	2200      	movs	r2, #0
 8001300:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001302:	4b2e      	ldr	r3, [pc, #184]	@ (80013bc <MX_TIM17_Init+0xec>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001308:	4b2c      	ldr	r3, [pc, #176]	@ (80013bc <MX_TIM17_Init+0xec>)
 800130a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800130e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001310:	4b2a      	ldr	r3, [pc, #168]	@ (80013bc <MX_TIM17_Init+0xec>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001316:	4b29      	ldr	r3, [pc, #164]	@ (80013bc <MX_TIM17_Init+0xec>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800131c:	4b27      	ldr	r3, [pc, #156]	@ (80013bc <MX_TIM17_Init+0xec>)
 800131e:	2280      	movs	r2, #128	@ 0x80
 8001320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001322:	4826      	ldr	r0, [pc, #152]	@ (80013bc <MX_TIM17_Init+0xec>)
 8001324:	f004 fd56 	bl	8005dd4 <HAL_TIM_Base_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 800132e:	f000 fabb 	bl	80018a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001332:	4822      	ldr	r0, [pc, #136]	@ (80013bc <MX_TIM17_Init+0xec>)
 8001334:	f004 fe4d 	bl	8005fd2 <HAL_TIM_PWM_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800133e:	f000 fab3 	bl	80018a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001342:	2360      	movs	r3, #96	@ 0x60
 8001344:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800134a:	2300      	movs	r3, #0
 800134c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800134e:	2300      	movs	r3, #0
 8001350:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800135e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001362:	2200      	movs	r2, #0
 8001364:	4619      	mov	r1, r3
 8001366:	4815      	ldr	r0, [pc, #84]	@ (80013bc <MX_TIM17_Init+0xec>)
 8001368:	f005 f8ec 	bl	8006544 <HAL_TIM_PWM_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8001372:	f000 fa99 	bl	80018a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800138a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800138e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001398:	463b      	mov	r3, r7
 800139a:	4619      	mov	r1, r3
 800139c:	4807      	ldr	r0, [pc, #28]	@ (80013bc <MX_TIM17_Init+0xec>)
 800139e:	f005 fea7 	bl	80070f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80013a8:	f000 fa7e 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80013ac:	4803      	ldr	r0, [pc, #12]	@ (80013bc <MX_TIM17_Init+0xec>)
 80013ae:	f000 fc2f 	bl	8001c10 <HAL_TIM_MspPostInit>

}
 80013b2:	bf00      	nop
 80013b4:	3750      	adds	r7, #80	@ 0x50
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200004f0 	.word	0x200004f0
 80013c0:	40014800 	.word	0x40014800

080013c4 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b098      	sub	sp, #96	@ 0x60
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ca:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]
 80013e6:	615a      	str	r2, [r3, #20]
 80013e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	2234      	movs	r2, #52	@ 0x34
 80013ee:	2100      	movs	r1, #0
 80013f0:	4618      	mov	r0, r3
 80013f2:	f00b fe59 	bl	800d0a8 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 80013f6:	4b3b      	ldr	r3, [pc, #236]	@ (80014e4 <MX_TIM20_Init+0x120>)
 80013f8:	4a3b      	ldr	r2, [pc, #236]	@ (80014e8 <MX_TIM20_Init+0x124>)
 80013fa:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 80013fc:	4b39      	ldr	r3, [pc, #228]	@ (80014e4 <MX_TIM20_Init+0x120>)
 80013fe:	2200      	movs	r2, #0
 8001400:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001402:	4b38      	ldr	r3, [pc, #224]	@ (80014e4 <MX_TIM20_Init+0x120>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8001408:	4b36      	ldr	r3, [pc, #216]	@ (80014e4 <MX_TIM20_Init+0x120>)
 800140a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800140e:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001410:	4b34      	ldr	r3, [pc, #208]	@ (80014e4 <MX_TIM20_Init+0x120>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8001416:	4b33      	ldr	r3, [pc, #204]	@ (80014e4 <MX_TIM20_Init+0x120>)
 8001418:	2200      	movs	r2, #0
 800141a:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800141c:	4b31      	ldr	r3, [pc, #196]	@ (80014e4 <MX_TIM20_Init+0x120>)
 800141e:	2280      	movs	r2, #128	@ 0x80
 8001420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8001422:	4830      	ldr	r0, [pc, #192]	@ (80014e4 <MX_TIM20_Init+0x120>)
 8001424:	f004 fdd5 	bl	8005fd2 <HAL_TIM_PWM_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM20_Init+0x6e>
  {
    Error_Handler();
 800142e:	f000 fa3b 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001432:	2300      	movs	r3, #0
 8001434:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 800143e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001442:	4619      	mov	r1, r3
 8001444:	4827      	ldr	r0, [pc, #156]	@ (80014e4 <MX_TIM20_Init+0x120>)
 8001446:	f005 fdbd 	bl	8006fc4 <HAL_TIMEx_MasterConfigSynchronization>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM20_Init+0x90>
  {
    Error_Handler();
 8001450:	f000 fa2a 	bl	80018a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001454:	2360      	movs	r3, #96	@ 0x60
 8001456:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800145c:	2300      	movs	r3, #0
 800145e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001460:	2300      	movs	r3, #0
 8001462:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001468:	2300      	movs	r3, #0
 800146a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001470:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001474:	2200      	movs	r2, #0
 8001476:	4619      	mov	r1, r3
 8001478:	481a      	ldr	r0, [pc, #104]	@ (80014e4 <MX_TIM20_Init+0x120>)
 800147a:	f005 f863 	bl	8006544 <HAL_TIM_PWM_ConfigChannel>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM20_Init+0xc4>
  {
    Error_Handler();
 8001484:	f000 fa10 	bl	80018a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800149c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014a0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80014b8:	2300      	movs	r3, #0
 80014ba:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	4619      	mov	r1, r3
 80014c4:	4807      	ldr	r0, [pc, #28]	@ (80014e4 <MX_TIM20_Init+0x120>)
 80014c6:	f005 fe13 	bl	80070f0 <HAL_TIMEx_ConfigBreakDeadTime>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <MX_TIM20_Init+0x110>
  {
    Error_Handler();
 80014d0:	f000 f9ea 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 80014d4:	4803      	ldr	r0, [pc, #12]	@ (80014e4 <MX_TIM20_Init+0x120>)
 80014d6:	f000 fb9b 	bl	8001c10 <HAL_TIM_MspPostInit>

}
 80014da:	bf00      	nop
 80014dc:	3760      	adds	r7, #96	@ 0x60
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	2000053c 	.word	0x2000053c
 80014e8:	40015000 	.word	0x40015000

080014ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014f0:	4b22      	ldr	r3, [pc, #136]	@ (800157c <MX_USART1_UART_Init+0x90>)
 80014f2:	4a23      	ldr	r2, [pc, #140]	@ (8001580 <MX_USART1_UART_Init+0x94>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014f6:	4b21      	ldr	r3, [pc, #132]	@ (800157c <MX_USART1_UART_Init+0x90>)
 80014f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b1f      	ldr	r3, [pc, #124]	@ (800157c <MX_USART1_UART_Init+0x90>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b1d      	ldr	r3, [pc, #116]	@ (800157c <MX_USART1_UART_Init+0x90>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800150a:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <MX_USART1_UART_Init+0x90>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <MX_USART1_UART_Init+0x90>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b19      	ldr	r3, [pc, #100]	@ (800157c <MX_USART1_UART_Init+0x90>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b17      	ldr	r3, [pc, #92]	@ (800157c <MX_USART1_UART_Init+0x90>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001522:	4b16      	ldr	r3, [pc, #88]	@ (800157c <MX_USART1_UART_Init+0x90>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001528:	4b14      	ldr	r3, [pc, #80]	@ (800157c <MX_USART1_UART_Init+0x90>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800152e:	4b13      	ldr	r3, [pc, #76]	@ (800157c <MX_USART1_UART_Init+0x90>)
 8001530:	2200      	movs	r2, #0
 8001532:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001534:	4811      	ldr	r0, [pc, #68]	@ (800157c <MX_USART1_UART_Init+0x90>)
 8001536:	f005 feb5 	bl	80072a4 <HAL_UART_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001540:	f000 f9b2 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001544:	2100      	movs	r1, #0
 8001546:	480d      	ldr	r0, [pc, #52]	@ (800157c <MX_USART1_UART_Init+0x90>)
 8001548:	f007 f811 	bl	800856e <HAL_UARTEx_SetTxFifoThreshold>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001552:	f000 f9a9 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001556:	2100      	movs	r1, #0
 8001558:	4808      	ldr	r0, [pc, #32]	@ (800157c <MX_USART1_UART_Init+0x90>)
 800155a:	f007 f846 	bl	80085ea <HAL_UARTEx_SetRxFifoThreshold>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001564:	f000 f9a0 	bl	80018a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001568:	4804      	ldr	r0, [pc, #16]	@ (800157c <MX_USART1_UART_Init+0x90>)
 800156a:	f006 ffc7 	bl	80084fc <HAL_UARTEx_DisableFifoMode>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001574:	f000 f998 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000588 	.word	0x20000588
 8001580:	40013800 	.word	0x40013800

08001584 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	@ 0x28
 8001588:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159a:	4b4d      	ldr	r3, [pc, #308]	@ (80016d0 <MX_GPIO_Init+0x14c>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	4a4c      	ldr	r2, [pc, #304]	@ (80016d0 <MX_GPIO_Init+0x14c>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015a6:	4b4a      	ldr	r3, [pc, #296]	@ (80016d0 <MX_GPIO_Init+0x14c>)
 80015a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	613b      	str	r3, [r7, #16]
 80015b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015b2:	4b47      	ldr	r3, [pc, #284]	@ (80016d0 <MX_GPIO_Init+0x14c>)
 80015b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015b6:	4a46      	ldr	r2, [pc, #280]	@ (80016d0 <MX_GPIO_Init+0x14c>)
 80015b8:	f043 0320 	orr.w	r3, r3, #32
 80015bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015be:	4b44      	ldr	r3, [pc, #272]	@ (80016d0 <MX_GPIO_Init+0x14c>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c2:	f003 0320 	and.w	r3, r3, #32
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	4b41      	ldr	r3, [pc, #260]	@ (80016d0 <MX_GPIO_Init+0x14c>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ce:	4a40      	ldr	r2, [pc, #256]	@ (80016d0 <MX_GPIO_Init+0x14c>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015d6:	4b3e      	ldr	r3, [pc, #248]	@ (80016d0 <MX_GPIO_Init+0x14c>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	4b3b      	ldr	r3, [pc, #236]	@ (80016d0 <MX_GPIO_Init+0x14c>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e6:	4a3a      	ldr	r2, [pc, #232]	@ (80016d0 <MX_GPIO_Init+0x14c>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ee:	4b38      	ldr	r3, [pc, #224]	@ (80016d0 <MX_GPIO_Init+0x14c>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_GREEN_Pin|LED_YELLOW_Pin|INT_KILL_Pin, GPIO_PIN_RESET);
 80015fa:	2200      	movs	r2, #0
 80015fc:	f44f 41d0 	mov.w	r1, #26624	@ 0x6800
 8001600:	4834      	ldr	r0, [pc, #208]	@ (80016d4 <MX_GPIO_Init+0x150>)
 8001602:	f001 f999 	bl	8002938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|POWER_OFF_Pin, GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800160c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001610:	f001 f992 	bl	8002938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_Pin|GREEN_Pin|BLUE_Pin, GPIO_PIN_RESET);
 8001614:	2200      	movs	r2, #0
 8001616:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 800161a:	482f      	ldr	r0, [pc, #188]	@ (80016d8 <MX_GPIO_Init+0x154>)
 800161c:	f001 f98c 	bl	8002938 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_YELLOW_Pin INT_KILL_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_YELLOW_Pin|INT_KILL_Pin;
 8001620:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001626:	2301      	movs	r3, #1
 8001628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	4826      	ldr	r0, [pc, #152]	@ (80016d4 <MX_GPIO_Init+0x150>)
 800163a:	f000 ffe3 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin POWER_OFF_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|POWER_OFF_Pin;
 800163e:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8001642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001644:	2301      	movs	r3, #1
 8001646:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800165a:	f000 ffd3 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_KILL_Pin */
  GPIO_InitStruct.Pin = EXT_KILL_Pin;
 800165e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001664:	2300      	movs	r3, #0
 8001666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001668:	2302      	movs	r3, #2
 800166a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXT_KILL_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	4819      	ldr	r0, [pc, #100]	@ (80016d8 <MX_GPIO_Init+0x154>)
 8001674:	f000 ffc6 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_Pin GREEN_Pin BLUE_Pin */
  GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin|BLUE_Pin;
 8001678:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800167c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167e:	2301      	movs	r3, #1
 8001680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	4811      	ldr	r0, [pc, #68]	@ (80016d8 <MX_GPIO_Init+0x154>)
 8001692:	f000 ffb7 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_IN_Pin */
  GPIO_InitStruct.Pin = BUTTON_IN_Pin;
 8001696:	2380      	movs	r3, #128	@ 0x80
 8001698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169a:	2300      	movs	r3, #0
 800169c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800169e:	2301      	movs	r3, #1
 80016a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_IN_GPIO_Port, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	480a      	ldr	r0, [pc, #40]	@ (80016d4 <MX_GPIO_Init+0x150>)
 80016aa:	f000 ffab 	bl	8002604 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_DETECT_Pin */
  GPIO_InitStruct.Pin = VBUS_DETECT_Pin;
 80016ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_DETECT_GPIO_Port, &GPIO_InitStruct);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4619      	mov	r1, r3
 80016c2:	4804      	ldr	r0, [pc, #16]	@ (80016d4 <MX_GPIO_Init+0x150>)
 80016c4:	f000 ff9e 	bl	8002604 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016c8:	bf00      	nop
 80016ca:	3728      	adds	r7, #40	@ 0x28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000
 80016d4:	48000800 	.word	0x48000800
 80016d8:	48000400 	.word	0x48000400

080016dc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ // this interrupt gets called when a timer overflows
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM7){
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a44      	ldr	r2, [pc, #272]	@ (80017fc <HAL_TIM_PeriodElapsedCallback+0x120>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d106      	bne.n	80016fc <HAL_TIM_PeriodElapsedCallback+0x20>
		okayToRunMotorsYet = 1;
 80016ee:	4b44      	ldr	r3, [pc, #272]	@ (8001800 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim7);
 80016f4:	4843      	ldr	r0, [pc, #268]	@ (8001804 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80016f6:	f004 fc3d 	bl	8005f74 <HAL_TIM_Base_Stop_IT>

    }
    }
	}

}
 80016fa:	e07b      	b.n	80017f4 <HAL_TIM_PeriodElapsedCallback+0x118>
	else if (htim->Instance == TIM6) { // check if the timer 6 was the one that overflowed
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a41      	ldr	r2, [pc, #260]	@ (8001808 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d176      	bne.n	80017f4 <HAL_TIM_PeriodElapsedCallback+0x118>
if (lockColor == 0){ // if the button hasn't been pushed then go ahead and change to the next color
 8001706:	4b41      	ldr	r3, [pc, #260]	@ (800180c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d12f      	bne.n	800176e <HAL_TIM_PeriodElapsedCallback+0x92>
	HAL_GPIO_WritePin(GPIOB, RED_Pin|GREEN_Pin|BLUE_Pin, GPIO_PIN_RESET); // turn off the previous led
 800170e:	2200      	movs	r2, #0
 8001710:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001714:	483e      	ldr	r0, [pc, #248]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001716:	f001 f90f 	bl	8002938 <HAL_GPIO_WritePin>
    if (color == 'R'){ // 'R' stands for red
 800171a:	4b3e      	ldr	r3, [pc, #248]	@ (8001814 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b52      	cmp	r3, #82	@ 0x52
 8001720:	d109      	bne.n	8001736 <HAL_TIM_PeriodElapsedCallback+0x5a>
    	  HAL_GPIO_WritePin(GPIOB, RED_Pin, GPIO_PIN_SET); // turn on red led
 8001722:	2201      	movs	r2, #1
 8001724:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001728:	4839      	ldr	r0, [pc, #228]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800172a:	f001 f905 	bl	8002938 <HAL_GPIO_WritePin>
    	  color = 'G'; // next color is green
 800172e:	4b39      	ldr	r3, [pc, #228]	@ (8001814 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001730:	2247      	movs	r2, #71	@ 0x47
 8001732:	701a      	strb	r2, [r3, #0]
}
 8001734:	e05e      	b.n	80017f4 <HAL_TIM_PeriodElapsedCallback+0x118>
    else if (color == 'G'){ // 'G' stands for green
 8001736:	4b37      	ldr	r3, [pc, #220]	@ (8001814 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b47      	cmp	r3, #71	@ 0x47
 800173c:	d109      	bne.n	8001752 <HAL_TIM_PeriodElapsedCallback+0x76>
    	  HAL_GPIO_WritePin(GPIOB, GREEN_Pin, GPIO_PIN_SET); // turn on green led
 800173e:	2201      	movs	r2, #1
 8001740:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001744:	4832      	ldr	r0, [pc, #200]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001746:	f001 f8f7 	bl	8002938 <HAL_GPIO_WritePin>
    	  color = 'B'; // next color is blue
 800174a:	4b32      	ldr	r3, [pc, #200]	@ (8001814 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800174c:	2242      	movs	r2, #66	@ 0x42
 800174e:	701a      	strb	r2, [r3, #0]
}
 8001750:	e050      	b.n	80017f4 <HAL_TIM_PeriodElapsedCallback+0x118>
    else if (color == 'B'){ // 'B' stands for blue
 8001752:	4b30      	ldr	r3, [pc, #192]	@ (8001814 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b42      	cmp	r3, #66	@ 0x42
 8001758:	d14c      	bne.n	80017f4 <HAL_TIM_PeriodElapsedCallback+0x118>
    	  HAL_GPIO_WritePin(GPIOB, BLUE_Pin, GPIO_PIN_SET); // turn on blue led
 800175a:	2201      	movs	r2, #1
 800175c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001760:	482b      	ldr	r0, [pc, #172]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001762:	f001 f8e9 	bl	8002938 <HAL_GPIO_WritePin>
    	  color = 'R'; // next color is blue
 8001766:	4b2b      	ldr	r3, [pc, #172]	@ (8001814 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001768:	2252      	movs	r2, #82	@ 0x52
 800176a:	701a      	strb	r2, [r3, #0]
}
 800176c:	e042      	b.n	80017f4 <HAL_TIM_PeriodElapsedCallback+0x118>
    lockColor ++;
 800176e:	4b27      	ldr	r3, [pc, #156]	@ (800180c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	3301      	adds	r3, #1
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b25      	ldr	r3, [pc, #148]	@ (800180c <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001778:	701a      	strb	r2, [r3, #0]
    if (color == 'G'){
 800177a:	4b26      	ldr	r3, [pc, #152]	@ (8001814 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b47      	cmp	r3, #71	@ 0x47
 8001780:	d105      	bne.n	800178e <HAL_TIM_PeriodElapsedCallback+0xb2>
    HAL_GPIO_TogglePin(GPIOB,  RED_Pin);
 8001782:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001786:	4822      	ldr	r0, [pc, #136]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001788:	f001 f8ee 	bl	8002968 <HAL_GPIO_TogglePin>
 800178c:	e012      	b.n	80017b4 <HAL_TIM_PeriodElapsedCallback+0xd8>
    else if (color == 'B'){
 800178e:	4b21      	ldr	r3, [pc, #132]	@ (8001814 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b42      	cmp	r3, #66	@ 0x42
 8001794:	d105      	bne.n	80017a2 <HAL_TIM_PeriodElapsedCallback+0xc6>
    HAL_GPIO_TogglePin(GPIOB,  GREEN_Pin);
 8001796:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800179a:	481d      	ldr	r0, [pc, #116]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800179c:	f001 f8e4 	bl	8002968 <HAL_GPIO_TogglePin>
 80017a0:	e008      	b.n	80017b4 <HAL_TIM_PeriodElapsedCallback+0xd8>
    else if (color == 'R'){
 80017a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001814 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b52      	cmp	r3, #82	@ 0x52
 80017a8:	d104      	bne.n	80017b4 <HAL_TIM_PeriodElapsedCallback+0xd8>
    HAL_GPIO_TogglePin(GPIOB,  BLUE_Pin);
 80017aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017ae:	4818      	ldr	r0, [pc, #96]	@ (8001810 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80017b0:	f001 f8da 	bl	8002968 <HAL_GPIO_TogglePin>
    if (lockColor == 20){ // toggle whatever led was pressed this many times
 80017b4:	4b15      	ldr	r3, [pc, #84]	@ (800180c <HAL_TIM_PeriodElapsedCallback+0x130>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b14      	cmp	r3, #20
 80017ba:	d11b      	bne.n	80017f4 <HAL_TIM_PeriodElapsedCallback+0x118>
    	lockColor = 0; // reset lock color so that we can change to the next color
 80017bc:	4b13      	ldr	r3, [pc, #76]	@ (800180c <HAL_TIM_PeriodElapsedCallback+0x130>)
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
    	checkRedMode = 0; // exit checkRedMode
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
    	buttonPushedAlready = 0; // reset this so that we can accept a new button input
 80017c8:	4b14      	ldr	r3, [pc, #80]	@ (800181c <HAL_TIM_PeriodElapsedCallback+0x140>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
    	buttonReleased = 0;
 80017ce:	4b14      	ldr	r3, [pc, #80]	@ (8001820 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	701a      	strb	r2, [r3, #0]
    	__HAL_TIM_SET_AUTORELOAD(&htim6, 65535); // set the timer period to something slower
 80017d4:	4b13      	ldr	r3, [pc, #76]	@ (8001824 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80017de:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80017e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017e4:	60da      	str	r2, [r3, #12]
    	__HAL_TIM_SET_COUNTER(&htim6, __HAL_TIM_GET_AUTORELOAD(&htim6) - 1); // force the timer to overflow so we don't have to wait for the previous led blink to finish
 80017e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001824 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001824 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	3a01      	subs	r2, #1
 80017f2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80017f4:	bf00      	nop
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40001400 	.word	0x40001400
 8001800:	20000000 	.word	0x20000000
 8001804:	200003c0 	.word	0x200003c0
 8001808:	40001000 	.word	0x40001000
 800180c:	20000666 	.word	0x20000666
 8001810:	48000400 	.word	0x48000400
 8001814:	20000001 	.word	0x20000001
 8001818:	2000066a 	.word	0x2000066a
 800181c:	20000667 	.word	0x20000667
 8001820:	20000668 	.word	0x20000668
 8001824:	20000374 	.word	0x20000374

08001828 <Set_TIM_Compare>:


void Set_TIM_Compare(TIM_HandleTypeDef *htim, int32_t receivedVal)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
    if ((receivedVal == 0) || (intKillState == 1) || (extKillState == 1) || (receivedVal > 8850) || (receivedVal < -8850))
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d010      	beq.n	800185a <Set_TIM_Compare+0x32>
 8001838:	4b18      	ldr	r3, [pc, #96]	@ (800189c <Set_TIM_Compare+0x74>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d00c      	beq.n	800185a <Set_TIM_Compare+0x32>
 8001840:	4b17      	ldr	r3, [pc, #92]	@ (80018a0 <Set_TIM_Compare+0x78>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d008      	beq.n	800185a <Set_TIM_Compare+0x32>
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	f242 2292 	movw	r2, #8850	@ 0x2292
 800184e:	4293      	cmp	r3, r2
 8001850:	dc03      	bgt.n	800185a <Set_TIM_Compare+0x32>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	4a13      	ldr	r2, [pc, #76]	@ (80018a4 <Set_TIM_Compare+0x7c>)
 8001856:	4293      	cmp	r3, r2
 8001858:	da05      	bge.n	8001866 <Set_TIM_Compare+0x3e>
    {
        __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, 35999);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8001862:	635a      	str	r2, [r3, #52]	@ 0x34
    else if (receivedVal < 0)
    {
        __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, 35999 - 750 + receivedVal);
    }

}
 8001864:	e014      	b.n	8001890 <Set_TIM_Compare+0x68>
    else if (receivedVal > 0)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	dd07      	ble.n	800187c <Set_TIM_Compare+0x54>
        __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, 35999 + 750 + receivedVal);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f503 430f 	add.w	r3, r3, #36608	@ 0x8f00
 8001872:	338d      	adds	r3, #141	@ 0x8d
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800187a:	e009      	b.n	8001890 <Set_TIM_Compare+0x68>
    else if (receivedVal < 0)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	da06      	bge.n	8001890 <Set_TIM_Compare+0x68>
        __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, 35999 - 750 + receivedVal);
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	f503 4309 	add.w	r3, r3, #35072	@ 0x8900
 8001888:	33b1      	adds	r3, #177	@ 0xb1
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	20000662 	.word	0x20000662
 80018a0:	20000663 	.word	0x20000663
 80018a4:	ffffdd6e 	.word	0xffffdd6e

080018a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018ac:	b672      	cpsid	i
}
 80018ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <Error_Handler+0x8>

080018b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ba:	4b0f      	ldr	r3, [pc, #60]	@ (80018f8 <HAL_MspInit+0x44>)
 80018bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018be:	4a0e      	ldr	r2, [pc, #56]	@ (80018f8 <HAL_MspInit+0x44>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80018c6:	4b0c      	ldr	r3, [pc, #48]	@ (80018f8 <HAL_MspInit+0x44>)
 80018c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	607b      	str	r3, [r7, #4]
 80018d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d2:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <HAL_MspInit+0x44>)
 80018d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d6:	4a08      	ldr	r2, [pc, #32]	@ (80018f8 <HAL_MspInit+0x44>)
 80018d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80018de:	4b06      	ldr	r3, [pc, #24]	@ (80018f8 <HAL_MspInit+0x44>)
 80018e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e6:	603b      	str	r3, [r7, #0]
 80018e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80018ea:	f003 faeb 	bl	8004ec4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40021000 	.word	0x40021000

080018fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b0a0      	sub	sp, #128	@ 0x80
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001914:	f107 0318 	add.w	r3, r7, #24
 8001918:	2254      	movs	r2, #84	@ 0x54
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f00b fbc3 	bl	800d0a8 <memset>
  if(hi2c->Instance==I2C2)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a2d      	ldr	r2, [pc, #180]	@ (80019dc <HAL_I2C_MspInit+0xe0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d153      	bne.n	80019d4 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800192c:	2380      	movs	r3, #128	@ 0x80
 800192e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001930:	2300      	movs	r3, #0
 8001932:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001934:	f107 0318 	add.w	r3, r7, #24
 8001938:	4618      	mov	r0, r3
 800193a:	f003 fffd 	bl	8005938 <HAL_RCCEx_PeriphCLKConfig>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001944:	f7ff ffb0 	bl	80018a8 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001948:	4b25      	ldr	r3, [pc, #148]	@ (80019e0 <HAL_I2C_MspInit+0xe4>)
 800194a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194c:	4a24      	ldr	r2, [pc, #144]	@ (80019e0 <HAL_I2C_MspInit+0xe4>)
 800194e:	f043 0304 	orr.w	r3, r3, #4
 8001952:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001954:	4b22      	ldr	r3, [pc, #136]	@ (80019e0 <HAL_I2C_MspInit+0xe4>)
 8001956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001960:	4b1f      	ldr	r3, [pc, #124]	@ (80019e0 <HAL_I2C_MspInit+0xe4>)
 8001962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001964:	4a1e      	ldr	r2, [pc, #120]	@ (80019e0 <HAL_I2C_MspInit+0xe4>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800196c:	4b1c      	ldr	r3, [pc, #112]	@ (80019e0 <HAL_I2C_MspInit+0xe4>)
 800196e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PC4     ------> I2C2_SCL
    PA8     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001978:	2310      	movs	r3, #16
 800197a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800197c:	2312      	movs	r3, #18
 800197e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001988:	2304      	movs	r3, #4
 800198a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800198c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001990:	4619      	mov	r1, r3
 8001992:	4814      	ldr	r0, [pc, #80]	@ (80019e4 <HAL_I2C_MspInit+0xe8>)
 8001994:	f000 fe36 	bl	8002604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001998:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800199c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800199e:	2312      	movs	r3, #18
 80019a0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019aa:	2304      	movs	r3, #4
 80019ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ae:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80019b2:	4619      	mov	r1, r3
 80019b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019b8:	f000 fe24 	bl	8002604 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019bc:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <HAL_I2C_MspInit+0xe4>)
 80019be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c0:	4a07      	ldr	r2, [pc, #28]	@ (80019e0 <HAL_I2C_MspInit+0xe4>)
 80019c2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80019c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80019c8:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <HAL_I2C_MspInit+0xe4>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80019d4:	bf00      	nop
 80019d6:	3780      	adds	r7, #128	@ 0x80
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40005800 	.word	0x40005800
 80019e0:	40021000 	.word	0x40021000
 80019e4:	48000800 	.word	0x48000800

080019e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b08b      	sub	sp, #44	@ 0x2c
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a49      	ldr	r2, [pc, #292]	@ (8001b1c <HAL_TIM_PWM_MspInit+0x134>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d10c      	bne.n	8001a14 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019fa:	4b49      	ldr	r3, [pc, #292]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 80019fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019fe:	4a48      	ldr	r2, [pc, #288]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 8001a00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a04:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a06:	4b46      	ldr	r3, [pc, #280]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 8001a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 8001a12:	e07c      	b.n	8001b0e <HAL_TIM_PWM_MspInit+0x126>
  else if(htim_pwm->Instance==TIM2)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a1c:	d10c      	bne.n	8001a38 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a1e:	4b40      	ldr	r3, [pc, #256]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 8001a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a22:	4a3f      	ldr	r2, [pc, #252]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	623b      	str	r3, [r7, #32]
 8001a34:	6a3b      	ldr	r3, [r7, #32]
}
 8001a36:	e06a      	b.n	8001b0e <HAL_TIM_PWM_MspInit+0x126>
  else if(htim_pwm->Instance==TIM3)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a39      	ldr	r2, [pc, #228]	@ (8001b24 <HAL_TIM_PWM_MspInit+0x13c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d10c      	bne.n	8001a5c <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a42:	4b37      	ldr	r3, [pc, #220]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 8001a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a46:	4a36      	ldr	r2, [pc, #216]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 8001a48:	f043 0302 	orr.w	r3, r3, #2
 8001a4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a4e:	4b34      	ldr	r3, [pc, #208]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 8001a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	61fb      	str	r3, [r7, #28]
 8001a58:	69fb      	ldr	r3, [r7, #28]
}
 8001a5a:	e058      	b.n	8001b0e <HAL_TIM_PWM_MspInit+0x126>
  else if(htim_pwm->Instance==TIM4)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a31      	ldr	r2, [pc, #196]	@ (8001b28 <HAL_TIM_PWM_MspInit+0x140>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d10c      	bne.n	8001a80 <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a66:	4b2e      	ldr	r3, [pc, #184]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 8001a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6a:	4a2d      	ldr	r2, [pc, #180]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 8001a6c:	f043 0304 	orr.w	r3, r3, #4
 8001a70:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a72:	4b2b      	ldr	r3, [pc, #172]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 8001a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a76:	f003 0304 	and.w	r3, r3, #4
 8001a7a:	61bb      	str	r3, [r7, #24]
 8001a7c:	69bb      	ldr	r3, [r7, #24]
}
 8001a7e:	e046      	b.n	8001b0e <HAL_TIM_PWM_MspInit+0x126>
  else if(htim_pwm->Instance==TIM5)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a29      	ldr	r2, [pc, #164]	@ (8001b2c <HAL_TIM_PWM_MspInit+0x144>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d10c      	bne.n	8001aa4 <HAL_TIM_PWM_MspInit+0xbc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a8a:	4b25      	ldr	r3, [pc, #148]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8e:	4a24      	ldr	r2, [pc, #144]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 8001a90:	f043 0308 	orr.w	r3, r3, #8
 8001a94:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a96:	4b22      	ldr	r3, [pc, #136]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 8001a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	617b      	str	r3, [r7, #20]
 8001aa0:	697b      	ldr	r3, [r7, #20]
}
 8001aa2:	e034      	b.n	8001b0e <HAL_TIM_PWM_MspInit+0x126>
  else if(htim_pwm->Instance==TIM8)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a21      	ldr	r2, [pc, #132]	@ (8001b30 <HAL_TIM_PWM_MspInit+0x148>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d10c      	bne.n	8001ac8 <HAL_TIM_PWM_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001aae:	4b1c      	ldr	r3, [pc, #112]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 8001ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ab2:	4a1b      	ldr	r2, [pc, #108]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 8001ab4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ab8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aba:	4b19      	ldr	r3, [pc, #100]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 8001abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001abe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]
}
 8001ac6:	e022      	b.n	8001b0e <HAL_TIM_PWM_MspInit+0x126>
  else if(htim_pwm->Instance==TIM15)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a19      	ldr	r2, [pc, #100]	@ (8001b34 <HAL_TIM_PWM_MspInit+0x14c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d10c      	bne.n	8001aec <HAL_TIM_PWM_MspInit+0x104>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001ad2:	4b13      	ldr	r3, [pc, #76]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 8001ad4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad6:	4a12      	ldr	r2, [pc, #72]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 8001ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001adc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ade:	4b10      	ldr	r3, [pc, #64]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 8001ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	68fb      	ldr	r3, [r7, #12]
}
 8001aea:	e010      	b.n	8001b0e <HAL_TIM_PWM_MspInit+0x126>
  else if(htim_pwm->Instance==TIM20)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a11      	ldr	r2, [pc, #68]	@ (8001b38 <HAL_TIM_PWM_MspInit+0x150>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d10b      	bne.n	8001b0e <HAL_TIM_PWM_MspInit+0x126>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8001af6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 8001af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001afa:	4a09      	ldr	r2, [pc, #36]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 8001afc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b00:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b02:	4b07      	ldr	r3, [pc, #28]	@ (8001b20 <HAL_TIM_PWM_MspInit+0x138>)
 8001b04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
}
 8001b0e:	bf00      	nop
 8001b10:	372c      	adds	r7, #44	@ 0x2c
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	40012c00 	.word	0x40012c00
 8001b20:	40021000 	.word	0x40021000
 8001b24:	40000400 	.word	0x40000400
 8001b28:	40000800 	.word	0x40000800
 8001b2c:	40000c00 	.word	0x40000c00
 8001b30:	40013400 	.word	0x40013400
 8001b34:	40014000 	.word	0x40014000
 8001b38:	40015000 	.word	0x40015000

08001b3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a2c      	ldr	r2, [pc, #176]	@ (8001bfc <HAL_TIM_Base_MspInit+0xc0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d114      	bne.n	8001b78 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b4e:	4b2c      	ldr	r3, [pc, #176]	@ (8001c00 <HAL_TIM_Base_MspInit+0xc4>)
 8001b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b52:	4a2b      	ldr	r2, [pc, #172]	@ (8001c00 <HAL_TIM_Base_MspInit+0xc4>)
 8001b54:	f043 0310 	orr.w	r3, r3, #16
 8001b58:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b5a:	4b29      	ldr	r3, [pc, #164]	@ (8001c00 <HAL_TIM_Base_MspInit+0xc4>)
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2036      	movs	r0, #54	@ 0x36
 8001b6c:	f000 fc55 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b70:	2036      	movs	r0, #54	@ 0x36
 8001b72:	f000 fc6c 	bl	800244e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001b76:	e03c      	b.n	8001bf2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a21      	ldr	r2, [pc, #132]	@ (8001c04 <HAL_TIM_Base_MspInit+0xc8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d114      	bne.n	8001bac <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001b82:	4b1f      	ldr	r3, [pc, #124]	@ (8001c00 <HAL_TIM_Base_MspInit+0xc4>)
 8001b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b86:	4a1e      	ldr	r2, [pc, #120]	@ (8001c00 <HAL_TIM_Base_MspInit+0xc4>)
 8001b88:	f043 0320 	orr.w	r3, r3, #32
 8001b8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001c00 <HAL_TIM_Base_MspInit+0xc4>)
 8001b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 1, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2101      	movs	r1, #1
 8001b9e:	2037      	movs	r0, #55	@ 0x37
 8001ba0:	f000 fc3b 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001ba4:	2037      	movs	r0, #55	@ 0x37
 8001ba6:	f000 fc52 	bl	800244e <HAL_NVIC_EnableIRQ>
}
 8001baa:	e022      	b.n	8001bf2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a15      	ldr	r2, [pc, #84]	@ (8001c08 <HAL_TIM_Base_MspInit+0xcc>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d10c      	bne.n	8001bd0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001bb6:	4b12      	ldr	r3, [pc, #72]	@ (8001c00 <HAL_TIM_Base_MspInit+0xc4>)
 8001bb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bba:	4a11      	ldr	r2, [pc, #68]	@ (8001c00 <HAL_TIM_Base_MspInit+0xc4>)
 8001bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c00 <HAL_TIM_Base_MspInit+0xc4>)
 8001bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bca:	60fb      	str	r3, [r7, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
}
 8001bce:	e010      	b.n	8001bf2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM17)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001c0c <HAL_TIM_Base_MspInit+0xd0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d10b      	bne.n	8001bf2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001bda:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <HAL_TIM_Base_MspInit+0xc4>)
 8001bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bde:	4a08      	ldr	r2, [pc, #32]	@ (8001c00 <HAL_TIM_Base_MspInit+0xc4>)
 8001be0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001be4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001be6:	4b06      	ldr	r3, [pc, #24]	@ (8001c00 <HAL_TIM_Base_MspInit+0xc4>)
 8001be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001bea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
}
 8001bf2:	bf00      	nop
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40001000 	.word	0x40001000
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40001400 	.word	0x40001400
 8001c08:	40014400 	.word	0x40014400
 8001c0c:	40014800 	.word	0x40014800

08001c10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b092      	sub	sp, #72	@ 0x48
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c18:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	605a      	str	r2, [r3, #4]
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	60da      	str	r2, [r3, #12]
 8001c26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a9a      	ldr	r2, [pc, #616]	@ (8001e98 <HAL_TIM_MspPostInit+0x288>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d11c      	bne.n	8001c6c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c32:	4b9a      	ldr	r3, [pc, #616]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c36:	4a99      	ldr	r2, [pc, #612]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c3e:	4b97      	ldr	r3, [pc, #604]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c62:	4619      	mov	r1, r3
 8001c64:	488e      	ldr	r0, [pc, #568]	@ (8001ea0 <HAL_TIM_MspPostInit+0x290>)
 8001c66:	f000 fccd 	bl	8002604 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8001c6a:	e14c      	b.n	8001f06 <HAL_TIM_MspPostInit+0x2f6>
  else if(htim->Instance==TIM2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c74:	d11d      	bne.n	8001cb2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	4b89      	ldr	r3, [pc, #548]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7a:	4a88      	ldr	r2, [pc, #544]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c82:	4b86      	ldr	r3, [pc, #536]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c8e:	2320      	movs	r3, #32
 8001c90:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c92:	2302      	movs	r3, #2
 8001c94:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cac:	f000 fcaa 	bl	8002604 <HAL_GPIO_Init>
}
 8001cb0:	e129      	b.n	8001f06 <HAL_TIM_MspPostInit+0x2f6>
  else if(htim->Instance==TIM3)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a7b      	ldr	r2, [pc, #492]	@ (8001ea4 <HAL_TIM_MspPostInit+0x294>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d11d      	bne.n	8001cf8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbc:	4b77      	ldr	r3, [pc, #476]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001cbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc0:	4a76      	ldr	r2, [pc, #472]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cc8:	4b74      	ldr	r3, [pc, #464]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001cca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001cd4:	2340      	movs	r3, #64	@ 0x40
 8001cd6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001cec:	4619      	mov	r1, r3
 8001cee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cf2:	f000 fc87 	bl	8002604 <HAL_GPIO_Init>
}
 8001cf6:	e106      	b.n	8001f06 <HAL_TIM_MspPostInit+0x2f6>
  else if(htim->Instance==TIM4)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a6a      	ldr	r2, [pc, #424]	@ (8001ea8 <HAL_TIM_MspPostInit+0x298>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d11c      	bne.n	8001d3c <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d02:	4b66      	ldr	r3, [pc, #408]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d06:	4a65      	ldr	r2, [pc, #404]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d0e:	4b63      	ldr	r3, [pc, #396]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d1a:	2340      	movs	r3, #64	@ 0x40
 8001d1c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d2e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d32:	4619      	mov	r1, r3
 8001d34:	485d      	ldr	r0, [pc, #372]	@ (8001eac <HAL_TIM_MspPostInit+0x29c>)
 8001d36:	f000 fc65 	bl	8002604 <HAL_GPIO_Init>
}
 8001d3a:	e0e4      	b.n	8001f06 <HAL_TIM_MspPostInit+0x2f6>
  else if(htim->Instance==TIM5)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a5b      	ldr	r2, [pc, #364]	@ (8001eb0 <HAL_TIM_MspPostInit+0x2a0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d11d      	bne.n	8001d82 <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	4b55      	ldr	r3, [pc, #340]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001d48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d4a:	4a54      	ldr	r2, [pc, #336]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d52:	4b52      	ldr	r3, [pc, #328]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001d54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	623b      	str	r3, [r7, #32]
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d72:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d76:	4619      	mov	r1, r3
 8001d78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d7c:	f000 fc42 	bl	8002604 <HAL_GPIO_Init>
}
 8001d80:	e0c1      	b.n	8001f06 <HAL_TIM_MspPostInit+0x2f6>
  else if(htim->Instance==TIM8)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a4b      	ldr	r2, [pc, #300]	@ (8001eb4 <HAL_TIM_MspPostInit+0x2a4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d11c      	bne.n	8001dc6 <HAL_TIM_MspPostInit+0x1b6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8c:	4b43      	ldr	r3, [pc, #268]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d90:	4a42      	ldr	r2, [pc, #264]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001d92:	f043 0304 	orr.w	r3, r3, #4
 8001d96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d98:	4b40      	ldr	r3, [pc, #256]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9c:	f003 0304 	and.w	r3, r3, #4
 8001da0:	61fb      	str	r3, [r7, #28]
 8001da2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001da4:	2340      	movs	r3, #64	@ 0x40
 8001da6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db0:	2300      	movs	r3, #0
 8001db2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001db4:	2304      	movs	r3, #4
 8001db6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4838      	ldr	r0, [pc, #224]	@ (8001ea0 <HAL_TIM_MspPostInit+0x290>)
 8001dc0:	f000 fc20 	bl	8002604 <HAL_GPIO_Init>
}
 8001dc4:	e09f      	b.n	8001f06 <HAL_TIM_MspPostInit+0x2f6>
  else if(htim->Instance==TIM15)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a3b      	ldr	r2, [pc, #236]	@ (8001eb8 <HAL_TIM_MspPostInit+0x2a8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d11d      	bne.n	8001e0c <HAL_TIM_MspPostInit+0x1fc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd0:	4b32      	ldr	r3, [pc, #200]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd4:	4a31      	ldr	r2, [pc, #196]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ddc:	4b2f      	ldr	r3, [pc, #188]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	61bb      	str	r3, [r7, #24]
 8001de6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001de8:	2304      	movs	r3, #4
 8001dea:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001df8:	2309      	movs	r3, #9
 8001dfa:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e00:	4619      	mov	r1, r3
 8001e02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e06:	f000 fbfd 	bl	8002604 <HAL_GPIO_Init>
}
 8001e0a:	e07c      	b.n	8001f06 <HAL_TIM_MspPostInit+0x2f6>
  else if(htim->Instance==TIM16)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a2a      	ldr	r2, [pc, #168]	@ (8001ebc <HAL_TIM_MspPostInit+0x2ac>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d11c      	bne.n	8001e50 <HAL_TIM_MspPostInit+0x240>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e16:	4b21      	ldr	r3, [pc, #132]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e1a:	4a20      	ldr	r2, [pc, #128]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001e1c:	f043 0302 	orr.w	r3, r3, #2
 8001e20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e22:	4b1e      	ldr	r3, [pc, #120]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e2e:	2310      	movs	r3, #16
 8001e30:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e42:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e46:	4619      	mov	r1, r3
 8001e48:	4818      	ldr	r0, [pc, #96]	@ (8001eac <HAL_TIM_MspPostInit+0x29c>)
 8001e4a:	f000 fbdb 	bl	8002604 <HAL_GPIO_Init>
}
 8001e4e:	e05a      	b.n	8001f06 <HAL_TIM_MspPostInit+0x2f6>
  else if(htim->Instance==TIM17)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a1a      	ldr	r2, [pc, #104]	@ (8001ec0 <HAL_TIM_MspPostInit+0x2b0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d134      	bne.n	8001ec4 <HAL_TIM_MspPostInit+0x2b4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	4b10      	ldr	r3, [pc, #64]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5e:	4a0f      	ldr	r2, [pc, #60]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e66:	4b0d      	ldr	r3, [pc, #52]	@ (8001e9c <HAL_TIM_MspPostInit+0x28c>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e72:	2380      	movs	r3, #128	@ 0x80
 8001e74:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001e82:	2301      	movs	r3, #1
 8001e84:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e86:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e90:	f000 fbb8 	bl	8002604 <HAL_GPIO_Init>
}
 8001e94:	e037      	b.n	8001f06 <HAL_TIM_MspPostInit+0x2f6>
 8001e96:	bf00      	nop
 8001e98:	40012c00 	.word	0x40012c00
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	48000800 	.word	0x48000800
 8001ea4:	40000400 	.word	0x40000400
 8001ea8:	40000800 	.word	0x40000800
 8001eac:	48000400 	.word	0x48000400
 8001eb0:	40000c00 	.word	0x40000c00
 8001eb4:	40013400 	.word	0x40013400
 8001eb8:	40014000 	.word	0x40014000
 8001ebc:	40014400 	.word	0x40014400
 8001ec0:	40014800 	.word	0x40014800
  else if(htim->Instance==TIM20)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a11      	ldr	r2, [pc, #68]	@ (8001f10 <HAL_TIM_MspPostInit+0x300>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d11b      	bne.n	8001f06 <HAL_TIM_MspPostInit+0x2f6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ece:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <HAL_TIM_MspPostInit+0x304>)
 8001ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed2:	4a10      	ldr	r2, [pc, #64]	@ (8001f14 <HAL_TIM_MspPostInit+0x304>)
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001eda:	4b0e      	ldr	r3, [pc, #56]	@ (8001f14 <HAL_TIM_MspPostInit+0x304>)
 8001edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efa:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001efe:	4619      	mov	r1, r3
 8001f00:	4805      	ldr	r0, [pc, #20]	@ (8001f18 <HAL_TIM_MspPostInit+0x308>)
 8001f02:	f000 fb7f 	bl	8002604 <HAL_GPIO_Init>
}
 8001f06:	bf00      	nop
 8001f08:	3748      	adds	r7, #72	@ 0x48
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40015000 	.word	0x40015000
 8001f14:	40021000 	.word	0x40021000
 8001f18:	48000400 	.word	0x48000400

08001f1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b0a0      	sub	sp, #128	@ 0x80
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f34:	f107 0318 	add.w	r3, r7, #24
 8001f38:	2254      	movs	r2, #84	@ 0x54
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f00b f8b3 	bl	800d0a8 <memset>
  if(huart->Instance==USART1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a31      	ldr	r2, [pc, #196]	@ (800200c <HAL_UART_MspInit+0xf0>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d15b      	bne.n	8002004 <HAL_UART_MspInit+0xe8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f54:	f107 0318 	add.w	r3, r7, #24
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f003 fced 	bl	8005938 <HAL_RCCEx_PeriphCLKConfig>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f64:	f7ff fca0 	bl	80018a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f68:	4b29      	ldr	r3, [pc, #164]	@ (8002010 <HAL_UART_MspInit+0xf4>)
 8001f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f6c:	4a28      	ldr	r2, [pc, #160]	@ (8002010 <HAL_UART_MspInit+0xf4>)
 8001f6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f72:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f74:	4b26      	ldr	r3, [pc, #152]	@ (8002010 <HAL_UART_MspInit+0xf4>)
 8001f76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f80:	4b23      	ldr	r3, [pc, #140]	@ (8002010 <HAL_UART_MspInit+0xf4>)
 8001f82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f84:	4a22      	ldr	r2, [pc, #136]	@ (8002010 <HAL_UART_MspInit+0xf4>)
 8001f86:	f043 0304 	orr.w	r3, r3, #4
 8001f8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f8c:	4b20      	ldr	r3, [pc, #128]	@ (8002010 <HAL_UART_MspInit+0xf4>)
 8001f8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f98:	4b1d      	ldr	r3, [pc, #116]	@ (8002010 <HAL_UART_MspInit+0xf4>)
 8001f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8002010 <HAL_UART_MspInit+0xf4>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8002010 <HAL_UART_MspInit+0xf4>)
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC5     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001fb0:	2320      	movs	r3, #32
 8001fb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fc0:	2307      	movs	r3, #7
 8001fc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4812      	ldr	r0, [pc, #72]	@ (8002014 <HAL_UART_MspInit+0xf8>)
 8001fcc:	f000 fb1a 	bl	8002604 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fd0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001fd4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fe2:	2307      	movs	r3, #7
 8001fe4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001fea:	4619      	mov	r1, r3
 8001fec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ff0:	f000 fb08 	bl	8002604 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2102      	movs	r1, #2
 8001ff8:	2025      	movs	r0, #37	@ 0x25
 8001ffa:	f000 fa0e 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ffe:	2025      	movs	r0, #37	@ 0x25
 8002000:	f000 fa25 	bl	800244e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002004:	bf00      	nop
 8002006:	3780      	adds	r7, #128	@ 0x80
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40013800 	.word	0x40013800
 8002010:	40021000 	.word	0x40021000
 8002014:	48000800 	.word	0x48000800

08002018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <NMI_Handler+0x4>

08002020 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <HardFault_Handler+0x4>

08002028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <MemManage_Handler+0x4>

08002030 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002034:	bf00      	nop
 8002036:	e7fd      	b.n	8002034 <BusFault_Handler+0x4>

08002038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <UsageFault_Handler+0x4>

08002040 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800204e:	b480      	push	{r7}
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800206e:	f000 f8b9 	bl	80021e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
	...

08002078 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800207c:	4802      	ldr	r0, [pc, #8]	@ (8002088 <USB_LP_IRQHandler+0x10>)
 800207e:	f001 fa38 	bl	80034f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20001b48 	.word	0x20001b48

0800208c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002090:	4802      	ldr	r0, [pc, #8]	@ (800209c <USART1_IRQHandler+0x10>)
 8002092:	f005 f957 	bl	8007344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000588 	.word	0x20000588

080020a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80020a4:	4802      	ldr	r0, [pc, #8]	@ (80020b0 <TIM6_DAC_IRQHandler+0x10>)
 80020a6:	f004 f8fd 	bl	80062a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000374 	.word	0x20000374

080020b4 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80020b8:	4802      	ldr	r0, [pc, #8]	@ (80020c4 <TIM7_DAC_IRQHandler+0x10>)
 80020ba:	f004 f8f3 	bl	80062a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200003c0 	.word	0x200003c0

080020c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020cc:	4b06      	ldr	r3, [pc, #24]	@ (80020e8 <SystemInit+0x20>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d2:	4a05      	ldr	r2, [pc, #20]	@ (80020e8 <SystemInit+0x20>)
 80020d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020ec:	480d      	ldr	r0, [pc, #52]	@ (8002124 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020ee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020f0:	f7ff ffea 	bl	80020c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020f4:	480c      	ldr	r0, [pc, #48]	@ (8002128 <LoopForever+0x6>)
  ldr r1, =_edata
 80020f6:	490d      	ldr	r1, [pc, #52]	@ (800212c <LoopForever+0xa>)
  ldr r2, =_sidata
 80020f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002130 <LoopForever+0xe>)
  movs r3, #0
 80020fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80020fc:	e002      	b.n	8002104 <LoopCopyDataInit>

080020fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002102:	3304      	adds	r3, #4

08002104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002108:	d3f9      	bcc.n	80020fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800210a:	4a0a      	ldr	r2, [pc, #40]	@ (8002134 <LoopForever+0x12>)
  ldr r4, =_ebss
 800210c:	4c0a      	ldr	r4, [pc, #40]	@ (8002138 <LoopForever+0x16>)
  movs r3, #0
 800210e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002110:	e001      	b.n	8002116 <LoopFillZerobss>

08002112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002114:	3204      	adds	r2, #4

08002116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002118:	d3fb      	bcc.n	8002112 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800211a:	f00a ffcd 	bl	800d0b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800211e:	f7fe f9f3 	bl	8000508 <main>

08002122 <LoopForever>:

LoopForever:
    b LoopForever
 8002122:	e7fe      	b.n	8002122 <LoopForever>
  ldr   r0, =_estack
 8002124:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800212c:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8002130:	0800d1dc 	.word	0x0800d1dc
  ldr r2, =_sbss
 8002134:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8002138:	20002044 	.word	0x20002044

0800213c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800213c:	e7fe      	b.n	800213c <ADC1_2_IRQHandler>

0800213e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002144:	2300      	movs	r3, #0
 8002146:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002148:	2003      	movs	r0, #3
 800214a:	f000 f95b 	bl	8002404 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800214e:	200f      	movs	r0, #15
 8002150:	f000 f80e 	bl	8002170 <HAL_InitTick>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d002      	beq.n	8002160 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	71fb      	strb	r3, [r7, #7]
 800215e:	e001      	b.n	8002164 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002160:	f7ff fba8 	bl	80018b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002164:	79fb      	ldrb	r3, [r7, #7]

}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800217c:	4b16      	ldr	r3, [pc, #88]	@ (80021d8 <HAL_InitTick+0x68>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d022      	beq.n	80021ca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002184:	4b15      	ldr	r3, [pc, #84]	@ (80021dc <HAL_InitTick+0x6c>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4b13      	ldr	r3, [pc, #76]	@ (80021d8 <HAL_InitTick+0x68>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002190:	fbb1 f3f3 	udiv	r3, r1, r3
 8002194:	fbb2 f3f3 	udiv	r3, r2, r3
 8002198:	4618      	mov	r0, r3
 800219a:	f000 f966 	bl	800246a <HAL_SYSTICK_Config>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d10f      	bne.n	80021c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b0f      	cmp	r3, #15
 80021a8:	d809      	bhi.n	80021be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021aa:	2200      	movs	r2, #0
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	f04f 30ff 	mov.w	r0, #4294967295
 80021b2:	f000 f932 	bl	800241a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021b6:	4a0a      	ldr	r2, [pc, #40]	@ (80021e0 <HAL_InitTick+0x70>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	e007      	b.n	80021ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	73fb      	strb	r3, [r7, #15]
 80021c2:	e004      	b.n	80021ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
 80021c8:	e001      	b.n	80021ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	2000000c 	.word	0x2000000c
 80021dc:	20000004 	.word	0x20000004
 80021e0:	20000008 	.word	0x20000008

080021e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e8:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <HAL_IncTick+0x1c>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b05      	ldr	r3, [pc, #20]	@ (8002204 <HAL_IncTick+0x20>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4413      	add	r3, r2
 80021f2:	4a03      	ldr	r2, [pc, #12]	@ (8002200 <HAL_IncTick+0x1c>)
 80021f4:	6013      	str	r3, [r2, #0]
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	20000670 	.word	0x20000670
 8002204:	2000000c 	.word	0x2000000c

08002208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return uwTick;
 800220c:	4b03      	ldr	r3, [pc, #12]	@ (800221c <HAL_GetTick+0x14>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	20000670 	.word	0x20000670

08002220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002228:	f7ff ffee 	bl	8002208 <HAL_GetTick>
 800222c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002238:	d004      	beq.n	8002244 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800223a:	4b09      	ldr	r3, [pc, #36]	@ (8002260 <HAL_Delay+0x40>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4413      	add	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002244:	bf00      	nop
 8002246:	f7ff ffdf 	bl	8002208 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	429a      	cmp	r2, r3
 8002254:	d8f7      	bhi.n	8002246 <HAL_Delay+0x26>
  {
  }
}
 8002256:	bf00      	nop
 8002258:	bf00      	nop
 800225a:	3710      	adds	r7, #16
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	2000000c 	.word	0x2000000c

08002264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002274:	4b0c      	ldr	r3, [pc, #48]	@ (80022a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227a:	68ba      	ldr	r2, [r7, #8]
 800227c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002280:	4013      	ands	r3, r2
 8002282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800228c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002296:	4a04      	ldr	r2, [pc, #16]	@ (80022a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	60d3      	str	r3, [r2, #12]
}
 800229c:	bf00      	nop
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b0:	4b04      	ldr	r3, [pc, #16]	@ (80022c4 <__NVIC_GetPriorityGrouping+0x18>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	f003 0307 	and.w	r3, r3, #7
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4603      	mov	r3, r0
 80022d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	db0b      	blt.n	80022f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	f003 021f 	and.w	r2, r3, #31
 80022e0:	4907      	ldr	r1, [pc, #28]	@ (8002300 <__NVIC_EnableIRQ+0x38>)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	095b      	lsrs	r3, r3, #5
 80022e8:	2001      	movs	r0, #1
 80022ea:	fa00 f202 	lsl.w	r2, r0, r2
 80022ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000e100 	.word	0xe000e100

08002304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	2b00      	cmp	r3, #0
 8002316:	db0a      	blt.n	800232e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	b2da      	uxtb	r2, r3
 800231c:	490c      	ldr	r1, [pc, #48]	@ (8002350 <__NVIC_SetPriority+0x4c>)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	0112      	lsls	r2, r2, #4
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	440b      	add	r3, r1
 8002328:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800232c:	e00a      	b.n	8002344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4908      	ldr	r1, [pc, #32]	@ (8002354 <__NVIC_SetPriority+0x50>)
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	3b04      	subs	r3, #4
 800233c:	0112      	lsls	r2, r2, #4
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	440b      	add	r3, r1
 8002342:	761a      	strb	r2, [r3, #24]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000e100 	.word	0xe000e100
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002358:	b480      	push	{r7}
 800235a:	b089      	sub	sp, #36	@ 0x24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f1c3 0307 	rsb	r3, r3, #7
 8002372:	2b04      	cmp	r3, #4
 8002374:	bf28      	it	cs
 8002376:	2304      	movcs	r3, #4
 8002378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3304      	adds	r3, #4
 800237e:	2b06      	cmp	r3, #6
 8002380:	d902      	bls.n	8002388 <NVIC_EncodePriority+0x30>
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3b03      	subs	r3, #3
 8002386:	e000      	b.n	800238a <NVIC_EncodePriority+0x32>
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800238c:	f04f 32ff 	mov.w	r2, #4294967295
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43da      	mvns	r2, r3
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	401a      	ands	r2, r3
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a0:	f04f 31ff 	mov.w	r1, #4294967295
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	43d9      	mvns	r1, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b0:	4313      	orrs	r3, r2
         );
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3724      	adds	r7, #36	@ 0x24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023d0:	d301      	bcc.n	80023d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023d2:	2301      	movs	r3, #1
 80023d4:	e00f      	b.n	80023f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002400 <SysTick_Config+0x40>)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023de:	210f      	movs	r1, #15
 80023e0:	f04f 30ff 	mov.w	r0, #4294967295
 80023e4:	f7ff ff8e 	bl	8002304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <SysTick_Config+0x40>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ee:	4b04      	ldr	r3, [pc, #16]	@ (8002400 <SysTick_Config+0x40>)
 80023f0:	2207      	movs	r2, #7
 80023f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	e000e010 	.word	0xe000e010

08002404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff ff29 	bl	8002264 <__NVIC_SetPriorityGrouping>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
 8002426:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002428:	f7ff ff40 	bl	80022ac <__NVIC_GetPriorityGrouping>
 800242c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68b9      	ldr	r1, [r7, #8]
 8002432:	6978      	ldr	r0, [r7, #20]
 8002434:	f7ff ff90 	bl	8002358 <NVIC_EncodePriority>
 8002438:	4602      	mov	r2, r0
 800243a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243e:	4611      	mov	r1, r2
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff5f 	bl	8002304 <__NVIC_SetPriority>
}
 8002446:	bf00      	nop
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	4603      	mov	r3, r0
 8002456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff33 	bl	80022c8 <__NVIC_EnableIRQ>
}
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7ff ffa4 	bl	80023c0 <SysTick_Config>
 8002478:	4603      	mov	r3, r0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002482:	b480      	push	{r7}
 8002484:	b085      	sub	sp, #20
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d005      	beq.n	80024a6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2204      	movs	r2, #4
 800249e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
 80024a4:	e037      	b.n	8002516 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 020e 	bic.w	r2, r2, #14
 80024b4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024c4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0201 	bic.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024da:	f003 021f 	and.w	r2, r3, #31
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e2:	2101      	movs	r1, #1
 80024e4:	fa01 f202 	lsl.w	r2, r1, r2
 80024e8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80024f2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00c      	beq.n	8002516 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002506:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800250a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002514:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002526:	7bfb      	ldrb	r3, [r7, #15]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b02      	cmp	r3, #2
 800254a:	d00d      	beq.n	8002568 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2204      	movs	r2, #4
 8002550:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
 8002566:	e047      	b.n	80025f8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 020e 	bic.w	r2, r2, #14
 8002576:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0201 	bic.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002592:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002596:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259c:	f003 021f 	and.w	r2, r3, #31
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a4:	2101      	movs	r1, #1
 80025a6:	fa01 f202 	lsl.w	r2, r1, r2
 80025aa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80025b4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00c      	beq.n	80025d8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025cc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80025d6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	4798      	blx	r3
    }
  }
  return status;
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002612:	e15a      	b.n	80028ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	2101      	movs	r1, #1
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	fa01 f303 	lsl.w	r3, r1, r3
 8002620:	4013      	ands	r3, r2
 8002622:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 814c 	beq.w	80028c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f003 0303 	and.w	r3, r3, #3
 8002634:	2b01      	cmp	r3, #1
 8002636:	d005      	beq.n	8002644 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002640:	2b02      	cmp	r3, #2
 8002642:	d130      	bne.n	80026a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2203      	movs	r2, #3
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4013      	ands	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800267a:	2201      	movs	r2, #1
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4013      	ands	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	091b      	lsrs	r3, r3, #4
 8002690:	f003 0201 	and.w	r2, r3, #1
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d017      	beq.n	80026e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	2203      	movs	r2, #3
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4013      	ands	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	4313      	orrs	r3, r2
 80026da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d123      	bne.n	8002736 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	08da      	lsrs	r2, r3, #3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3208      	adds	r2, #8
 80026f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	220f      	movs	r2, #15
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4013      	ands	r3, r2
 8002710:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	691a      	ldr	r2, [r3, #16]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	08da      	lsrs	r2, r3, #3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	3208      	adds	r2, #8
 8002730:	6939      	ldr	r1, [r7, #16]
 8002732:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	2203      	movs	r2, #3
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43db      	mvns	r3, r3
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4013      	ands	r3, r2
 800274c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f003 0203 	and.w	r2, r3, #3
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 80a6 	beq.w	80028c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002778:	4b5b      	ldr	r3, [pc, #364]	@ (80028e8 <HAL_GPIO_Init+0x2e4>)
 800277a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800277c:	4a5a      	ldr	r2, [pc, #360]	@ (80028e8 <HAL_GPIO_Init+0x2e4>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6613      	str	r3, [r2, #96]	@ 0x60
 8002784:	4b58      	ldr	r3, [pc, #352]	@ (80028e8 <HAL_GPIO_Init+0x2e4>)
 8002786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	60bb      	str	r3, [r7, #8]
 800278e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002790:	4a56      	ldr	r2, [pc, #344]	@ (80028ec <HAL_GPIO_Init+0x2e8>)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	089b      	lsrs	r3, r3, #2
 8002796:	3302      	adds	r3, #2
 8002798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	220f      	movs	r2, #15
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80027ba:	d01f      	beq.n	80027fc <HAL_GPIO_Init+0x1f8>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a4c      	ldr	r2, [pc, #304]	@ (80028f0 <HAL_GPIO_Init+0x2ec>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d019      	beq.n	80027f8 <HAL_GPIO_Init+0x1f4>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a4b      	ldr	r2, [pc, #300]	@ (80028f4 <HAL_GPIO_Init+0x2f0>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d013      	beq.n	80027f4 <HAL_GPIO_Init+0x1f0>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a4a      	ldr	r2, [pc, #296]	@ (80028f8 <HAL_GPIO_Init+0x2f4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d00d      	beq.n	80027f0 <HAL_GPIO_Init+0x1ec>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a49      	ldr	r2, [pc, #292]	@ (80028fc <HAL_GPIO_Init+0x2f8>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d007      	beq.n	80027ec <HAL_GPIO_Init+0x1e8>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a48      	ldr	r2, [pc, #288]	@ (8002900 <HAL_GPIO_Init+0x2fc>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d101      	bne.n	80027e8 <HAL_GPIO_Init+0x1e4>
 80027e4:	2305      	movs	r3, #5
 80027e6:	e00a      	b.n	80027fe <HAL_GPIO_Init+0x1fa>
 80027e8:	2306      	movs	r3, #6
 80027ea:	e008      	b.n	80027fe <HAL_GPIO_Init+0x1fa>
 80027ec:	2304      	movs	r3, #4
 80027ee:	e006      	b.n	80027fe <HAL_GPIO_Init+0x1fa>
 80027f0:	2303      	movs	r3, #3
 80027f2:	e004      	b.n	80027fe <HAL_GPIO_Init+0x1fa>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e002      	b.n	80027fe <HAL_GPIO_Init+0x1fa>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <HAL_GPIO_Init+0x1fa>
 80027fc:	2300      	movs	r3, #0
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	f002 0203 	and.w	r2, r2, #3
 8002804:	0092      	lsls	r2, r2, #2
 8002806:	4093      	lsls	r3, r2
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800280e:	4937      	ldr	r1, [pc, #220]	@ (80028ec <HAL_GPIO_Init+0x2e8>)
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	089b      	lsrs	r3, r3, #2
 8002814:	3302      	adds	r3, #2
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800281c:	4b39      	ldr	r3, [pc, #228]	@ (8002904 <HAL_GPIO_Init+0x300>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	43db      	mvns	r3, r3
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002838:	693a      	ldr	r2, [r7, #16]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002840:	4a30      	ldr	r2, [pc, #192]	@ (8002904 <HAL_GPIO_Init+0x300>)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002846:	4b2f      	ldr	r3, [pc, #188]	@ (8002904 <HAL_GPIO_Init+0x300>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	43db      	mvns	r3, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4013      	ands	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800286a:	4a26      	ldr	r2, [pc, #152]	@ (8002904 <HAL_GPIO_Init+0x300>)
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002870:	4b24      	ldr	r3, [pc, #144]	@ (8002904 <HAL_GPIO_Init+0x300>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	43db      	mvns	r3, r3
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	4313      	orrs	r3, r2
 8002892:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002894:	4a1b      	ldr	r2, [pc, #108]	@ (8002904 <HAL_GPIO_Init+0x300>)
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800289a:	4b1a      	ldr	r3, [pc, #104]	@ (8002904 <HAL_GPIO_Init+0x300>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	43db      	mvns	r3, r3
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4013      	ands	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028be:	4a11      	ldr	r2, [pc, #68]	@ (8002904 <HAL_GPIO_Init+0x300>)
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	3301      	adds	r3, #1
 80028c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	fa22 f303 	lsr.w	r3, r2, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f47f ae9d 	bne.w	8002614 <HAL_GPIO_Init+0x10>
  }
}
 80028da:	bf00      	nop
 80028dc:	bf00      	nop
 80028de:	371c      	adds	r7, #28
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40010000 	.word	0x40010000
 80028f0:	48000400 	.word	0x48000400
 80028f4:	48000800 	.word	0x48000800
 80028f8:	48000c00 	.word	0x48000c00
 80028fc:	48001000 	.word	0x48001000
 8002900:	48001400 	.word	0x48001400
 8002904:	40010400 	.word	0x40010400

08002908 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	887b      	ldrh	r3, [r7, #2]
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
 8002924:	e001      	b.n	800292a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002926:	2300      	movs	r3, #0
 8002928:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800292a:	7bfb      	ldrb	r3, [r7, #15]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	807b      	strh	r3, [r7, #2]
 8002944:	4613      	mov	r3, r2
 8002946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002948:	787b      	ldrb	r3, [r7, #1]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800294e:	887a      	ldrh	r2, [r7, #2]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002954:	e002      	b.n	800295c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002956:	887a      	ldrh	r2, [r7, #2]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800297a:	887a      	ldrh	r2, [r7, #2]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4013      	ands	r3, r2
 8002980:	041a      	lsls	r2, r3, #16
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	43d9      	mvns	r1, r3
 8002986:	887b      	ldrh	r3, [r7, #2]
 8002988:	400b      	ands	r3, r1
 800298a:	431a      	orrs	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	619a      	str	r2, [r3, #24]
}
 8002990:	bf00      	nop
 8002992:	3714      	adds	r7, #20
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e08d      	b.n	8002aca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7fe ff9a 	bl	80018fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2224      	movs	r2, #36	@ 0x24
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0201 	bic.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d107      	bne.n	8002a16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a12:	609a      	str	r2, [r3, #8]
 8002a14:	e006      	b.n	8002a24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002a22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d108      	bne.n	8002a3e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	685a      	ldr	r2, [r3, #4]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a3a:	605a      	str	r2, [r3, #4]
 8002a3c:	e007      	b.n	8002a4e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	695b      	ldr	r3, [r3, #20]
 8002a7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	69d9      	ldr	r1, [r3, #28]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1a      	ldr	r2, [r3, #32]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	430a      	orrs	r2, r1
 8002a9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0201 	orr.w	r2, r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	4608      	mov	r0, r1
 8002ade:	4611      	mov	r1, r2
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	817b      	strh	r3, [r7, #10]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	813b      	strh	r3, [r7, #8]
 8002aea:	4613      	mov	r3, r2
 8002aec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b20      	cmp	r3, #32
 8002af8:	f040 80fd 	bne.w	8002cf6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <HAL_I2C_Mem_Read+0x34>
 8002b02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d105      	bne.n	8002b14 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b0e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0f1      	b.n	8002cf8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_I2C_Mem_Read+0x4e>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e0ea      	b.n	8002cf8 <HAL_I2C_Mem_Read+0x224>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b2a:	f7ff fb6d 	bl	8002208 <HAL_GetTick>
 8002b2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	2319      	movs	r3, #25
 8002b36:	2201      	movs	r2, #1
 8002b38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f000 f95b 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0d5      	b.n	8002cf8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2222      	movs	r2, #34	@ 0x22
 8002b50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2240      	movs	r2, #64	@ 0x40
 8002b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a3a      	ldr	r2, [r7, #32]
 8002b66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b74:	88f8      	ldrh	r0, [r7, #6]
 8002b76:	893a      	ldrh	r2, [r7, #8]
 8002b78:	8979      	ldrh	r1, [r7, #10]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	9301      	str	r3, [sp, #4]
 8002b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	4603      	mov	r3, r0
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 f8bf 	bl	8002d08 <I2C_RequestMemoryRead>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0ad      	b.n	8002cf8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	2bff      	cmp	r3, #255	@ 0xff
 8002ba4:	d90e      	bls.n	8002bc4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	22ff      	movs	r2, #255	@ 0xff
 8002baa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	8979      	ldrh	r1, [r7, #10]
 8002bb4:	4b52      	ldr	r3, [pc, #328]	@ (8002d00 <HAL_I2C_Mem_Read+0x22c>)
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002bbc:	68f8      	ldr	r0, [r7, #12]
 8002bbe:	f000 fadf 	bl	8003180 <I2C_TransferConfig>
 8002bc2:	e00f      	b.n	8002be4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	8979      	ldrh	r1, [r7, #10]
 8002bd6:	4b4a      	ldr	r3, [pc, #296]	@ (8002d00 <HAL_I2C_Mem_Read+0x22c>)
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 face 	bl	8003180 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	9300      	str	r3, [sp, #0]
 8002be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bea:	2200      	movs	r2, #0
 8002bec:	2104      	movs	r1, #4
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 f902 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e07c      	b.n	8002cf8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d034      	beq.n	8002ca4 <HAL_I2C_Mem_Read+0x1d0>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d130      	bne.n	8002ca4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2180      	movs	r1, #128	@ 0x80
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 f8d3 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e04d      	b.n	8002cf8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2bff      	cmp	r3, #255	@ 0xff
 8002c64:	d90e      	bls.n	8002c84 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	22ff      	movs	r2, #255	@ 0xff
 8002c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	8979      	ldrh	r1, [r7, #10]
 8002c74:	2300      	movs	r3, #0
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 fa7f 	bl	8003180 <I2C_TransferConfig>
 8002c82:	e00f      	b.n	8002ca4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c88:	b29a      	uxth	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	8979      	ldrh	r1, [r7, #10]
 8002c96:	2300      	movs	r3, #0
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 fa6e 	bl	8003180 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d19a      	bne.n	8002be4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f940 	bl	8002f38 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e01a      	b.n	8002cf8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6859      	ldr	r1, [r3, #4]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002d04 <HAL_I2C_Mem_Read+0x230>)
 8002cd6:	400b      	ands	r3, r1
 8002cd8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2220      	movs	r2, #32
 8002cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e000      	b.n	8002cf8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002cf6:	2302      	movs	r3, #2
  }
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	80002400 	.word	0x80002400
 8002d04:	fe00e800 	.word	0xfe00e800

08002d08 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	4608      	mov	r0, r1
 8002d12:	4611      	mov	r1, r2
 8002d14:	461a      	mov	r2, r3
 8002d16:	4603      	mov	r3, r0
 8002d18:	817b      	strh	r3, [r7, #10]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	813b      	strh	r3, [r7, #8]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	8979      	ldrh	r1, [r7, #10]
 8002d28:	4b20      	ldr	r3, [pc, #128]	@ (8002dac <I2C_RequestMemoryRead+0xa4>)
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 fa26 	bl	8003180 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d34:	69fa      	ldr	r2, [r7, #28]
 8002d36:	69b9      	ldr	r1, [r7, #24]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 f8b6 	bl	8002eaa <I2C_WaitOnTXISFlagUntilTimeout>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e02c      	b.n	8002da2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d105      	bne.n	8002d5a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d4e:	893b      	ldrh	r3, [r7, #8]
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d58:	e015      	b.n	8002d86 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d5a:	893b      	ldrh	r3, [r7, #8]
 8002d5c:	0a1b      	lsrs	r3, r3, #8
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d68:	69fa      	ldr	r2, [r7, #28]
 8002d6a:	69b9      	ldr	r1, [r7, #24]
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f89c 	bl	8002eaa <I2C_WaitOnTXISFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e012      	b.n	8002da2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d7c:	893b      	ldrh	r3, [r7, #8]
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2140      	movs	r1, #64	@ 0x40
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f831 	bl	8002df8 <I2C_WaitOnFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e000      	b.n	8002da2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3710      	adds	r7, #16
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	80002000 	.word	0x80002000

08002db0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d103      	bne.n	8002dce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d007      	beq.n	8002dec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699a      	ldr	r2, [r3, #24]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	619a      	str	r2, [r3, #24]
  }
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	4613      	mov	r3, r2
 8002e06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e08:	e03b      	b.n	8002e82 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	6839      	ldr	r1, [r7, #0]
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f8d6 	bl	8002fc0 <I2C_IsErrorOccurred>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e041      	b.n	8002ea2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e24:	d02d      	beq.n	8002e82 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e26:	f7ff f9ef 	bl	8002208 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d302      	bcc.n	8002e3c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d122      	bne.n	8002e82 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	4013      	ands	r3, r2
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	bf0c      	ite	eq
 8002e4c:	2301      	moveq	r3, #1
 8002e4e:	2300      	movne	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	461a      	mov	r2, r3
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d113      	bne.n	8002e82 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5e:	f043 0220 	orr.w	r2, r3, #32
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e00f      	b.n	8002ea2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	699a      	ldr	r2, [r3, #24]
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	bf0c      	ite	eq
 8002e92:	2301      	moveq	r3, #1
 8002e94:	2300      	movne	r3, #0
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	79fb      	ldrb	r3, [r7, #7]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d0b4      	beq.n	8002e0a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002eb6:	e033      	b.n	8002f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	68b9      	ldr	r1, [r7, #8]
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f000 f87f 	bl	8002fc0 <I2C_IsErrorOccurred>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e031      	b.n	8002f30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed2:	d025      	beq.n	8002f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ed4:	f7ff f998 	bl	8002208 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d302      	bcc.n	8002eea <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d11a      	bne.n	8002f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d013      	beq.n	8002f20 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e007      	b.n	8002f30 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d1c4      	bne.n	8002eb8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f44:	e02f      	b.n	8002fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	68b9      	ldr	r1, [r7, #8]
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f838 	bl	8002fc0 <I2C_IsErrorOccurred>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e02d      	b.n	8002fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5a:	f7ff f955 	bl	8002208 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	68ba      	ldr	r2, [r7, #8]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d302      	bcc.n	8002f70 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d11a      	bne.n	8002fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b20      	cmp	r3, #32
 8002f7c:	d013      	beq.n	8002fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f82:	f043 0220 	orr.w	r2, r3, #32
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e007      	b.n	8002fb6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	d1c8      	bne.n	8002f46 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08a      	sub	sp, #40	@ 0x28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d068      	beq.n	80030be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2210      	movs	r2, #16
 8002ff2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ff4:	e049      	b.n	800308a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d045      	beq.n	800308a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ffe:	f7ff f903 	bl	8002208 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	429a      	cmp	r2, r3
 800300c:	d302      	bcc.n	8003014 <I2C_IsErrorOccurred+0x54>
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d13a      	bne.n	800308a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800301e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003026:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003032:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003036:	d121      	bne.n	800307c <I2C_IsErrorOccurred+0xbc>
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800303e:	d01d      	beq.n	800307c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003040:	7cfb      	ldrb	r3, [r7, #19]
 8003042:	2b20      	cmp	r3, #32
 8003044:	d01a      	beq.n	800307c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003054:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003056:	f7ff f8d7 	bl	8002208 <HAL_GetTick>
 800305a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800305c:	e00e      	b.n	800307c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800305e:	f7ff f8d3 	bl	8002208 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b19      	cmp	r3, #25
 800306a:	d907      	bls.n	800307c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800306c:	6a3b      	ldr	r3, [r7, #32]
 800306e:	f043 0320 	orr.w	r3, r3, #32
 8003072:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800307a:	e006      	b.n	800308a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	f003 0320 	and.w	r3, r3, #32
 8003086:	2b20      	cmp	r3, #32
 8003088:	d1e9      	bne.n	800305e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	f003 0320 	and.w	r3, r3, #32
 8003094:	2b20      	cmp	r3, #32
 8003096:	d003      	beq.n	80030a0 <I2C_IsErrorOccurred+0xe0>
 8003098:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0aa      	beq.n	8002ff6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80030a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d103      	bne.n	80030b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2220      	movs	r2, #32
 80030ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	f043 0304 	orr.w	r3, r3, #4
 80030b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00b      	beq.n	80030e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00b      	beq.n	800310a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80030f2:	6a3b      	ldr	r3, [r7, #32]
 80030f4:	f043 0308 	orr.w	r3, r3, #8
 80030f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003102:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00b      	beq.n	800312c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	f043 0302 	orr.w	r3, r3, #2
 800311a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003124:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800312c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003130:	2b00      	cmp	r3, #0
 8003132:	d01c      	beq.n	800316e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f7ff fe3b 	bl	8002db0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6859      	ldr	r1, [r3, #4]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4b0d      	ldr	r3, [pc, #52]	@ (800317c <I2C_IsErrorOccurred+0x1bc>)
 8003146:	400b      	ands	r3, r1
 8003148:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	431a      	orrs	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800316e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003172:	4618      	mov	r0, r3
 8003174:	3728      	adds	r7, #40	@ 0x28
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	fe00e800 	.word	0xfe00e800

08003180 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	607b      	str	r3, [r7, #4]
 800318a:	460b      	mov	r3, r1
 800318c:	817b      	strh	r3, [r7, #10]
 800318e:	4613      	mov	r3, r2
 8003190:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003192:	897b      	ldrh	r3, [r7, #10]
 8003194:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003198:	7a7b      	ldrb	r3, [r7, #9]
 800319a:	041b      	lsls	r3, r3, #16
 800319c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80031ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	0d5b      	lsrs	r3, r3, #21
 80031ba:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80031be:	4b08      	ldr	r3, [pc, #32]	@ (80031e0 <I2C_TransferConfig+0x60>)
 80031c0:	430b      	orrs	r3, r1
 80031c2:	43db      	mvns	r3, r3
 80031c4:	ea02 0103 	and.w	r1, r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80031d2:	bf00      	nop
 80031d4:	371c      	adds	r7, #28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	03ff63ff 	.word	0x03ff63ff

080031e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b20      	cmp	r3, #32
 80031f8:	d138      	bne.n	800326c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003204:	2302      	movs	r3, #2
 8003206:	e032      	b.n	800326e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2224      	movs	r2, #36	@ 0x24
 8003214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f022 0201 	bic.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003236:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6819      	ldr	r1, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003268:	2300      	movs	r3, #0
 800326a:	e000      	b.n	800326e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800326c:	2302      	movs	r3, #2
  }
}
 800326e:	4618      	mov	r0, r3
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800327a:	b480      	push	{r7}
 800327c:	b085      	sub	sp, #20
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
 8003282:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b20      	cmp	r3, #32
 800328e:	d139      	bne.n	8003304 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003296:	2b01      	cmp	r3, #1
 8003298:	d101      	bne.n	800329e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800329a:	2302      	movs	r3, #2
 800329c:	e033      	b.n	8003306 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2224      	movs	r2, #36	@ 0x24
 80032aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0201 	bic.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80032cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	021b      	lsls	r3, r3, #8
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	e000      	b.n	8003306 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003304:	2302      	movs	r3, #2
  }
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0c0      	b.n	80034a6 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d106      	bne.n	800333e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f009 fbb1 	bl	800caa0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2203      	movs	r2, #3
 8003342:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f005 f9f1 	bl	8008732 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003350:	2300      	movs	r3, #0
 8003352:	73fb      	strb	r3, [r7, #15]
 8003354:	e03e      	b.n	80033d4 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003356:	7bfa      	ldrb	r2, [r7, #15]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	440b      	add	r3, r1
 8003364:	3311      	adds	r3, #17
 8003366:	2201      	movs	r2, #1
 8003368:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800336a:	7bfa      	ldrb	r2, [r7, #15]
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	440b      	add	r3, r1
 8003378:	3310      	adds	r3, #16
 800337a:	7bfa      	ldrb	r2, [r7, #15]
 800337c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800337e:	7bfa      	ldrb	r2, [r7, #15]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	440b      	add	r3, r1
 800338c:	3313      	adds	r3, #19
 800338e:	2200      	movs	r2, #0
 8003390:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003392:	7bfa      	ldrb	r2, [r7, #15]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	440b      	add	r3, r1
 80033a0:	3320      	adds	r3, #32
 80033a2:	2200      	movs	r2, #0
 80033a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033a6:	7bfa      	ldrb	r2, [r7, #15]
 80033a8:	6879      	ldr	r1, [r7, #4]
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	440b      	add	r3, r1
 80033b4:	3324      	adds	r3, #36	@ 0x24
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	440b      	add	r3, r1
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033ce:	7bfb      	ldrb	r3, [r7, #15]
 80033d0:	3301      	adds	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	791b      	ldrb	r3, [r3, #4]
 80033d8:	7bfa      	ldrb	r2, [r7, #15]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d3bb      	bcc.n	8003356 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033de:	2300      	movs	r3, #0
 80033e0:	73fb      	strb	r3, [r7, #15]
 80033e2:	e044      	b.n	800346e <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033e4:	7bfa      	ldrb	r2, [r7, #15]
 80033e6:	6879      	ldr	r1, [r7, #4]
 80033e8:	4613      	mov	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	440b      	add	r3, r1
 80033f2:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80033f6:	2200      	movs	r2, #0
 80033f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033fa:	7bfa      	ldrb	r2, [r7, #15]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	00db      	lsls	r3, r3, #3
 8003406:	440b      	add	r3, r1
 8003408:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800340c:	7bfa      	ldrb	r2, [r7, #15]
 800340e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003410:	7bfa      	ldrb	r2, [r7, #15]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	440b      	add	r3, r1
 800341e:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8003422:	2200      	movs	r2, #0
 8003424:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003426:	7bfa      	ldrb	r2, [r7, #15]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	440b      	add	r3, r1
 8003434:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800343c:	7bfa      	ldrb	r2, [r7, #15]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	440b      	add	r3, r1
 800344a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800344e:	2200      	movs	r2, #0
 8003450:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003452:	7bfa      	ldrb	r2, [r7, #15]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	440b      	add	r3, r1
 8003460:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	3301      	adds	r3, #1
 800346c:	73fb      	strb	r3, [r7, #15]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	791b      	ldrb	r3, [r3, #4]
 8003472:	7bfa      	ldrb	r2, [r7, #15]
 8003474:	429a      	cmp	r2, r3
 8003476:	d3b5      	bcc.n	80033e4 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6818      	ldr	r0, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3304      	adds	r3, #4
 8003480:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003484:	f005 f970 	bl	8008768 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	7a9b      	ldrb	r3, [r3, #10]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d102      	bne.n	80034a4 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f001 fc42 	bl	8004d28 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_PCD_Start+0x16>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e012      	b.n	80034ea <HAL_PCD_Start+0x3c>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f005 f917 	bl	8008704 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f007 fbd8 	bl	800ac90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b084      	sub	sp, #16
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f007 fbdd 	bl	800acbe <USB_ReadInterrupts>
 8003504:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 fb06 	bl	8003b22 <PCD_EP_ISR_Handler>

    return;
 8003516:	e110      	b.n	800373a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800351e:	2b00      	cmp	r3, #0
 8003520:	d013      	beq.n	800354a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800352a:	b29a      	uxth	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003534:	b292      	uxth	r2, r2
 8003536:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f009 fb41 	bl	800cbc2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003540:	2100      	movs	r1, #0
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f8fc 	bl	8003740 <HAL_PCD_SetAddress>

    return;
 8003548:	e0f7      	b.n	800373a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00c      	beq.n	800356e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800355c:	b29a      	uxth	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003566:	b292      	uxth	r2, r2
 8003568:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800356c:	e0e5      	b.n	800373a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00c      	beq.n	8003592 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003580:	b29a      	uxth	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800358a:	b292      	uxth	r2, r2
 800358c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003590:	e0d3      	b.n	800373a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d034      	beq.n	8003606 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0204 	bic.w	r2, r2, #4
 80035ae:	b292      	uxth	r2, r2
 80035b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80035bc:	b29a      	uxth	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0208 	bic.w	r2, r2, #8
 80035c6:	b292      	uxth	r2, r2
 80035c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d107      	bne.n	80035e6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80035de:	2100      	movs	r1, #0
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f009 fce1 	bl	800cfa8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f009 fb24 	bl	800cc34 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035fe:	b292      	uxth	r2, r2
 8003600:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003604:	e099      	b.n	800373a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800360c:	2b00      	cmp	r3, #0
 800360e:	d027      	beq.n	8003660 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003618:	b29a      	uxth	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f042 0208 	orr.w	r2, r2, #8
 8003622:	b292      	uxth	r2, r2
 8003624:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003630:	b29a      	uxth	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800363a:	b292      	uxth	r2, r2
 800363c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003648:	b29a      	uxth	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0204 	orr.w	r2, r2, #4
 8003652:	b292      	uxth	r2, r2
 8003654:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f009 fad1 	bl	800cc00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800365e:	e06c      	b.n	800373a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003666:	2b00      	cmp	r3, #0
 8003668:	d040      	beq.n	80036ec <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003672:	b29a      	uxth	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800367c:	b292      	uxth	r2, r2
 800367e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8003688:	2b00      	cmp	r3, #0
 800368a:	d12b      	bne.n	80036e4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003694:	b29a      	uxth	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f042 0204 	orr.w	r2, r2, #4
 800369e:	b292      	uxth	r2, r2
 80036a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0208 	orr.w	r2, r2, #8
 80036b6:	b292      	uxth	r2, r2
 80036b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	089b      	lsrs	r3, r3, #2
 80036d0:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80036da:	2101      	movs	r1, #1
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f009 fc63 	bl	800cfa8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80036e2:	e02a      	b.n	800373a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f009 fa8b 	bl	800cc00 <HAL_PCD_SuspendCallback>
    return;
 80036ea:	e026      	b.n	800373a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00f      	beq.n	8003716 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036fe:	b29a      	uxth	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003708:	b292      	uxth	r2, r2
 800370a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f009 fa49 	bl	800cba6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003714:	e011      	b.n	800373a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00c      	beq.n	800373a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003728:	b29a      	uxth	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003732:	b292      	uxth	r2, r2
 8003734:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003738:	bf00      	nop
  }
}
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	460b      	mov	r3, r1
 800374a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003752:	2b01      	cmp	r3, #1
 8003754:	d101      	bne.n	800375a <HAL_PCD_SetAddress+0x1a>
 8003756:	2302      	movs	r3, #2
 8003758:	e012      	b.n	8003780 <HAL_PCD_SetAddress+0x40>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	78fa      	ldrb	r2, [r7, #3]
 8003766:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	78fa      	ldrb	r2, [r7, #3]
 800376e:	4611      	mov	r1, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f007 fa79 	bl	800ac68 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	4608      	mov	r0, r1
 8003792:	4611      	mov	r1, r2
 8003794:	461a      	mov	r2, r3
 8003796:	4603      	mov	r3, r0
 8003798:	70fb      	strb	r3, [r7, #3]
 800379a:	460b      	mov	r3, r1
 800379c:	803b      	strh	r3, [r7, #0]
 800379e:	4613      	mov	r3, r2
 80037a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80037a2:	2300      	movs	r3, #0
 80037a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	da0e      	bge.n	80037cc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	f003 0207 	and.w	r2, r3, #7
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	3310      	adds	r3, #16
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	4413      	add	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2201      	movs	r2, #1
 80037c8:	705a      	strb	r2, [r3, #1]
 80037ca:	e00e      	b.n	80037ea <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	f003 0207 	and.w	r2, r3, #7
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	4413      	add	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	b2da      	uxtb	r2, r3
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80037f6:	883b      	ldrh	r3, [r7, #0]
 80037f8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	78ba      	ldrb	r2, [r7, #2]
 8003804:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003806:	78bb      	ldrb	r3, [r7, #2]
 8003808:	2b02      	cmp	r3, #2
 800380a:	d102      	bne.n	8003812 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_PCD_EP_Open+0x98>
 800381c:	2302      	movs	r3, #2
 800381e:	e00e      	b.n	800383e <HAL_PCD_EP_Open+0xb6>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68f9      	ldr	r1, [r7, #12]
 800382e:	4618      	mov	r0, r3
 8003830:	f004 ffb8 	bl	80087a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800383c:	7afb      	ldrb	r3, [r7, #11]
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003846:	b580      	push	{r7, lr}
 8003848:	b084      	sub	sp, #16
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	460b      	mov	r3, r1
 8003850:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003852:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003856:	2b00      	cmp	r3, #0
 8003858:	da0e      	bge.n	8003878 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800385a:	78fb      	ldrb	r3, [r7, #3]
 800385c:	f003 0207 	and.w	r2, r3, #7
 8003860:	4613      	mov	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	3310      	adds	r3, #16
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	4413      	add	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2201      	movs	r2, #1
 8003874:	705a      	strb	r2, [r3, #1]
 8003876:	e00e      	b.n	8003896 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	f003 0207 	and.w	r2, r3, #7
 800387e:	4613      	mov	r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	4413      	add	r3, r2
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	4413      	add	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	b2da      	uxtb	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_PCD_EP_Close+0x6a>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e00e      	b.n	80038ce <HAL_PCD_EP_Close+0x88>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68f9      	ldr	r1, [r7, #12]
 80038be:	4618      	mov	r0, r3
 80038c0:	f005 fb34 	bl	8008f2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b086      	sub	sp, #24
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
 80038e2:	460b      	mov	r3, r1
 80038e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038e6:	7afb      	ldrb	r3, [r7, #11]
 80038e8:	f003 0207 	and.w	r2, r3, #7
 80038ec:	4613      	mov	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4413      	add	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2200      	movs	r2, #0
 800390e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2200      	movs	r2, #0
 8003914:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003916:	7afb      	ldrb	r3, [r7, #11]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	b2da      	uxtb	r2, r3
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6979      	ldr	r1, [r7, #20]
 8003928:	4618      	mov	r0, r3
 800392a:	f005 fcec 	bl	8009306 <USB_EPStartXfer>

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003944:	78fb      	ldrb	r3, [r7, #3]
 8003946:	f003 0207 	and.w	r2, r3, #7
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	440b      	add	r3, r1
 8003956:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800395a:	681b      	ldr	r3, [r3, #0]
}
 800395c:	4618      	mov	r0, r3
 800395e:	370c      	adds	r7, #12
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	607a      	str	r2, [r7, #4]
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	460b      	mov	r3, r1
 8003976:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003978:	7afb      	ldrb	r3, [r7, #11]
 800397a:	f003 0207 	and.w	r2, r3, #7
 800397e:	4613      	mov	r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	4413      	add	r3, r2
 8003984:	00db      	lsls	r3, r3, #3
 8003986:	3310      	adds	r3, #16
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	4413      	add	r3, r2
 800398c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2200      	movs	r2, #0
 80039ac:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2201      	movs	r2, #1
 80039b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039b4:	7afb      	ldrb	r3, [r7, #11]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6979      	ldr	r1, [r7, #20]
 80039c6:	4618      	mov	r0, r3
 80039c8:	f005 fc9d 	bl	8009306 <USB_EPStartXfer>

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	460b      	mov	r3, r1
 80039e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	7912      	ldrb	r2, [r2, #4]
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d901      	bls.n	80039f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e03e      	b.n	8003a72 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	da0e      	bge.n	8003a1a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	f003 0207 	and.w	r2, r3, #7
 8003a02:	4613      	mov	r3, r2
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	3310      	adds	r3, #16
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	4413      	add	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	705a      	strb	r2, [r3, #1]
 8003a18:	e00c      	b.n	8003a34 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a1a:	78fa      	ldrb	r2, [r7, #3]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_PCD_EP_SetStall+0x7e>
 8003a50:	2302      	movs	r3, #2
 8003a52:	e00e      	b.n	8003a72 <HAL_PCD_EP_SetStall+0x9c>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	68f9      	ldr	r1, [r7, #12]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f007 f801 	bl	800aa6a <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}

08003a7a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b084      	sub	sp, #16
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
 8003a82:	460b      	mov	r3, r1
 8003a84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	f003 030f 	and.w	r3, r3, #15
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	7912      	ldrb	r2, [r2, #4]
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d901      	bls.n	8003a98 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e040      	b.n	8003b1a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	da0e      	bge.n	8003abe <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aa0:	78fb      	ldrb	r3, [r7, #3]
 8003aa2:	f003 0207 	and.w	r2, r3, #7
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4413      	add	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	3310      	adds	r3, #16
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	705a      	strb	r2, [r3, #1]
 8003abc:	e00e      	b.n	8003adc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003abe:	78fb      	ldrb	r3, [r7, #3]
 8003ac0:	f003 0207 	and.w	r2, r3, #7
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ae2:	78fb      	ldrb	r3, [r7, #3]
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_PCD_EP_ClrStall+0x82>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e00e      	b.n	8003b1a <HAL_PCD_EP_ClrStall+0xa0>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68f9      	ldr	r1, [r7, #12]
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f006 fffe 	bl	800ab0c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b096      	sub	sp, #88	@ 0x58
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b2a:	e3ad      	b.n	8004288 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003b34:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003b38:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8003b46:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f040 816f 	bne.w	8003e2e <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003b50:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d14c      	bne.n	8003bf6 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	881b      	ldrh	r3, [r3, #0]
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b6c:	81fb      	strh	r3, [r7, #14]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	89fb      	ldrh	r3, [r7, #14]
 8003b74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3310      	adds	r3, #16
 8003b84:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	461a      	mov	r2, r3
 8003b92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	00db      	lsls	r3, r3, #3
 8003b98:	4413      	add	r3, r2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6812      	ldr	r2, [r2, #0]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003bae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	441a      	add	r2, r3
 8003bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bba:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f008 ffd7 	bl	800cb72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	7b1b      	ldrb	r3, [r3, #12]
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 835c 	beq.w	8004288 <PCD_EP_ISR_Handler+0x766>
 8003bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f040 8357 	bne.w	8004288 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	7b1b      	ldrb	r3, [r3, #12]
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003be4:	b2da      	uxtb	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	731a      	strb	r2, [r3, #12]
 8003bf4:	e348      	b.n	8004288 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003bfc:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	881b      	ldrh	r3, [r3, #0]
 8003c04:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003c08:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003c0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d032      	beq.n	8003c7a <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	461a      	mov	r2, r3
 8003c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	4413      	add	r3, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c3a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c48:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c4c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	f007 f887 	bl	800ad62 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003c60:	4013      	ands	r3, r2
 8003c62:	823b      	strh	r3, [r7, #16]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	8a3a      	ldrh	r2, [r7, #16]
 8003c6a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c6e:	b292      	uxth	r2, r2
 8003c70:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f008 ff50 	bl	800cb18 <HAL_PCD_SetupStageCallback>
 8003c78:	e306      	b.n	8004288 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003c7a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f280 8302 	bge.w	8004288 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	881b      	ldrh	r3, [r3, #0]
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003c90:	4013      	ands	r3, r2
 8003c92:	83fb      	strh	r3, [r7, #30]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	8bfa      	ldrh	r2, [r7, #30]
 8003c9a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003c9e:	b292      	uxth	r2, r2
 8003ca0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	461a      	mov	r2, r3
 8003cae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cb0:	781b      	ldrb	r3, [r3, #0]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	4413      	add	r3, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6812      	ldr	r2, [r2, #0]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003cc0:	881b      	ldrh	r3, [r3, #0]
 8003cc2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cc8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ccc:	69db      	ldr	r3, [r3, #28]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d019      	beq.n	8003d06 <PCD_EP_ISR_Handler+0x1e4>
 8003cd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d015      	beq.n	8003d06 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce0:	6959      	ldr	r1, [r3, #20]
 8003ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ce8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	f007 f839 	bl	800ad62 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cf2:	695a      	ldr	r2, [r3, #20]
 8003cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	441a      	add	r2, r3
 8003cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cfc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003cfe:	2100      	movs	r1, #0
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f008 ff1b 	bl	800cb3c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003d10:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003d14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f040 82b5 	bne.w	8004288 <PCD_EP_ISR_Handler+0x766>
 8003d1e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003d22:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003d26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003d2a:	f000 82ad 	beq.w	8004288 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	61bb      	str	r3, [r7, #24]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	461a      	mov	r2, r3
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	4413      	add	r3, r2
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d4c:	617b      	str	r3, [r7, #20]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	801a      	strh	r2, [r3, #0]
 8003d5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10a      	bne.n	8003d7c <PCD_EP_ISR_Handler+0x25a>
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d74:	b29a      	uxth	r2, r3
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	801a      	strh	r2, [r3, #0]
 8003d7a:	e039      	b.n	8003df0 <PCD_EP_ISR_Handler+0x2ce>
 8003d7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d82:	d818      	bhi.n	8003db6 <PCD_EP_ISR_Handler+0x294>
 8003d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	085b      	lsrs	r3, r3, #1
 8003d8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <PCD_EP_ISR_Handler+0x27c>
 8003d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d9a:	3301      	adds	r3, #1
 8003d9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	029b      	lsls	r3, r3, #10
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	4313      	orrs	r3, r2
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	801a      	strh	r2, [r3, #0]
 8003db4:	e01c      	b.n	8003df0 <PCD_EP_ISR_Handler+0x2ce>
 8003db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 031f 	and.w	r3, r3, #31
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d102      	bne.n	8003dd0 <PCD_EP_ISR_Handler+0x2ae>
 8003dca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	029b      	lsls	r3, r3, #10
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	4313      	orrs	r3, r2
 8003de0:	b29b      	uxth	r3, r3
 8003de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003dfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e00:	827b      	strh	r3, [r7, #18]
 8003e02:	8a7b      	ldrh	r3, [r7, #18]
 8003e04:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003e08:	827b      	strh	r3, [r7, #18]
 8003e0a:	8a7b      	ldrh	r3, [r7, #18]
 8003e0c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003e10:	827b      	strh	r3, [r7, #18]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	8a7b      	ldrh	r3, [r7, #18]
 8003e18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003e1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003e20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	8013      	strh	r3, [r2, #0]
 8003e2c:	e22c      	b.n	8004288 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	4413      	add	r3, r2
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003e42:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f280 80f6 	bge.w	8004038 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	461a      	mov	r2, r3
 8003e52:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003e62:	4013      	ands	r3, r2
 8003e64:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8003e7a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e7e:	b292      	uxth	r2, r2
 8003e80:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003e82:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003e86:	4613      	mov	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	4413      	add	r3, r2
 8003e96:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e9a:	7b1b      	ldrb	r3, [r3, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d123      	bne.n	8003ee8 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	461a      	mov	r2, r3
 8003eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	4413      	add	r3, r2
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	6812      	ldr	r2, [r2, #0]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ec4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8003ec8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 808e 	beq.w	8003fee <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed8:	6959      	ldr	r1, [r3, #20]
 8003eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003edc:	88da      	ldrh	r2, [r3, #6]
 8003ede:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ee2:	f006 ff3e 	bl	800ad62 <USB_ReadPMA>
 8003ee6:	e082      	b.n	8003fee <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eea:	78db      	ldrb	r3, [r3, #3]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d10a      	bne.n	8003f06 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003ef0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f9d3 	bl	80042a4 <HAL_PCD_EP_DB_Receive>
 8003efe:	4603      	mov	r3, r0
 8003f00:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003f04:	e073      	b.n	8003fee <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	881b      	ldrh	r3, [r3, #0]
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f20:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	441a      	add	r2, r3
 8003f32:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003f36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f42:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d022      	beq.n	8003faa <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	461a      	mov	r2, r3
 8003f70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4413      	add	r3, r2
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003f82:	881b      	ldrh	r3, [r3, #0]
 8003f84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f88:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003f8c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d02c      	beq.n	8003fee <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6818      	ldr	r0, [r3, #0]
 8003f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f9a:	6959      	ldr	r1, [r3, #20]
 8003f9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f9e:	891a      	ldrh	r2, [r3, #8]
 8003fa0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003fa4:	f006 fedd 	bl	800ad62 <USB_ReadPMA>
 8003fa8:	e021      	b.n	8003fee <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	4413      	add	r3, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6812      	ldr	r2, [r2, #0]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003fc8:	881b      	ldrh	r3, [r3, #0]
 8003fca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fce:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003fd2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6818      	ldr	r0, [r3, #0]
 8003fde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe0:	6959      	ldr	r1, [r3, #20]
 8003fe2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe4:	895a      	ldrh	r2, [r3, #10]
 8003fe6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003fea:	f006 feba 	bl	800ad62 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ff0:	69da      	ldr	r2, [r3, #28]
 8003ff2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003ff6:	441a      	add	r2, r3
 8003ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ffa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003ffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ffe:	695a      	ldr	r2, [r3, #20]
 8004000:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004004:	441a      	add	r2, r3
 8004006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004008:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800400a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d005      	beq.n	800401e <PCD_EP_ISR_Handler+0x4fc>
 8004012:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	429a      	cmp	r2, r3
 800401c:	d206      	bcs.n	800402c <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800401e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	4619      	mov	r1, r3
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f008 fd89 	bl	800cb3c <HAL_PCD_DataOutStageCallback>
 800402a:	e005      	b.n	8004038 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004032:	4618      	mov	r0, r3
 8004034:	f005 f967 	bl	8009306 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004038:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800403c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 8121 	beq.w	8004288 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8004046:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	3310      	adds	r3, #16
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	4413      	add	r3, r2
 8004058:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4413      	add	r3, r2
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	b29b      	uxth	r3, r3
 800406c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8004070:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004074:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	441a      	add	r2, r3
 8004086:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800408a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800408e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004092:	b29b      	uxth	r3, r3
 8004094:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004098:	78db      	ldrb	r3, [r3, #3]
 800409a:	2b01      	cmp	r3, #1
 800409c:	f040 80a2 	bne.w	80041e4 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80040a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a2:	2200      	movs	r2, #0
 80040a4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80040a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040a8:	7b1b      	ldrb	r3, [r3, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 8093 	beq.w	80041d6 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80040b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80040b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d046      	beq.n	800414a <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040be:	785b      	ldrb	r3, [r3, #1]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d126      	bne.n	8004112 <PCD_EP_ISR_Handler+0x5f0>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	461a      	mov	r2, r3
 80040d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d8:	4413      	add	r3, r2
 80040da:	627b      	str	r3, [r7, #36]	@ 0x24
 80040dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	00da      	lsls	r2, r3, #3
 80040e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e4:	4413      	add	r3, r2
 80040e6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80040ea:	623b      	str	r3, [r7, #32]
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	881b      	ldrh	r3, [r3, #0]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	801a      	strh	r2, [r3, #0]
 80040fc:	6a3b      	ldr	r3, [r7, #32]
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	b29b      	uxth	r3, r3
 8004102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800410a:	b29a      	uxth	r2, r3
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	801a      	strh	r2, [r3, #0]
 8004110:	e061      	b.n	80041d6 <PCD_EP_ISR_Handler+0x6b4>
 8004112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004114:	785b      	ldrb	r3, [r3, #1]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d15d      	bne.n	80041d6 <PCD_EP_ISR_Handler+0x6b4>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004128:	b29b      	uxth	r3, r3
 800412a:	461a      	mov	r2, r3
 800412c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800412e:	4413      	add	r3, r2
 8004130:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	00da      	lsls	r2, r3, #3
 8004138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800413a:	4413      	add	r3, r2
 800413c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004140:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004144:	2200      	movs	r2, #0
 8004146:	801a      	strh	r2, [r3, #0]
 8004148:	e045      	b.n	80041d6 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004152:	785b      	ldrb	r3, [r3, #1]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d126      	bne.n	80041a6 <PCD_EP_ISR_Handler+0x684>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	637b      	str	r3, [r7, #52]	@ 0x34
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004166:	b29b      	uxth	r3, r3
 8004168:	461a      	mov	r2, r3
 800416a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800416c:	4413      	add	r3, r2
 800416e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	00da      	lsls	r2, r3, #3
 8004176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004178:	4413      	add	r3, r2
 800417a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800417e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004182:	881b      	ldrh	r3, [r3, #0]
 8004184:	b29b      	uxth	r3, r3
 8004186:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800418a:	b29a      	uxth	r2, r3
 800418c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800418e:	801a      	strh	r2, [r3, #0]
 8004190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	b29b      	uxth	r3, r3
 8004196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800419a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800419e:	b29a      	uxth	r2, r3
 80041a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a2:	801a      	strh	r2, [r3, #0]
 80041a4:	e017      	b.n	80041d6 <PCD_EP_ISR_Handler+0x6b4>
 80041a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a8:	785b      	ldrb	r3, [r3, #1]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d113      	bne.n	80041d6 <PCD_EP_ISR_Handler+0x6b4>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	461a      	mov	r2, r3
 80041ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041bc:	4413      	add	r3, r2
 80041be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	00da      	lsls	r2, r3, #3
 80041c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c8:	4413      	add	r3, r2
 80041ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80041ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d2:	2200      	movs	r2, #0
 80041d4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	4619      	mov	r1, r3
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f008 fcc8 	bl	800cb72 <HAL_PCD_DataInStageCallback>
 80041e2:	e051      	b.n	8004288 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80041e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80041e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d144      	bne.n	800427a <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	00db      	lsls	r3, r3, #3
 8004202:	4413      	add	r3, r2
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6812      	ldr	r2, [r2, #0]
 8004208:	4413      	add	r3, r2
 800420a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004214:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800421a:	699a      	ldr	r2, [r3, #24]
 800421c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004220:	429a      	cmp	r2, r3
 8004222:	d907      	bls.n	8004234 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8004224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004226:	699a      	ldr	r2, [r3, #24]
 8004228:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800422c:	1ad2      	subs	r2, r2, r3
 800422e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004230:	619a      	str	r2, [r3, #24]
 8004232:	e002      	b.n	800423a <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8004234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004236:	2200      	movs	r2, #0
 8004238:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800423a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d106      	bne.n	8004250 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004244:	781b      	ldrb	r3, [r3, #0]
 8004246:	4619      	mov	r1, r3
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f008 fc92 	bl	800cb72 <HAL_PCD_DataInStageCallback>
 800424e:	e01b      	b.n	8004288 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004252:	695a      	ldr	r2, [r3, #20]
 8004254:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004258:	441a      	add	r2, r3
 800425a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800425c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800425e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004260:	69da      	ldr	r2, [r3, #28]
 8004262:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004266:	441a      	add	r2, r3
 8004268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800426a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004272:	4618      	mov	r0, r3
 8004274:	f005 f847 	bl	8009306 <USB_EPStartXfer>
 8004278:	e006      	b.n	8004288 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800427a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800427e:	461a      	mov	r2, r3
 8004280:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f917 	bl	80044b6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004290:	b29b      	uxth	r3, r3
 8004292:	b21b      	sxth	r3, r3
 8004294:	2b00      	cmp	r3, #0
 8004296:	f6ff ac49 	blt.w	8003b2c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3758      	adds	r7, #88	@ 0x58
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	4613      	mov	r3, r2
 80042b0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80042b2:	88fb      	ldrh	r3, [r7, #6]
 80042b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d07c      	beq.n	80043b6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	461a      	mov	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	4413      	add	r3, r2
 80042d0:	68fa      	ldr	r2, [r7, #12]
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	4413      	add	r3, r2
 80042d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042e0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	699a      	ldr	r2, [r3, #24]
 80042e6:	8b7b      	ldrh	r3, [r7, #26]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d306      	bcc.n	80042fa <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	699a      	ldr	r2, [r3, #24]
 80042f0:	8b7b      	ldrh	r3, [r7, #26]
 80042f2:	1ad2      	subs	r2, r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	619a      	str	r2, [r3, #24]
 80042f8:	e002      	b.n	8004300 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	2200      	movs	r2, #0
 80042fe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d123      	bne.n	8004350 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	461a      	mov	r2, r3
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	4413      	add	r3, r2
 8004316:	881b      	ldrh	r3, [r3, #0]
 8004318:	b29b      	uxth	r3, r3
 800431a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800431e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004322:	833b      	strh	r3, [r7, #24]
 8004324:	8b3b      	ldrh	r3, [r7, #24]
 8004326:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800432a:	833b      	strh	r3, [r7, #24]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	441a      	add	r2, r3
 800433a:	8b3b      	ldrh	r3, [r7, #24]
 800433c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004340:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004344:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004348:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800434c:	b29b      	uxth	r3, r3
 800434e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004350:	88fb      	ldrh	r3, [r7, #6]
 8004352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004356:	2b00      	cmp	r3, #0
 8004358:	d01f      	beq.n	800439a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	461a      	mov	r2, r3
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	b29b      	uxth	r3, r3
 800436c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004370:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004374:	82fb      	strh	r3, [r7, #22]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	441a      	add	r2, r3
 8004384:	8afb      	ldrh	r3, [r7, #22]
 8004386:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800438a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800438e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004392:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004396:	b29b      	uxth	r3, r3
 8004398:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800439a:	8b7b      	ldrh	r3, [r7, #26]
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 8085 	beq.w	80044ac <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	6959      	ldr	r1, [r3, #20]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	891a      	ldrh	r2, [r3, #8]
 80043ae:	8b7b      	ldrh	r3, [r7, #26]
 80043b0:	f006 fcd7 	bl	800ad62 <USB_ReadPMA>
 80043b4:	e07a      	b.n	80044ac <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043be:	b29b      	uxth	r3, r3
 80043c0:	461a      	mov	r2, r3
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	4413      	add	r3, r2
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	4413      	add	r3, r2
 80043d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043da:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	699a      	ldr	r2, [r3, #24]
 80043e0:	8b7b      	ldrh	r3, [r7, #26]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d306      	bcc.n	80043f4 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	8b7b      	ldrh	r3, [r7, #26]
 80043ec:	1ad2      	subs	r2, r2, r3
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	619a      	str	r2, [r3, #24]
 80043f2:	e002      	b.n	80043fa <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2200      	movs	r2, #0
 80043f8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d123      	bne.n	800444a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	461a      	mov	r2, r3
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	881b      	ldrh	r3, [r3, #0]
 8004412:	b29b      	uxth	r3, r3
 8004414:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004418:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800441c:	83fb      	strh	r3, [r7, #30]
 800441e:	8bfb      	ldrh	r3, [r7, #30]
 8004420:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004424:	83fb      	strh	r3, [r7, #30]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	461a      	mov	r2, r3
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	441a      	add	r2, r3
 8004434:	8bfb      	ldrh	r3, [r7, #30]
 8004436:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800443a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800443e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004442:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004446:	b29b      	uxth	r3, r3
 8004448:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004450:	2b00      	cmp	r3, #0
 8004452:	d11f      	bne.n	8004494 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	b29b      	uxth	r3, r3
 8004466:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800446a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800446e:	83bb      	strh	r3, [r7, #28]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	461a      	mov	r2, r3
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	441a      	add	r2, r3
 800447e:	8bbb      	ldrh	r3, [r7, #28]
 8004480:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004484:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004488:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800448c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004490:	b29b      	uxth	r3, r3
 8004492:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004494:	8b7b      	ldrh	r3, [r7, #26]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d008      	beq.n	80044ac <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6818      	ldr	r0, [r3, #0]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	6959      	ldr	r1, [r3, #20]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	895a      	ldrh	r2, [r3, #10]
 80044a6:	8b7b      	ldrh	r3, [r7, #26]
 80044a8:	f006 fc5b 	bl	800ad62 <USB_ReadPMA>
    }
  }

  return count;
 80044ac:	8b7b      	ldrh	r3, [r7, #26]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3720      	adds	r7, #32
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b0a4      	sub	sp, #144	@ 0x90
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	4613      	mov	r3, r2
 80044c2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80044c4:	88fb      	ldrh	r3, [r7, #6]
 80044c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 81db 	beq.w	8004886 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044d8:	b29b      	uxth	r3, r3
 80044da:	461a      	mov	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	4413      	add	r3, r2
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	6812      	ldr	r2, [r2, #0]
 80044e8:	4413      	add	r3, r2
 80044ea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80044ee:	881b      	ldrh	r3, [r3, #0]
 80044f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044f4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	699a      	ldr	r2, [r3, #24]
 80044fc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004500:	429a      	cmp	r2, r3
 8004502:	d907      	bls.n	8004514 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	699a      	ldr	r2, [r3, #24]
 8004508:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800450c:	1ad2      	subs	r2, r2, r3
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	619a      	str	r2, [r3, #24]
 8004512:	e002      	b.n	800451a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2200      	movs	r2, #0
 8004518:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	2b00      	cmp	r3, #0
 8004520:	f040 80b9 	bne.w	8004696 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	785b      	ldrb	r3, [r3, #1]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d126      	bne.n	800457a <HAL_PCD_EP_DB_Transmit+0xc4>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800453a:	b29b      	uxth	r3, r3
 800453c:	461a      	mov	r2, r3
 800453e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004540:	4413      	add	r3, r2
 8004542:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	00da      	lsls	r2, r3, #3
 800454a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800454c:	4413      	add	r3, r2
 800454e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004552:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004556:	881b      	ldrh	r3, [r3, #0]
 8004558:	b29b      	uxth	r3, r3
 800455a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800455e:	b29a      	uxth	r2, r3
 8004560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004562:	801a      	strh	r2, [r3, #0]
 8004564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004566:	881b      	ldrh	r3, [r3, #0]
 8004568:	b29b      	uxth	r3, r3
 800456a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800456e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004572:	b29a      	uxth	r2, r3
 8004574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004576:	801a      	strh	r2, [r3, #0]
 8004578:	e01a      	b.n	80045b0 <HAL_PCD_EP_DB_Transmit+0xfa>
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	785b      	ldrb	r3, [r3, #1]
 800457e:	2b01      	cmp	r3, #1
 8004580:	d116      	bne.n	80045b0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	637b      	str	r3, [r7, #52]	@ 0x34
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004590:	b29b      	uxth	r3, r3
 8004592:	461a      	mov	r2, r3
 8004594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004596:	4413      	add	r3, r2
 8004598:	637b      	str	r3, [r7, #52]	@ 0x34
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	00da      	lsls	r2, r3, #3
 80045a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045a2:	4413      	add	r3, r2
 80045a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80045a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80045aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ac:	2200      	movs	r2, #0
 80045ae:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	785b      	ldrb	r3, [r3, #1]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d126      	bne.n	800460c <HAL_PCD_EP_DB_Transmit+0x156>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	61fb      	str	r3, [r7, #28]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	461a      	mov	r2, r3
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	4413      	add	r3, r2
 80045d4:	61fb      	str	r3, [r7, #28]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	00da      	lsls	r2, r3, #3
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	4413      	add	r3, r2
 80045e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80045e4:	61bb      	str	r3, [r7, #24]
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	801a      	strh	r2, [r3, #0]
 80045f6:	69bb      	ldr	r3, [r7, #24]
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004600:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004604:	b29a      	uxth	r2, r3
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	801a      	strh	r2, [r3, #0]
 800460a:	e017      	b.n	800463c <HAL_PCD_EP_DB_Transmit+0x186>
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	785b      	ldrb	r3, [r3, #1]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d113      	bne.n	800463c <HAL_PCD_EP_DB_Transmit+0x186>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800461c:	b29b      	uxth	r3, r3
 800461e:	461a      	mov	r2, r3
 8004620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004622:	4413      	add	r3, r2
 8004624:	627b      	str	r3, [r7, #36]	@ 0x24
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	00da      	lsls	r2, r3, #3
 800462c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462e:	4413      	add	r3, r2
 8004630:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004634:	623b      	str	r3, [r7, #32]
 8004636:	6a3b      	ldr	r3, [r7, #32]
 8004638:	2200      	movs	r2, #0
 800463a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	4619      	mov	r1, r3
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f008 fa95 	bl	800cb72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004648:	88fb      	ldrh	r3, [r7, #6]
 800464a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 82fa 	beq.w	8004c48 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	461a      	mov	r2, r3
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	b29b      	uxth	r3, r3
 8004666:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800466a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800466e:	82fb      	strh	r3, [r7, #22]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	461a      	mov	r2, r3
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	441a      	add	r2, r3
 800467e:	8afb      	ldrh	r3, [r7, #22]
 8004680:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004684:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004688:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800468c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004690:	b29b      	uxth	r3, r3
 8004692:	8013      	strh	r3, [r2, #0]
 8004694:	e2d8      	b.n	8004c48 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004696:	88fb      	ldrh	r3, [r7, #6]
 8004698:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d021      	beq.n	80046e4 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	461a      	mov	r2, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046ba:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	461a      	mov	r2, r3
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	441a      	add	r2, r3
 80046cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80046d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80046dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	f040 82ac 	bne.w	8004c48 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	695a      	ldr	r2, [r3, #20]
 80046f4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80046f8:	441a      	add	r2, r3
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	69da      	ldr	r2, [r3, #28]
 8004702:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004706:	441a      	add	r2, r3
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	6a1a      	ldr	r2, [r3, #32]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	429a      	cmp	r2, r3
 8004716:	d30b      	bcc.n	8004730 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	6a1a      	ldr	r2, [r3, #32]
 8004724:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004728:	1ad2      	subs	r2, r2, r3
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	621a      	str	r2, [r3, #32]
 800472e:	e017      	b.n	8004760 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	6a1b      	ldr	r3, [r3, #32]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d108      	bne.n	800474a <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004738:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800473c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004748:	e00a      	b.n	8004760 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2200      	movs	r2, #0
 800475e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	785b      	ldrb	r3, [r3, #1]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d165      	bne.n	8004834 <HAL_PCD_EP_DB_Transmit+0x37e>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004776:	b29b      	uxth	r3, r3
 8004778:	461a      	mov	r2, r3
 800477a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800477c:	4413      	add	r3, r2
 800477e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	00da      	lsls	r2, r3, #3
 8004786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004788:	4413      	add	r3, r2
 800478a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800478e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	b29b      	uxth	r3, r3
 8004796:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800479a:	b29a      	uxth	r2, r3
 800479c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479e:	801a      	strh	r2, [r3, #0]
 80047a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10a      	bne.n	80047be <HAL_PCD_EP_DB_Transmit+0x308>
 80047a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047ba:	801a      	strh	r2, [r3, #0]
 80047bc:	e057      	b.n	800486e <HAL_PCD_EP_DB_Transmit+0x3b8>
 80047be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80047c4:	d818      	bhi.n	80047f8 <HAL_PCD_EP_DB_Transmit+0x342>
 80047c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047ca:	085b      	lsrs	r3, r3, #1
 80047cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_PCD_EP_DB_Transmit+0x32a>
 80047da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047dc:	3301      	adds	r3, #1
 80047de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	029b      	lsls	r3, r3, #10
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	4313      	orrs	r3, r2
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047f4:	801a      	strh	r2, [r3, #0]
 80047f6:	e03a      	b.n	800486e <HAL_PCD_EP_DB_Transmit+0x3b8>
 80047f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80047fc:	095b      	lsrs	r3, r3, #5
 80047fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004800:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004804:	f003 031f 	and.w	r3, r3, #31
 8004808:	2b00      	cmp	r3, #0
 800480a:	d102      	bne.n	8004812 <HAL_PCD_EP_DB_Transmit+0x35c>
 800480c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800480e:	3b01      	subs	r3, #1
 8004810:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004814:	881b      	ldrh	r3, [r3, #0]
 8004816:	b29a      	uxth	r2, r3
 8004818:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800481a:	b29b      	uxth	r3, r3
 800481c:	029b      	lsls	r3, r3, #10
 800481e:	b29b      	uxth	r3, r3
 8004820:	4313      	orrs	r3, r2
 8004822:	b29b      	uxth	r3, r3
 8004824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800482c:	b29a      	uxth	r2, r3
 800482e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004830:	801a      	strh	r2, [r3, #0]
 8004832:	e01c      	b.n	800486e <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	785b      	ldrb	r3, [r3, #1]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d118      	bne.n	800486e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	647b      	str	r3, [r7, #68]	@ 0x44
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800484a:	b29b      	uxth	r3, r3
 800484c:	461a      	mov	r2, r3
 800484e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004850:	4413      	add	r3, r2
 8004852:	647b      	str	r3, [r7, #68]	@ 0x44
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	00da      	lsls	r2, r3, #3
 800485a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800485c:	4413      	add	r3, r2
 800485e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004862:	643b      	str	r3, [r7, #64]	@ 0x40
 8004864:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004868:	b29a      	uxth	r2, r3
 800486a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800486c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	6959      	ldr	r1, [r3, #20]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	891a      	ldrh	r2, [r3, #8]
 800487a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800487e:	b29b      	uxth	r3, r3
 8004880:	f006 fa2d 	bl	800acde <USB_WritePMA>
 8004884:	e1e0      	b.n	8004c48 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800488e:	b29b      	uxth	r3, r3
 8004890:	461a      	mov	r2, r3
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	4413      	add	r3, r2
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	4413      	add	r3, r2
 80048a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048aa:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	699a      	ldr	r2, [r3, #24]
 80048b2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d307      	bcc.n	80048ca <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	699a      	ldr	r2, [r3, #24]
 80048be:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80048c2:	1ad2      	subs	r2, r2, r3
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	619a      	str	r2, [r3, #24]
 80048c8:	e002      	b.n	80048d0 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2200      	movs	r2, #0
 80048ce:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f040 80c0 	bne.w	8004a5a <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	785b      	ldrb	r3, [r3, #1]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d126      	bne.n	8004930 <HAL_PCD_EP_DB_Transmit+0x47a>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	461a      	mov	r2, r3
 80048f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048f6:	4413      	add	r3, r2
 80048f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	00da      	lsls	r2, r3, #3
 8004900:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004902:	4413      	add	r3, r2
 8004904:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8004908:	67bb      	str	r3, [r7, #120]	@ 0x78
 800490a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800490c:	881b      	ldrh	r3, [r3, #0]
 800490e:	b29b      	uxth	r3, r3
 8004910:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004914:	b29a      	uxth	r2, r3
 8004916:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004918:	801a      	strh	r2, [r3, #0]
 800491a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800491c:	881b      	ldrh	r3, [r3, #0]
 800491e:	b29b      	uxth	r3, r3
 8004920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004928:	b29a      	uxth	r2, r3
 800492a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800492c:	801a      	strh	r2, [r3, #0]
 800492e:	e01a      	b.n	8004966 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	785b      	ldrb	r3, [r3, #1]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d116      	bne.n	8004966 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	667b      	str	r3, [r7, #100]	@ 0x64
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004946:	b29b      	uxth	r3, r3
 8004948:	461a      	mov	r2, r3
 800494a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800494c:	4413      	add	r3, r2
 800494e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	00da      	lsls	r2, r3, #3
 8004956:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004958:	4413      	add	r3, r2
 800495a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800495e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004960:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004962:	2200      	movs	r2, #0
 8004964:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	677b      	str	r3, [r7, #116]	@ 0x74
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	785b      	ldrb	r3, [r3, #1]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d12b      	bne.n	80049cc <HAL_PCD_EP_DB_Transmit+0x516>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004982:	b29b      	uxth	r3, r3
 8004984:	461a      	mov	r2, r3
 8004986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004988:	4413      	add	r3, r2
 800498a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	00da      	lsls	r2, r3, #3
 8004992:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004994:	4413      	add	r3, r2
 8004996:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800499a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800499e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80049b0:	801a      	strh	r2, [r3, #0]
 80049b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80049b6:	881b      	ldrh	r3, [r3, #0]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80049c8:	801a      	strh	r2, [r3, #0]
 80049ca:	e017      	b.n	80049fc <HAL_PCD_EP_DB_Transmit+0x546>
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	785b      	ldrb	r3, [r3, #1]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d113      	bne.n	80049fc <HAL_PCD_EP_DB_Transmit+0x546>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80049dc:	b29b      	uxth	r3, r3
 80049de:	461a      	mov	r2, r3
 80049e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049e2:	4413      	add	r3, r2
 80049e4:	677b      	str	r3, [r7, #116]	@ 0x74
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	00da      	lsls	r2, r3, #3
 80049ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049ee:	4413      	add	r3, r2
 80049f0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80049f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80049f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80049f8:	2200      	movs	r2, #0
 80049fa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	4619      	mov	r1, r3
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f008 f8b5 	bl	800cb72 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a08:	88fb      	ldrh	r3, [r7, #6]
 8004a0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f040 811a 	bne.w	8004c48 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a2e:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	441a      	add	r2, r3
 8004a40:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8004a44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a4c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	8013      	strh	r3, [r2, #0]
 8004a58:	e0f6      	b.n	8004c48 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004a5a:	88fb      	ldrh	r3, [r7, #6]
 8004a5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d121      	bne.n	8004aa8 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	881b      	ldrh	r3, [r3, #0]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a7e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	461a      	mov	r2, r3
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	441a      	add	r2, r3
 8004a90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004a94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004a98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004aa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	f040 80ca 	bne.w	8004c48 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	695a      	ldr	r2, [r3, #20]
 8004ab8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004abc:	441a      	add	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	69da      	ldr	r2, [r3, #28]
 8004ac6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004aca:	441a      	add	r2, r3
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	6a1a      	ldr	r2, [r3, #32]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d30b      	bcc.n	8004af4 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	6a1a      	ldr	r2, [r3, #32]
 8004ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004aec:	1ad2      	subs	r2, r2, r3
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	621a      	str	r2, [r3, #32]
 8004af2:	e017      	b.n	8004b24 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d108      	bne.n	8004b0e <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004afc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004b00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004b0c:	e00a      	b.n	8004b24 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	657b      	str	r3, [r7, #84]	@ 0x54
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	785b      	ldrb	r3, [r3, #1]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d165      	bne.n	8004bfe <HAL_PCD_EP_DB_Transmit+0x748>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	461a      	mov	r2, r3
 8004b44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b46:	4413      	add	r3, r2
 8004b48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	00da      	lsls	r2, r3, #3
 8004b50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b52:	4413      	add	r3, r2
 8004b54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004b58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b5c:	881b      	ldrh	r3, [r3, #0]
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b68:	801a      	strh	r2, [r3, #0]
 8004b6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d10a      	bne.n	8004b88 <HAL_PCD_EP_DB_Transmit+0x6d2>
 8004b72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b84:	801a      	strh	r2, [r3, #0]
 8004b86:	e054      	b.n	8004c32 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004b88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b8c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004b8e:	d818      	bhi.n	8004bc2 <HAL_PCD_EP_DB_Transmit+0x70c>
 8004b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b94:	085b      	lsrs	r3, r3, #1
 8004b96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <HAL_PCD_EP_DB_Transmit+0x6f4>
 8004ba4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004baa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	029b      	lsls	r3, r3, #10
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bbe:	801a      	strh	r2, [r3, #0]
 8004bc0:	e037      	b.n	8004c32 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004bc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bc6:	095b      	lsrs	r3, r3, #5
 8004bc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004bce:	f003 031f 	and.w	r3, r3, #31
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d102      	bne.n	8004bdc <HAL_PCD_EP_DB_Transmit+0x726>
 8004bd6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004bdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bde:	881b      	ldrh	r3, [r3, #0]
 8004be0:	b29a      	uxth	r2, r3
 8004be2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	029b      	lsls	r3, r3, #10
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	4313      	orrs	r3, r2
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004bf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004bfa:	801a      	strh	r2, [r3, #0]
 8004bfc:	e019      	b.n	8004c32 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	785b      	ldrb	r3, [r3, #1]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d115      	bne.n	8004c32 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	461a      	mov	r2, r3
 8004c12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c14:	4413      	add	r3, r2
 8004c16:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	00da      	lsls	r2, r3, #3
 8004c1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c20:	4413      	add	r3, r2
 8004c22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8004c26:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c30:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6818      	ldr	r0, [r3, #0]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	6959      	ldr	r1, [r3, #20]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	895a      	ldrh	r2, [r3, #10]
 8004c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	f006 f84b 	bl	800acde <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c62:	82bb      	strh	r3, [r7, #20]
 8004c64:	8abb      	ldrh	r3, [r7, #20]
 8004c66:	f083 0310 	eor.w	r3, r3, #16
 8004c6a:	82bb      	strh	r3, [r7, #20]
 8004c6c:	8abb      	ldrh	r3, [r7, #20]
 8004c6e:	f083 0320 	eor.w	r3, r3, #32
 8004c72:	82bb      	strh	r3, [r7, #20]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	441a      	add	r2, r3
 8004c82:	8abb      	ldrh	r3, [r7, #20]
 8004c84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004c88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004c8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3790      	adds	r7, #144	@ 0x90
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b087      	sub	sp, #28
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	607b      	str	r3, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	817b      	strh	r3, [r7, #10]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004cb4:	897b      	ldrh	r3, [r7, #10]
 8004cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00b      	beq.n	8004cd8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cc0:	897b      	ldrh	r3, [r7, #10]
 8004cc2:	f003 0207 	and.w	r2, r3, #7
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	3310      	adds	r3, #16
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	e009      	b.n	8004cec <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004cd8:	897a      	ldrh	r2, [r7, #10]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4413      	add	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004cec:	893b      	ldrh	r3, [r7, #8]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d107      	bne.n	8004d02 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	80da      	strh	r2, [r3, #6]
 8004d00:	e00b      	b.n	8004d1a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	2201      	movs	r2, #1
 8004d06:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	0c1b      	lsrs	r3, r3, #16
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	371c      	adds	r7, #28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	f043 0301 	orr.w	r3, r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	f043 0302 	orr.w	r3, r3, #2
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d141      	bne.n	8004e0e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d8a:	4b4b      	ldr	r3, [pc, #300]	@ (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d96:	d131      	bne.n	8004dfc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d98:	4b47      	ldr	r3, [pc, #284]	@ (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d9e:	4a46      	ldr	r2, [pc, #280]	@ (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004da4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004da8:	4b43      	ldr	r3, [pc, #268]	@ (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004db0:	4a41      	ldr	r2, [pc, #260]	@ (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004db6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004db8:	4b40      	ldr	r3, [pc, #256]	@ (8004ebc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2232      	movs	r2, #50	@ 0x32
 8004dbe:	fb02 f303 	mul.w	r3, r2, r3
 8004dc2:	4a3f      	ldr	r2, [pc, #252]	@ (8004ec0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc8:	0c9b      	lsrs	r3, r3, #18
 8004dca:	3301      	adds	r3, #1
 8004dcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dce:	e002      	b.n	8004dd6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dd6:	4b38      	ldr	r3, [pc, #224]	@ (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004de2:	d102      	bne.n	8004dea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f2      	bne.n	8004dd0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dea:	4b33      	ldr	r3, [pc, #204]	@ (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004df6:	d158      	bne.n	8004eaa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e057      	b.n	8004eac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dfc:	4b2e      	ldr	r3, [pc, #184]	@ (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e02:	4a2d      	ldr	r2, [pc, #180]	@ (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e0c:	e04d      	b.n	8004eaa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e14:	d141      	bne.n	8004e9a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e16:	4b28      	ldr	r3, [pc, #160]	@ (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e22:	d131      	bne.n	8004e88 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e24:	4b24      	ldr	r3, [pc, #144]	@ (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e2a:	4a23      	ldr	r2, [pc, #140]	@ (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e34:	4b20      	ldr	r3, [pc, #128]	@ (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e3c:	4a1e      	ldr	r2, [pc, #120]	@ (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e42:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e44:	4b1d      	ldr	r3, [pc, #116]	@ (8004ebc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2232      	movs	r2, #50	@ 0x32
 8004e4a:	fb02 f303 	mul.w	r3, r2, r3
 8004e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8004ec0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e50:	fba2 2303 	umull	r2, r3, r2, r3
 8004e54:	0c9b      	lsrs	r3, r3, #18
 8004e56:	3301      	adds	r3, #1
 8004e58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e5a:	e002      	b.n	8004e62 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e62:	4b15      	ldr	r3, [pc, #84]	@ (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e6e:	d102      	bne.n	8004e76 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f2      	bne.n	8004e5c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e76:	4b10      	ldr	r3, [pc, #64]	@ (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e82:	d112      	bne.n	8004eaa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e011      	b.n	8004eac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e88:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e98:	e007      	b.n	8004eaa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e9a:	4b07      	ldr	r3, [pc, #28]	@ (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ea2:	4a05      	ldr	r2, [pc, #20]	@ (8004eb8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004ea8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	40007000 	.word	0x40007000
 8004ebc:	20000004 	.word	0x20000004
 8004ec0:	431bde83 	.word	0x431bde83

08004ec4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004ec8:	4b05      	ldr	r3, [pc, #20]	@ (8004ee0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	4a04      	ldr	r2, [pc, #16]	@ (8004ee0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ece:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ed2:	6093      	str	r3, [r2, #8]
}
 8004ed4:	bf00      	nop
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	40007000 	.word	0x40007000

08004ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b088      	sub	sp, #32
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e2fe      	b.n	80054f4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d075      	beq.n	8004fee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f02:	4b97      	ldr	r3, [pc, #604]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 030c 	and.w	r3, r3, #12
 8004f0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f0c:	4b94      	ldr	r3, [pc, #592]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	f003 0303 	and.w	r3, r3, #3
 8004f14:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b0c      	cmp	r3, #12
 8004f1a:	d102      	bne.n	8004f22 <HAL_RCC_OscConfig+0x3e>
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2b03      	cmp	r3, #3
 8004f20:	d002      	beq.n	8004f28 <HAL_RCC_OscConfig+0x44>
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d10b      	bne.n	8004f40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f28:	4b8d      	ldr	r3, [pc, #564]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d05b      	beq.n	8004fec <HAL_RCC_OscConfig+0x108>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d157      	bne.n	8004fec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e2d9      	b.n	80054f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f48:	d106      	bne.n	8004f58 <HAL_RCC_OscConfig+0x74>
 8004f4a:	4b85      	ldr	r3, [pc, #532]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a84      	ldr	r2, [pc, #528]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 8004f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f54:	6013      	str	r3, [r2, #0]
 8004f56:	e01d      	b.n	8004f94 <HAL_RCC_OscConfig+0xb0>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f60:	d10c      	bne.n	8004f7c <HAL_RCC_OscConfig+0x98>
 8004f62:	4b7f      	ldr	r3, [pc, #508]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a7e      	ldr	r2, [pc, #504]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 8004f68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	4b7c      	ldr	r3, [pc, #496]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a7b      	ldr	r2, [pc, #492]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 8004f74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	e00b      	b.n	8004f94 <HAL_RCC_OscConfig+0xb0>
 8004f7c:	4b78      	ldr	r3, [pc, #480]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a77      	ldr	r2, [pc, #476]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 8004f82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f86:	6013      	str	r3, [r2, #0]
 8004f88:	4b75      	ldr	r3, [pc, #468]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a74      	ldr	r2, [pc, #464]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 8004f8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d013      	beq.n	8004fc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9c:	f7fd f934 	bl	8002208 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fa4:	f7fd f930 	bl	8002208 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b64      	cmp	r3, #100	@ 0x64
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e29e      	b.n	80054f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fb6:	4b6a      	ldr	r3, [pc, #424]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0f0      	beq.n	8004fa4 <HAL_RCC_OscConfig+0xc0>
 8004fc2:	e014      	b.n	8004fee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc4:	f7fd f920 	bl	8002208 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fcc:	f7fd f91c 	bl	8002208 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b64      	cmp	r3, #100	@ 0x64
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e28a      	b.n	80054f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fde:	4b60      	ldr	r3, [pc, #384]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f0      	bne.n	8004fcc <HAL_RCC_OscConfig+0xe8>
 8004fea:	e000      	b.n	8004fee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d075      	beq.n	80050e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ffa:	4b59      	ldr	r3, [pc, #356]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 030c 	and.w	r3, r3, #12
 8005002:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005004:	4b56      	ldr	r3, [pc, #344]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f003 0303 	and.w	r3, r3, #3
 800500c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	2b0c      	cmp	r3, #12
 8005012:	d102      	bne.n	800501a <HAL_RCC_OscConfig+0x136>
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d002      	beq.n	8005020 <HAL_RCC_OscConfig+0x13c>
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	2b04      	cmp	r3, #4
 800501e:	d11f      	bne.n	8005060 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005020:	4b4f      	ldr	r3, [pc, #316]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005028:	2b00      	cmp	r3, #0
 800502a:	d005      	beq.n	8005038 <HAL_RCC_OscConfig+0x154>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e25d      	b.n	80054f4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005038:	4b49      	ldr	r3, [pc, #292]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	061b      	lsls	r3, r3, #24
 8005046:	4946      	ldr	r1, [pc, #280]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 8005048:	4313      	orrs	r3, r2
 800504a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800504c:	4b45      	ldr	r3, [pc, #276]	@ (8005164 <HAL_RCC_OscConfig+0x280>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4618      	mov	r0, r3
 8005052:	f7fd f88d 	bl	8002170 <HAL_InitTick>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d043      	beq.n	80050e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e249      	b.n	80054f4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d023      	beq.n	80050b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005068:	4b3d      	ldr	r3, [pc, #244]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a3c      	ldr	r2, [pc, #240]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 800506e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005074:	f7fd f8c8 	bl	8002208 <HAL_GetTick>
 8005078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800507c:	f7fd f8c4 	bl	8002208 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e232      	b.n	80054f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800508e:	4b34      	ldr	r3, [pc, #208]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0f0      	beq.n	800507c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800509a:	4b31      	ldr	r3, [pc, #196]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	061b      	lsls	r3, r3, #24
 80050a8:	492d      	ldr	r1, [pc, #180]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	604b      	str	r3, [r1, #4]
 80050ae:	e01a      	b.n	80050e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050b0:	4b2b      	ldr	r3, [pc, #172]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a2a      	ldr	r2, [pc, #168]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 80050b6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050bc:	f7fd f8a4 	bl	8002208 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050c4:	f7fd f8a0 	bl	8002208 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e20e      	b.n	80054f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050d6:	4b22      	ldr	r3, [pc, #136]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1f0      	bne.n	80050c4 <HAL_RCC_OscConfig+0x1e0>
 80050e2:	e000      	b.n	80050e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d041      	beq.n	8005176 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d01c      	beq.n	8005134 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050fa:	4b19      	ldr	r3, [pc, #100]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 80050fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005100:	4a17      	ldr	r2, [pc, #92]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 8005102:	f043 0301 	orr.w	r3, r3, #1
 8005106:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800510a:	f7fd f87d 	bl	8002208 <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005112:	f7fd f879 	bl	8002208 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e1e7      	b.n	80054f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005124:	4b0e      	ldr	r3, [pc, #56]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 8005126:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d0ef      	beq.n	8005112 <HAL_RCC_OscConfig+0x22e>
 8005132:	e020      	b.n	8005176 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005134:	4b0a      	ldr	r3, [pc, #40]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 8005136:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800513a:	4a09      	ldr	r2, [pc, #36]	@ (8005160 <HAL_RCC_OscConfig+0x27c>)
 800513c:	f023 0301 	bic.w	r3, r3, #1
 8005140:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005144:	f7fd f860 	bl	8002208 <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800514a:	e00d      	b.n	8005168 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800514c:	f7fd f85c 	bl	8002208 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d906      	bls.n	8005168 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e1ca      	b.n	80054f4 <HAL_RCC_OscConfig+0x610>
 800515e:	bf00      	nop
 8005160:	40021000 	.word	0x40021000
 8005164:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005168:	4b8c      	ldr	r3, [pc, #560]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 800516a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1ea      	bne.n	800514c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0304 	and.w	r3, r3, #4
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 80a6 	beq.w	80052d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005184:	2300      	movs	r3, #0
 8005186:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005188:	4b84      	ldr	r3, [pc, #528]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 800518a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800518c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_RCC_OscConfig+0x2b4>
 8005194:	2301      	movs	r3, #1
 8005196:	e000      	b.n	800519a <HAL_RCC_OscConfig+0x2b6>
 8005198:	2300      	movs	r3, #0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00d      	beq.n	80051ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800519e:	4b7f      	ldr	r3, [pc, #508]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 80051a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051a2:	4a7e      	ldr	r2, [pc, #504]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 80051a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80051aa:	4b7c      	ldr	r3, [pc, #496]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 80051ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051b2:	60fb      	str	r3, [r7, #12]
 80051b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80051b6:	2301      	movs	r3, #1
 80051b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051ba:	4b79      	ldr	r3, [pc, #484]	@ (80053a0 <HAL_RCC_OscConfig+0x4bc>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d118      	bne.n	80051f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051c6:	4b76      	ldr	r3, [pc, #472]	@ (80053a0 <HAL_RCC_OscConfig+0x4bc>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a75      	ldr	r2, [pc, #468]	@ (80053a0 <HAL_RCC_OscConfig+0x4bc>)
 80051cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051d2:	f7fd f819 	bl	8002208 <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051da:	f7fd f815 	bl	8002208 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e183      	b.n	80054f4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051ec:	4b6c      	ldr	r3, [pc, #432]	@ (80053a0 <HAL_RCC_OscConfig+0x4bc>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f0      	beq.n	80051da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d108      	bne.n	8005212 <HAL_RCC_OscConfig+0x32e>
 8005200:	4b66      	ldr	r3, [pc, #408]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 8005202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005206:	4a65      	ldr	r2, [pc, #404]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 8005208:	f043 0301 	orr.w	r3, r3, #1
 800520c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005210:	e024      	b.n	800525c <HAL_RCC_OscConfig+0x378>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	2b05      	cmp	r3, #5
 8005218:	d110      	bne.n	800523c <HAL_RCC_OscConfig+0x358>
 800521a:	4b60      	ldr	r3, [pc, #384]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 800521c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005220:	4a5e      	ldr	r2, [pc, #376]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 8005222:	f043 0304 	orr.w	r3, r3, #4
 8005226:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800522a:	4b5c      	ldr	r3, [pc, #368]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 800522c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005230:	4a5a      	ldr	r2, [pc, #360]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 8005232:	f043 0301 	orr.w	r3, r3, #1
 8005236:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800523a:	e00f      	b.n	800525c <HAL_RCC_OscConfig+0x378>
 800523c:	4b57      	ldr	r3, [pc, #348]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 800523e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005242:	4a56      	ldr	r2, [pc, #344]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 8005244:	f023 0301 	bic.w	r3, r3, #1
 8005248:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800524c:	4b53      	ldr	r3, [pc, #332]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 800524e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005252:	4a52      	ldr	r2, [pc, #328]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 8005254:	f023 0304 	bic.w	r3, r3, #4
 8005258:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d016      	beq.n	8005292 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005264:	f7fc ffd0 	bl	8002208 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800526a:	e00a      	b.n	8005282 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800526c:	f7fc ffcc 	bl	8002208 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800527a:	4293      	cmp	r3, r2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e138      	b.n	80054f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005282:	4b46      	ldr	r3, [pc, #280]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 8005284:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0ed      	beq.n	800526c <HAL_RCC_OscConfig+0x388>
 8005290:	e015      	b.n	80052be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005292:	f7fc ffb9 	bl	8002208 <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005298:	e00a      	b.n	80052b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800529a:	f7fc ffb5 	bl	8002208 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e121      	b.n	80054f4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052b0:	4b3a      	ldr	r3, [pc, #232]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 80052b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1ed      	bne.n	800529a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052be:	7ffb      	ldrb	r3, [r7, #31]
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d105      	bne.n	80052d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052c4:	4b35      	ldr	r3, [pc, #212]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 80052c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052c8:	4a34      	ldr	r2, [pc, #208]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 80052ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0320 	and.w	r3, r3, #32
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d03c      	beq.n	8005356 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	699b      	ldr	r3, [r3, #24]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d01c      	beq.n	800531e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052e4:	4b2d      	ldr	r3, [pc, #180]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 80052e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052ea:	4a2c      	ldr	r2, [pc, #176]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 80052ec:	f043 0301 	orr.w	r3, r3, #1
 80052f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f4:	f7fc ff88 	bl	8002208 <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052fc:	f7fc ff84 	bl	8002208 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e0f2      	b.n	80054f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800530e:	4b23      	ldr	r3, [pc, #140]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 8005310:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b00      	cmp	r3, #0
 800531a:	d0ef      	beq.n	80052fc <HAL_RCC_OscConfig+0x418>
 800531c:	e01b      	b.n	8005356 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800531e:	4b1f      	ldr	r3, [pc, #124]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 8005320:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005324:	4a1d      	ldr	r2, [pc, #116]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 8005326:	f023 0301 	bic.w	r3, r3, #1
 800532a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532e:	f7fc ff6b 	bl	8002208 <HAL_GetTick>
 8005332:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005334:	e008      	b.n	8005348 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005336:	f7fc ff67 	bl	8002208 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d901      	bls.n	8005348 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e0d5      	b.n	80054f4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005348:	4b14      	ldr	r3, [pc, #80]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 800534a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1ef      	bne.n	8005336 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 80c9 	beq.w	80054f2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005360:	4b0e      	ldr	r3, [pc, #56]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 030c 	and.w	r3, r3, #12
 8005368:	2b0c      	cmp	r3, #12
 800536a:	f000 8083 	beq.w	8005474 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	69db      	ldr	r3, [r3, #28]
 8005372:	2b02      	cmp	r3, #2
 8005374:	d15e      	bne.n	8005434 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005376:	4b09      	ldr	r3, [pc, #36]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a08      	ldr	r2, [pc, #32]	@ (800539c <HAL_RCC_OscConfig+0x4b8>)
 800537c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005382:	f7fc ff41 	bl	8002208 <HAL_GetTick>
 8005386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005388:	e00c      	b.n	80053a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800538a:	f7fc ff3d 	bl	8002208 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d905      	bls.n	80053a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e0ab      	b.n	80054f4 <HAL_RCC_OscConfig+0x610>
 800539c:	40021000 	.word	0x40021000
 80053a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053a4:	4b55      	ldr	r3, [pc, #340]	@ (80054fc <HAL_RCC_OscConfig+0x618>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1ec      	bne.n	800538a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053b0:	4b52      	ldr	r3, [pc, #328]	@ (80054fc <HAL_RCC_OscConfig+0x618>)
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	4b52      	ldr	r3, [pc, #328]	@ (8005500 <HAL_RCC_OscConfig+0x61c>)
 80053b6:	4013      	ands	r3, r2
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6a11      	ldr	r1, [r2, #32]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053c0:	3a01      	subs	r2, #1
 80053c2:	0112      	lsls	r2, r2, #4
 80053c4:	4311      	orrs	r1, r2
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80053ca:	0212      	lsls	r2, r2, #8
 80053cc:	4311      	orrs	r1, r2
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80053d2:	0852      	lsrs	r2, r2, #1
 80053d4:	3a01      	subs	r2, #1
 80053d6:	0552      	lsls	r2, r2, #21
 80053d8:	4311      	orrs	r1, r2
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80053de:	0852      	lsrs	r2, r2, #1
 80053e0:	3a01      	subs	r2, #1
 80053e2:	0652      	lsls	r2, r2, #25
 80053e4:	4311      	orrs	r1, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80053ea:	06d2      	lsls	r2, r2, #27
 80053ec:	430a      	orrs	r2, r1
 80053ee:	4943      	ldr	r1, [pc, #268]	@ (80054fc <HAL_RCC_OscConfig+0x618>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053f4:	4b41      	ldr	r3, [pc, #260]	@ (80054fc <HAL_RCC_OscConfig+0x618>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a40      	ldr	r2, [pc, #256]	@ (80054fc <HAL_RCC_OscConfig+0x618>)
 80053fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005400:	4b3e      	ldr	r3, [pc, #248]	@ (80054fc <HAL_RCC_OscConfig+0x618>)
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	4a3d      	ldr	r2, [pc, #244]	@ (80054fc <HAL_RCC_OscConfig+0x618>)
 8005406:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800540a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540c:	f7fc fefc 	bl	8002208 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005414:	f7fc fef8 	bl	8002208 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e066      	b.n	80054f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005426:	4b35      	ldr	r3, [pc, #212]	@ (80054fc <HAL_RCC_OscConfig+0x618>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f0      	beq.n	8005414 <HAL_RCC_OscConfig+0x530>
 8005432:	e05e      	b.n	80054f2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005434:	4b31      	ldr	r3, [pc, #196]	@ (80054fc <HAL_RCC_OscConfig+0x618>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a30      	ldr	r2, [pc, #192]	@ (80054fc <HAL_RCC_OscConfig+0x618>)
 800543a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800543e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005440:	f7fc fee2 	bl	8002208 <HAL_GetTick>
 8005444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005448:	f7fc fede 	bl	8002208 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b02      	cmp	r3, #2
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e04c      	b.n	80054f4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800545a:	4b28      	ldr	r3, [pc, #160]	@ (80054fc <HAL_RCC_OscConfig+0x618>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1f0      	bne.n	8005448 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005466:	4b25      	ldr	r3, [pc, #148]	@ (80054fc <HAL_RCC_OscConfig+0x618>)
 8005468:	68da      	ldr	r2, [r3, #12]
 800546a:	4924      	ldr	r1, [pc, #144]	@ (80054fc <HAL_RCC_OscConfig+0x618>)
 800546c:	4b25      	ldr	r3, [pc, #148]	@ (8005504 <HAL_RCC_OscConfig+0x620>)
 800546e:	4013      	ands	r3, r2
 8005470:	60cb      	str	r3, [r1, #12]
 8005472:	e03e      	b.n	80054f2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d101      	bne.n	8005480 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e039      	b.n	80054f4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005480:	4b1e      	ldr	r3, [pc, #120]	@ (80054fc <HAL_RCC_OscConfig+0x618>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f003 0203 	and.w	r2, r3, #3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a1b      	ldr	r3, [r3, #32]
 8005490:	429a      	cmp	r2, r3
 8005492:	d12c      	bne.n	80054ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549e:	3b01      	subs	r3, #1
 80054a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d123      	bne.n	80054ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d11b      	bne.n	80054ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d113      	bne.n	80054ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054d0:	085b      	lsrs	r3, r3, #1
 80054d2:	3b01      	subs	r3, #1
 80054d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d109      	bne.n	80054ee <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054e4:	085b      	lsrs	r3, r3, #1
 80054e6:	3b01      	subs	r3, #1
 80054e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d001      	beq.n	80054f2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e000      	b.n	80054f4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80054f2:	2300      	movs	r3, #0
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3720      	adds	r7, #32
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	40021000 	.word	0x40021000
 8005500:	019f800c 	.word	0x019f800c
 8005504:	feeefffc 	.word	0xfeeefffc

08005508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005512:	2300      	movs	r3, #0
 8005514:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e11e      	b.n	800575e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005520:	4b91      	ldr	r3, [pc, #580]	@ (8005768 <HAL_RCC_ClockConfig+0x260>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 030f 	and.w	r3, r3, #15
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	429a      	cmp	r2, r3
 800552c:	d910      	bls.n	8005550 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552e:	4b8e      	ldr	r3, [pc, #568]	@ (8005768 <HAL_RCC_ClockConfig+0x260>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f023 020f 	bic.w	r2, r3, #15
 8005536:	498c      	ldr	r1, [pc, #560]	@ (8005768 <HAL_RCC_ClockConfig+0x260>)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	4313      	orrs	r3, r2
 800553c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800553e:	4b8a      	ldr	r3, [pc, #552]	@ (8005768 <HAL_RCC_ClockConfig+0x260>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	429a      	cmp	r2, r3
 800554a:	d001      	beq.n	8005550 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e106      	b.n	800575e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d073      	beq.n	8005644 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b03      	cmp	r3, #3
 8005562:	d129      	bne.n	80055b8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005564:	4b81      	ldr	r3, [pc, #516]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e0f4      	b.n	800575e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005574:	f000 f99c 	bl	80058b0 <RCC_GetSysClockFreqFromPLLSource>
 8005578:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	4a7c      	ldr	r2, [pc, #496]	@ (8005770 <HAL_RCC_ClockConfig+0x268>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d93f      	bls.n	8005602 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005582:	4b7a      	ldr	r3, [pc, #488]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d009      	beq.n	80055a2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005596:	2b00      	cmp	r3, #0
 8005598:	d033      	beq.n	8005602 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d12f      	bne.n	8005602 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055a2:	4b72      	ldr	r3, [pc, #456]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055aa:	4a70      	ldr	r2, [pc, #448]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 80055ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055b0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80055b2:	2380      	movs	r3, #128	@ 0x80
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	e024      	b.n	8005602 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d107      	bne.n	80055d0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055c0:	4b6a      	ldr	r3, [pc, #424]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d109      	bne.n	80055e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e0c6      	b.n	800575e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055d0:	4b66      	ldr	r3, [pc, #408]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e0be      	b.n	800575e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80055e0:	f000 f8ce 	bl	8005780 <HAL_RCC_GetSysClockFreq>
 80055e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	4a61      	ldr	r2, [pc, #388]	@ (8005770 <HAL_RCC_ClockConfig+0x268>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d909      	bls.n	8005602 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055ee:	4b5f      	ldr	r3, [pc, #380]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055f6:	4a5d      	ldr	r2, [pc, #372]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 80055f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055fc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80055fe:	2380      	movs	r3, #128	@ 0x80
 8005600:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005602:	4b5a      	ldr	r3, [pc, #360]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f023 0203 	bic.w	r2, r3, #3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	4957      	ldr	r1, [pc, #348]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 8005610:	4313      	orrs	r3, r2
 8005612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005614:	f7fc fdf8 	bl	8002208 <HAL_GetTick>
 8005618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800561a:	e00a      	b.n	8005632 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800561c:	f7fc fdf4 	bl	8002208 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800562a:	4293      	cmp	r3, r2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e095      	b.n	800575e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005632:	4b4e      	ldr	r3, [pc, #312]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f003 020c 	and.w	r2, r3, #12
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	429a      	cmp	r2, r3
 8005642:	d1eb      	bne.n	800561c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d023      	beq.n	8005698 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0304 	and.w	r3, r3, #4
 8005658:	2b00      	cmp	r3, #0
 800565a:	d005      	beq.n	8005668 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800565c:	4b43      	ldr	r3, [pc, #268]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	4a42      	ldr	r2, [pc, #264]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 8005662:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005666:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0308 	and.w	r3, r3, #8
 8005670:	2b00      	cmp	r3, #0
 8005672:	d007      	beq.n	8005684 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005674:	4b3d      	ldr	r3, [pc, #244]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800567c:	4a3b      	ldr	r2, [pc, #236]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 800567e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005682:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005684:	4b39      	ldr	r3, [pc, #228]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	4936      	ldr	r1, [pc, #216]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 8005692:	4313      	orrs	r3, r2
 8005694:	608b      	str	r3, [r1, #8]
 8005696:	e008      	b.n	80056aa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2b80      	cmp	r3, #128	@ 0x80
 800569c:	d105      	bne.n	80056aa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800569e:	4b33      	ldr	r3, [pc, #204]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	4a32      	ldr	r2, [pc, #200]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 80056a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056a8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005768 <HAL_RCC_ClockConfig+0x260>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 030f 	and.w	r3, r3, #15
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d21d      	bcs.n	80056f4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056b8:	4b2b      	ldr	r3, [pc, #172]	@ (8005768 <HAL_RCC_ClockConfig+0x260>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f023 020f 	bic.w	r2, r3, #15
 80056c0:	4929      	ldr	r1, [pc, #164]	@ (8005768 <HAL_RCC_ClockConfig+0x260>)
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80056c8:	f7fc fd9e 	bl	8002208 <HAL_GetTick>
 80056cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ce:	e00a      	b.n	80056e6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056d0:	f7fc fd9a 	bl	8002208 <HAL_GetTick>
 80056d4:	4602      	mov	r2, r0
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056de:	4293      	cmp	r3, r2
 80056e0:	d901      	bls.n	80056e6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e03b      	b.n	800575e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056e6:	4b20      	ldr	r3, [pc, #128]	@ (8005768 <HAL_RCC_ClockConfig+0x260>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d1ed      	bne.n	80056d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d008      	beq.n	8005712 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005700:	4b1a      	ldr	r3, [pc, #104]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	4917      	ldr	r1, [pc, #92]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 800570e:	4313      	orrs	r3, r2
 8005710:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0308 	and.w	r3, r3, #8
 800571a:	2b00      	cmp	r3, #0
 800571c:	d009      	beq.n	8005732 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800571e:	4b13      	ldr	r3, [pc, #76]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	490f      	ldr	r1, [pc, #60]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 800572e:	4313      	orrs	r3, r2
 8005730:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005732:	f000 f825 	bl	8005780 <HAL_RCC_GetSysClockFreq>
 8005736:	4602      	mov	r2, r0
 8005738:	4b0c      	ldr	r3, [pc, #48]	@ (800576c <HAL_RCC_ClockConfig+0x264>)
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	091b      	lsrs	r3, r3, #4
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	490c      	ldr	r1, [pc, #48]	@ (8005774 <HAL_RCC_ClockConfig+0x26c>)
 8005744:	5ccb      	ldrb	r3, [r1, r3]
 8005746:	f003 031f 	and.w	r3, r3, #31
 800574a:	fa22 f303 	lsr.w	r3, r2, r3
 800574e:	4a0a      	ldr	r2, [pc, #40]	@ (8005778 <HAL_RCC_ClockConfig+0x270>)
 8005750:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005752:	4b0a      	ldr	r3, [pc, #40]	@ (800577c <HAL_RCC_ClockConfig+0x274>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4618      	mov	r0, r3
 8005758:	f7fc fd0a 	bl	8002170 <HAL_InitTick>
 800575c:	4603      	mov	r3, r0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3718      	adds	r7, #24
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	40022000 	.word	0x40022000
 800576c:	40021000 	.word	0x40021000
 8005770:	04c4b400 	.word	0x04c4b400
 8005774:	0800d18c 	.word	0x0800d18c
 8005778:	20000004 	.word	0x20000004
 800577c:	20000008 	.word	0x20000008

08005780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005780:	b480      	push	{r7}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005786:	4b2c      	ldr	r3, [pc, #176]	@ (8005838 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 030c 	and.w	r3, r3, #12
 800578e:	2b04      	cmp	r3, #4
 8005790:	d102      	bne.n	8005798 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005792:	4b2a      	ldr	r3, [pc, #168]	@ (800583c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005794:	613b      	str	r3, [r7, #16]
 8005796:	e047      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005798:	4b27      	ldr	r3, [pc, #156]	@ (8005838 <HAL_RCC_GetSysClockFreq+0xb8>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 030c 	and.w	r3, r3, #12
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d102      	bne.n	80057aa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057a4:	4b25      	ldr	r3, [pc, #148]	@ (800583c <HAL_RCC_GetSysClockFreq+0xbc>)
 80057a6:	613b      	str	r3, [r7, #16]
 80057a8:	e03e      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80057aa:	4b23      	ldr	r3, [pc, #140]	@ (8005838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f003 030c 	and.w	r3, r3, #12
 80057b2:	2b0c      	cmp	r3, #12
 80057b4:	d136      	bne.n	8005824 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057b6:	4b20      	ldr	r3, [pc, #128]	@ (8005838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	f003 0303 	and.w	r3, r3, #3
 80057be:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	091b      	lsrs	r3, r3, #4
 80057c6:	f003 030f 	and.w	r3, r3, #15
 80057ca:	3301      	adds	r3, #1
 80057cc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2b03      	cmp	r3, #3
 80057d2:	d10c      	bne.n	80057ee <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057d4:	4a19      	ldr	r2, [pc, #100]	@ (800583c <HAL_RCC_GetSysClockFreq+0xbc>)
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057dc:	4a16      	ldr	r2, [pc, #88]	@ (8005838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057de:	68d2      	ldr	r2, [r2, #12]
 80057e0:	0a12      	lsrs	r2, r2, #8
 80057e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057e6:	fb02 f303 	mul.w	r3, r2, r3
 80057ea:	617b      	str	r3, [r7, #20]
      break;
 80057ec:	e00c      	b.n	8005808 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057ee:	4a13      	ldr	r2, [pc, #76]	@ (800583c <HAL_RCC_GetSysClockFreq+0xbc>)
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f6:	4a10      	ldr	r2, [pc, #64]	@ (8005838 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057f8:	68d2      	ldr	r2, [r2, #12]
 80057fa:	0a12      	lsrs	r2, r2, #8
 80057fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005800:	fb02 f303 	mul.w	r3, r2, r3
 8005804:	617b      	str	r3, [r7, #20]
      break;
 8005806:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005808:	4b0b      	ldr	r3, [pc, #44]	@ (8005838 <HAL_RCC_GetSysClockFreq+0xb8>)
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	0e5b      	lsrs	r3, r3, #25
 800580e:	f003 0303 	and.w	r3, r3, #3
 8005812:	3301      	adds	r3, #1
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005820:	613b      	str	r3, [r7, #16]
 8005822:	e001      	b.n	8005828 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005828:	693b      	ldr	r3, [r7, #16]
}
 800582a:	4618      	mov	r0, r3
 800582c:	371c      	adds	r7, #28
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40021000 	.word	0x40021000
 800583c:	00f42400 	.word	0x00f42400

08005840 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005844:	4b03      	ldr	r3, [pc, #12]	@ (8005854 <HAL_RCC_GetHCLKFreq+0x14>)
 8005846:	681b      	ldr	r3, [r3, #0]
}
 8005848:	4618      	mov	r0, r3
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	20000004 	.word	0x20000004

08005858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800585c:	f7ff fff0 	bl	8005840 <HAL_RCC_GetHCLKFreq>
 8005860:	4602      	mov	r2, r0
 8005862:	4b06      	ldr	r3, [pc, #24]	@ (800587c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	0a1b      	lsrs	r3, r3, #8
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	4904      	ldr	r1, [pc, #16]	@ (8005880 <HAL_RCC_GetPCLK1Freq+0x28>)
 800586e:	5ccb      	ldrb	r3, [r1, r3]
 8005870:	f003 031f 	and.w	r3, r3, #31
 8005874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005878:	4618      	mov	r0, r3
 800587a:	bd80      	pop	{r7, pc}
 800587c:	40021000 	.word	0x40021000
 8005880:	0800d19c 	.word	0x0800d19c

08005884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005888:	f7ff ffda 	bl	8005840 <HAL_RCC_GetHCLKFreq>
 800588c:	4602      	mov	r2, r0
 800588e:	4b06      	ldr	r3, [pc, #24]	@ (80058a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	0adb      	lsrs	r3, r3, #11
 8005894:	f003 0307 	and.w	r3, r3, #7
 8005898:	4904      	ldr	r1, [pc, #16]	@ (80058ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800589a:	5ccb      	ldrb	r3, [r1, r3]
 800589c:	f003 031f 	and.w	r3, r3, #31
 80058a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40021000 	.word	0x40021000
 80058ac:	0800d19c 	.word	0x0800d19c

080058b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058b6:	4b1e      	ldr	r3, [pc, #120]	@ (8005930 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f003 0303 	and.w	r3, r3, #3
 80058be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058c0:	4b1b      	ldr	r3, [pc, #108]	@ (8005930 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	091b      	lsrs	r3, r3, #4
 80058c6:	f003 030f 	and.w	r3, r3, #15
 80058ca:	3301      	adds	r3, #1
 80058cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	2b03      	cmp	r3, #3
 80058d2:	d10c      	bne.n	80058ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058d4:	4a17      	ldr	r2, [pc, #92]	@ (8005934 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058dc:	4a14      	ldr	r2, [pc, #80]	@ (8005930 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058de:	68d2      	ldr	r2, [r2, #12]
 80058e0:	0a12      	lsrs	r2, r2, #8
 80058e2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058e6:	fb02 f303 	mul.w	r3, r2, r3
 80058ea:	617b      	str	r3, [r7, #20]
    break;
 80058ec:	e00c      	b.n	8005908 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058ee:	4a11      	ldr	r2, [pc, #68]	@ (8005934 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f6:	4a0e      	ldr	r2, [pc, #56]	@ (8005930 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058f8:	68d2      	ldr	r2, [r2, #12]
 80058fa:	0a12      	lsrs	r2, r2, #8
 80058fc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005900:	fb02 f303 	mul.w	r3, r2, r3
 8005904:	617b      	str	r3, [r7, #20]
    break;
 8005906:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005908:	4b09      	ldr	r3, [pc, #36]	@ (8005930 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	0e5b      	lsrs	r3, r3, #25
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	3301      	adds	r3, #1
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005918:	697a      	ldr	r2, [r7, #20]
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005920:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005922:	687b      	ldr	r3, [r7, #4]
}
 8005924:	4618      	mov	r0, r3
 8005926:	371c      	adds	r7, #28
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	40021000 	.word	0x40021000
 8005934:	00f42400 	.word	0x00f42400

08005938 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005940:	2300      	movs	r3, #0
 8005942:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005944:	2300      	movs	r3, #0
 8005946:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 8098 	beq.w	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005956:	2300      	movs	r3, #0
 8005958:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800595a:	4b43      	ldr	r3, [pc, #268]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800595c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800595e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10d      	bne.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005966:	4b40      	ldr	r3, [pc, #256]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800596a:	4a3f      	ldr	r2, [pc, #252]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800596c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005970:	6593      	str	r3, [r2, #88]	@ 0x58
 8005972:	4b3d      	ldr	r3, [pc, #244]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800597a:	60bb      	str	r3, [r7, #8]
 800597c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800597e:	2301      	movs	r3, #1
 8005980:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005982:	4b3a      	ldr	r3, [pc, #232]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a39      	ldr	r2, [pc, #228]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005988:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800598c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800598e:	f7fc fc3b 	bl	8002208 <HAL_GetTick>
 8005992:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005994:	e009      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005996:	f7fc fc37 	bl	8002208 <HAL_GetTick>
 800599a:	4602      	mov	r2, r0
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d902      	bls.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	74fb      	strb	r3, [r7, #19]
        break;
 80059a8:	e005      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059aa:	4b30      	ldr	r3, [pc, #192]	@ (8005a6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0ef      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80059b6:	7cfb      	ldrb	r3, [r7, #19]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d159      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059bc:	4b2a      	ldr	r3, [pc, #168]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059c6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d01e      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d019      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059d8:	4b23      	ldr	r3, [pc, #140]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059e4:	4b20      	ldr	r3, [pc, #128]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059ea:	4a1f      	ldr	r2, [pc, #124]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059f4:	4b1c      	ldr	r3, [pc, #112]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a04:	4a18      	ldr	r2, [pc, #96]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d016      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a16:	f7fc fbf7 	bl	8002208 <HAL_GetTick>
 8005a1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a1c:	e00b      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a1e:	f7fc fbf3 	bl	8002208 <HAL_GetTick>
 8005a22:	4602      	mov	r2, r0
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d902      	bls.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005a30:	2303      	movs	r3, #3
 8005a32:	74fb      	strb	r3, [r7, #19]
            break;
 8005a34:	e006      	b.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a36:	4b0c      	ldr	r3, [pc, #48]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d0ec      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005a44:	7cfb      	ldrb	r3, [r7, #19]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10b      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a4a:	4b07      	ldr	r3, [pc, #28]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a58:	4903      	ldr	r1, [pc, #12]	@ (8005a68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005a60:	e008      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a62:	7cfb      	ldrb	r3, [r7, #19]
 8005a64:	74bb      	strb	r3, [r7, #18]
 8005a66:	e005      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005a68:	40021000 	.word	0x40021000
 8005a6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a70:	7cfb      	ldrb	r3, [r7, #19]
 8005a72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a74:	7c7b      	ldrb	r3, [r7, #17]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d105      	bne.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a7a:	4ba7      	ldr	r3, [pc, #668]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a7e:	4aa6      	ldr	r2, [pc, #664]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a84:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a92:	4ba1      	ldr	r3, [pc, #644]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a98:	f023 0203 	bic.w	r2, r3, #3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	499d      	ldr	r1, [pc, #628]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00a      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ab4:	4b98      	ldr	r3, [pc, #608]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aba:	f023 020c 	bic.w	r2, r3, #12
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	4995      	ldr	r1, [pc, #596]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0304 	and.w	r3, r3, #4
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ad6:	4b90      	ldr	r3, [pc, #576]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005adc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	498c      	ldr	r1, [pc, #560]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0308 	and.w	r3, r3, #8
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00a      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005af8:	4b87      	ldr	r3, [pc, #540]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005afe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	4984      	ldr	r1, [pc, #528]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0310 	and.w	r3, r3, #16
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00a      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b1a:	4b7f      	ldr	r3, [pc, #508]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	497b      	ldr	r1, [pc, #492]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0320 	and.w	r3, r3, #32
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00a      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b3c:	4b76      	ldr	r3, [pc, #472]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b42:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	4973      	ldr	r1, [pc, #460]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00a      	beq.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b5e:	4b6e      	ldr	r3, [pc, #440]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b64:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	496a      	ldr	r1, [pc, #424]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00a      	beq.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b80:	4b65      	ldr	r3, [pc, #404]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b86:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	4962      	ldr	r1, [pc, #392]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ba2:	4b5d      	ldr	r3, [pc, #372]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ba8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb0:	4959      	ldr	r1, [pc, #356]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00a      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005bc4:	4b54      	ldr	r3, [pc, #336]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005bca:	f023 0203 	bic.w	r2, r3, #3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd2:	4951      	ldr	r1, [pc, #324]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00a      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005be6:	4b4c      	ldr	r3, [pc, #304]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf4:	4948      	ldr	r1, [pc, #288]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d015      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c08:	4b43      	ldr	r3, [pc, #268]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c16:	4940      	ldr	r1, [pc, #256]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c26:	d105      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c28:	4b3b      	ldr	r3, [pc, #236]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	4a3a      	ldr	r2, [pc, #232]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c32:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d015      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c40:	4b35      	ldr	r3, [pc, #212]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c46:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c4e:	4932      	ldr	r1, [pc, #200]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c5e:	d105      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c60:	4b2d      	ldr	r3, [pc, #180]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	4a2c      	ldr	r2, [pc, #176]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c6a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d015      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c78:	4b27      	ldr	r3, [pc, #156]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c7e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c86:	4924      	ldr	r1, [pc, #144]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c96:	d105      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c98:	4b1f      	ldr	r3, [pc, #124]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ca2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d015      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cb0:	4b19      	ldr	r3, [pc, #100]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cbe:	4916      	ldr	r1, [pc, #88]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005cce:	d105      	bne.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cd0:	4b11      	ldr	r3, [pc, #68]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	4a10      	ldr	r2, [pc, #64]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cda:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d019      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cf6:	4908      	ldr	r1, [pc, #32]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d06:	d109      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d08:	4b03      	ldr	r3, [pc, #12]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	4a02      	ldr	r2, [pc, #8]	@ (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d12:	60d3      	str	r3, [r2, #12]
 8005d14:	e002      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005d16:	bf00      	nop
 8005d18:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d015      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d28:	4b29      	ldr	r3, [pc, #164]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d2e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d36:	4926      	ldr	r1, [pc, #152]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d46:	d105      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d48:	4b21      	ldr	r3, [pc, #132]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	4a20      	ldr	r2, [pc, #128]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d52:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d015      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005d60:	4b1b      	ldr	r3, [pc, #108]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d66:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d6e:	4918      	ldr	r1, [pc, #96]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d7e:	d105      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d80:	4b13      	ldr	r3, [pc, #76]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	4a12      	ldr	r2, [pc, #72]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d8a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d015      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005d98:	4b0d      	ldr	r3, [pc, #52]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005da6:	490a      	ldr	r1, [pc, #40]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005db2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005db6:	d105      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005db8:	4b05      	ldr	r3, [pc, #20]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	4a04      	ldr	r2, [pc, #16]	@ (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dc2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005dc4:	7cbb      	ldrb	r3, [r7, #18]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	40021000 	.word	0x40021000

08005dd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	e049      	b.n	8005e7a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d106      	bne.n	8005e00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7fb fe9e 	bl	8001b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	4619      	mov	r1, r3
 8005e12:	4610      	mov	r0, r2
 8005e14:	f000 fcd2 	bl	80067bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
	...

08005e84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d001      	beq.n	8005e9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e054      	b.n	8005f46 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f042 0201 	orr.w	r2, r2, #1
 8005eb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a26      	ldr	r2, [pc, #152]	@ (8005f54 <HAL_TIM_Base_Start_IT+0xd0>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d022      	beq.n	8005f04 <HAL_TIM_Base_Start_IT+0x80>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ec6:	d01d      	beq.n	8005f04 <HAL_TIM_Base_Start_IT+0x80>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a22      	ldr	r2, [pc, #136]	@ (8005f58 <HAL_TIM_Base_Start_IT+0xd4>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d018      	beq.n	8005f04 <HAL_TIM_Base_Start_IT+0x80>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a21      	ldr	r2, [pc, #132]	@ (8005f5c <HAL_TIM_Base_Start_IT+0xd8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d013      	beq.n	8005f04 <HAL_TIM_Base_Start_IT+0x80>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8005f60 <HAL_TIM_Base_Start_IT+0xdc>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d00e      	beq.n	8005f04 <HAL_TIM_Base_Start_IT+0x80>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a1e      	ldr	r2, [pc, #120]	@ (8005f64 <HAL_TIM_Base_Start_IT+0xe0>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d009      	beq.n	8005f04 <HAL_TIM_Base_Start_IT+0x80>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8005f68 <HAL_TIM_Base_Start_IT+0xe4>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d004      	beq.n	8005f04 <HAL_TIM_Base_Start_IT+0x80>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1b      	ldr	r2, [pc, #108]	@ (8005f6c <HAL_TIM_Base_Start_IT+0xe8>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d115      	bne.n	8005f30 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	689a      	ldr	r2, [r3, #8]
 8005f0a:	4b19      	ldr	r3, [pc, #100]	@ (8005f70 <HAL_TIM_Base_Start_IT+0xec>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2b06      	cmp	r3, #6
 8005f14:	d015      	beq.n	8005f42 <HAL_TIM_Base_Start_IT+0xbe>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f1c:	d011      	beq.n	8005f42 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f042 0201 	orr.w	r2, r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f2e:	e008      	b.n	8005f42 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f042 0201 	orr.w	r2, r2, #1
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	e000      	b.n	8005f44 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	40012c00 	.word	0x40012c00
 8005f58:	40000400 	.word	0x40000400
 8005f5c:	40000800 	.word	0x40000800
 8005f60:	40000c00 	.word	0x40000c00
 8005f64:	40013400 	.word	0x40013400
 8005f68:	40014000 	.word	0x40014000
 8005f6c:	40015000 	.word	0x40015000
 8005f70:	00010007 	.word	0x00010007

08005f74 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f022 0201 	bic.w	r2, r2, #1
 8005f8a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6a1a      	ldr	r2, [r3, #32]
 8005f92:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005f96:	4013      	ands	r3, r2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d10f      	bne.n	8005fbc <HAL_TIM_Base_Stop_IT+0x48>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6a1a      	ldr	r2, [r3, #32]
 8005fa2:	f244 4344 	movw	r3, #17476	@ 0x4444
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d107      	bne.n	8005fbc <HAL_TIM_Base_Stop_IT+0x48>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f022 0201 	bic.w	r2, r2, #1
 8005fba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b082      	sub	sp, #8
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e049      	b.n	8006078 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d106      	bne.n	8005ffe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f7fb fcf5 	bl	80019e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2202      	movs	r2, #2
 8006002:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	3304      	adds	r3, #4
 800600e:	4619      	mov	r1, r3
 8006010:	4610      	mov	r0, r2
 8006012:	f000 fbd3 	bl	80067bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b084      	sub	sp, #16
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d109      	bne.n	80060a4 <HAL_TIM_PWM_Start+0x24>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b01      	cmp	r3, #1
 800609a:	bf14      	ite	ne
 800609c:	2301      	movne	r3, #1
 800609e:	2300      	moveq	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	e03c      	b.n	800611e <HAL_TIM_PWM_Start+0x9e>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d109      	bne.n	80060be <HAL_TIM_PWM_Start+0x3e>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	bf14      	ite	ne
 80060b6:	2301      	movne	r3, #1
 80060b8:	2300      	moveq	r3, #0
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	e02f      	b.n	800611e <HAL_TIM_PWM_Start+0x9e>
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2b08      	cmp	r3, #8
 80060c2:	d109      	bne.n	80060d8 <HAL_TIM_PWM_Start+0x58>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	bf14      	ite	ne
 80060d0:	2301      	movne	r3, #1
 80060d2:	2300      	moveq	r3, #0
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	e022      	b.n	800611e <HAL_TIM_PWM_Start+0x9e>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2b0c      	cmp	r3, #12
 80060dc:	d109      	bne.n	80060f2 <HAL_TIM_PWM_Start+0x72>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	bf14      	ite	ne
 80060ea:	2301      	movne	r3, #1
 80060ec:	2300      	moveq	r3, #0
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	e015      	b.n	800611e <HAL_TIM_PWM_Start+0x9e>
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b10      	cmp	r3, #16
 80060f6:	d109      	bne.n	800610c <HAL_TIM_PWM_Start+0x8c>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b01      	cmp	r3, #1
 8006102:	bf14      	ite	ne
 8006104:	2301      	movne	r3, #1
 8006106:	2300      	moveq	r3, #0
 8006108:	b2db      	uxtb	r3, r3
 800610a:	e008      	b.n	800611e <HAL_TIM_PWM_Start+0x9e>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b01      	cmp	r3, #1
 8006116:	bf14      	ite	ne
 8006118:	2301      	movne	r3, #1
 800611a:	2300      	moveq	r3, #0
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e0a6      	b.n	8006274 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d104      	bne.n	8006136 <HAL_TIM_PWM_Start+0xb6>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006134:	e023      	b.n	800617e <HAL_TIM_PWM_Start+0xfe>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b04      	cmp	r3, #4
 800613a:	d104      	bne.n	8006146 <HAL_TIM_PWM_Start+0xc6>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2202      	movs	r2, #2
 8006140:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006144:	e01b      	b.n	800617e <HAL_TIM_PWM_Start+0xfe>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b08      	cmp	r3, #8
 800614a:	d104      	bne.n	8006156 <HAL_TIM_PWM_Start+0xd6>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2202      	movs	r2, #2
 8006150:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006154:	e013      	b.n	800617e <HAL_TIM_PWM_Start+0xfe>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	2b0c      	cmp	r3, #12
 800615a:	d104      	bne.n	8006166 <HAL_TIM_PWM_Start+0xe6>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2202      	movs	r2, #2
 8006160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006164:	e00b      	b.n	800617e <HAL_TIM_PWM_Start+0xfe>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b10      	cmp	r3, #16
 800616a:	d104      	bne.n	8006176 <HAL_TIM_PWM_Start+0xf6>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006174:	e003      	b.n	800617e <HAL_TIM_PWM_Start+0xfe>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2202      	movs	r2, #2
 800617a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2201      	movs	r2, #1
 8006184:	6839      	ldr	r1, [r7, #0]
 8006186:	4618      	mov	r0, r3
 8006188:	f000 fef6 	bl	8006f78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a3a      	ldr	r2, [pc, #232]	@ (800627c <HAL_TIM_PWM_Start+0x1fc>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d018      	beq.n	80061c8 <HAL_TIM_PWM_Start+0x148>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a39      	ldr	r2, [pc, #228]	@ (8006280 <HAL_TIM_PWM_Start+0x200>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d013      	beq.n	80061c8 <HAL_TIM_PWM_Start+0x148>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a37      	ldr	r2, [pc, #220]	@ (8006284 <HAL_TIM_PWM_Start+0x204>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d00e      	beq.n	80061c8 <HAL_TIM_PWM_Start+0x148>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a36      	ldr	r2, [pc, #216]	@ (8006288 <HAL_TIM_PWM_Start+0x208>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d009      	beq.n	80061c8 <HAL_TIM_PWM_Start+0x148>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a34      	ldr	r2, [pc, #208]	@ (800628c <HAL_TIM_PWM_Start+0x20c>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d004      	beq.n	80061c8 <HAL_TIM_PWM_Start+0x148>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a33      	ldr	r2, [pc, #204]	@ (8006290 <HAL_TIM_PWM_Start+0x210>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d101      	bne.n	80061cc <HAL_TIM_PWM_Start+0x14c>
 80061c8:	2301      	movs	r3, #1
 80061ca:	e000      	b.n	80061ce <HAL_TIM_PWM_Start+0x14e>
 80061cc:	2300      	movs	r3, #0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d007      	beq.n	80061e2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80061e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a25      	ldr	r2, [pc, #148]	@ (800627c <HAL_TIM_PWM_Start+0x1fc>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d022      	beq.n	8006232 <HAL_TIM_PWM_Start+0x1b2>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061f4:	d01d      	beq.n	8006232 <HAL_TIM_PWM_Start+0x1b2>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a26      	ldr	r2, [pc, #152]	@ (8006294 <HAL_TIM_PWM_Start+0x214>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d018      	beq.n	8006232 <HAL_TIM_PWM_Start+0x1b2>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a24      	ldr	r2, [pc, #144]	@ (8006298 <HAL_TIM_PWM_Start+0x218>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d013      	beq.n	8006232 <HAL_TIM_PWM_Start+0x1b2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a23      	ldr	r2, [pc, #140]	@ (800629c <HAL_TIM_PWM_Start+0x21c>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00e      	beq.n	8006232 <HAL_TIM_PWM_Start+0x1b2>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a19      	ldr	r2, [pc, #100]	@ (8006280 <HAL_TIM_PWM_Start+0x200>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d009      	beq.n	8006232 <HAL_TIM_PWM_Start+0x1b2>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a18      	ldr	r2, [pc, #96]	@ (8006284 <HAL_TIM_PWM_Start+0x204>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d004      	beq.n	8006232 <HAL_TIM_PWM_Start+0x1b2>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a18      	ldr	r2, [pc, #96]	@ (8006290 <HAL_TIM_PWM_Start+0x210>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d115      	bne.n	800625e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	4b19      	ldr	r3, [pc, #100]	@ (80062a0 <HAL_TIM_PWM_Start+0x220>)
 800623a:	4013      	ands	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2b06      	cmp	r3, #6
 8006242:	d015      	beq.n	8006270 <HAL_TIM_PWM_Start+0x1f0>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800624a:	d011      	beq.n	8006270 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0201 	orr.w	r2, r2, #1
 800625a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800625c:	e008      	b.n	8006270 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f042 0201 	orr.w	r2, r2, #1
 800626c:	601a      	str	r2, [r3, #0]
 800626e:	e000      	b.n	8006272 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006270:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	40012c00 	.word	0x40012c00
 8006280:	40013400 	.word	0x40013400
 8006284:	40014000 	.word	0x40014000
 8006288:	40014400 	.word	0x40014400
 800628c:	40014800 	.word	0x40014800
 8006290:	40015000 	.word	0x40015000
 8006294:	40000400 	.word	0x40000400
 8006298:	40000800 	.word	0x40000800
 800629c:	40000c00 	.word	0x40000c00
 80062a0:	00010007 	.word	0x00010007

080062a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f003 0302 	and.w	r3, r3, #2
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d020      	beq.n	8006308 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f003 0302 	and.w	r3, r3, #2
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d01b      	beq.n	8006308 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f06f 0202 	mvn.w	r2, #2
 80062d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	f003 0303 	and.w	r3, r3, #3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fa46 	bl	8006780 <HAL_TIM_IC_CaptureCallback>
 80062f4:	e005      	b.n	8006302 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fa38 	bl	800676c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fa49 	bl	8006794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	f003 0304 	and.w	r3, r3, #4
 800630e:	2b00      	cmp	r3, #0
 8006310:	d020      	beq.n	8006354 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f003 0304 	and.w	r3, r3, #4
 8006318:	2b00      	cmp	r3, #0
 800631a:	d01b      	beq.n	8006354 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f06f 0204 	mvn.w	r2, #4
 8006324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2202      	movs	r2, #2
 800632a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006336:	2b00      	cmp	r3, #0
 8006338:	d003      	beq.n	8006342 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f000 fa20 	bl	8006780 <HAL_TIM_IC_CaptureCallback>
 8006340:	e005      	b.n	800634e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fa12 	bl	800676c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fa23 	bl	8006794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f003 0308 	and.w	r3, r3, #8
 800635a:	2b00      	cmp	r3, #0
 800635c:	d020      	beq.n	80063a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f003 0308 	and.w	r3, r3, #8
 8006364:	2b00      	cmp	r3, #0
 8006366:	d01b      	beq.n	80063a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f06f 0208 	mvn.w	r2, #8
 8006370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2204      	movs	r2, #4
 8006376:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	f003 0303 	and.w	r3, r3, #3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f9fa 	bl	8006780 <HAL_TIM_IC_CaptureCallback>
 800638c:	e005      	b.n	800639a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f9ec 	bl	800676c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 f9fd 	bl	8006794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f003 0310 	and.w	r3, r3, #16
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d020      	beq.n	80063ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f003 0310 	and.w	r3, r3, #16
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d01b      	beq.n	80063ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f06f 0210 	mvn.w	r2, #16
 80063bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2208      	movs	r2, #8
 80063c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	69db      	ldr	r3, [r3, #28]
 80063ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f9d4 	bl	8006780 <HAL_TIM_IC_CaptureCallback>
 80063d8:	e005      	b.n	80063e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f9c6 	bl	800676c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f9d7 	bl	8006794 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00c      	beq.n	8006410 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d007      	beq.n	8006410 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f06f 0201 	mvn.w	r2, #1
 8006408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7fb f966 	bl	80016dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006416:	2b00      	cmp	r3, #0
 8006418:	d104      	bne.n	8006424 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00c      	beq.n	800643e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800642a:	2b00      	cmp	r3, #0
 800642c:	d007      	beq.n	800643e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 fef7 	bl	800722c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00c      	beq.n	8006462 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800644e:	2b00      	cmp	r3, #0
 8006450:	d007      	beq.n	8006462 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800645a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 feef 	bl	8007240 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00c      	beq.n	8006486 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006472:	2b00      	cmp	r3, #0
 8006474:	d007      	beq.n	8006486 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800647e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f991 	bl	80067a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f003 0320 	and.w	r3, r3, #32
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00c      	beq.n	80064aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f003 0320 	and.w	r3, r3, #32
 8006496:	2b00      	cmp	r3, #0
 8006498:	d007      	beq.n	80064aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f06f 0220 	mvn.w	r2, #32
 80064a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 feb7 	bl	8007218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00c      	beq.n	80064ce <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d007      	beq.n	80064ce <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80064c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fec3 	bl	8007254 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00c      	beq.n	80064f2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d007      	beq.n	80064f2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80064ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 febb 	bl	8007268 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00c      	beq.n	8006516 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d007      	beq.n	8006516 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800650e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 feb3 	bl	800727c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00c      	beq.n	800653a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d007      	beq.n	800653a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 feab 	bl	8007290 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800653a:	bf00      	nop
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
	...

08006544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800655a:	2b01      	cmp	r3, #1
 800655c:	d101      	bne.n	8006562 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800655e:	2302      	movs	r3, #2
 8006560:	e0ff      	b.n	8006762 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b14      	cmp	r3, #20
 800656e:	f200 80f0 	bhi.w	8006752 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006572:	a201      	add	r2, pc, #4	@ (adr r2, 8006578 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006578:	080065cd 	.word	0x080065cd
 800657c:	08006753 	.word	0x08006753
 8006580:	08006753 	.word	0x08006753
 8006584:	08006753 	.word	0x08006753
 8006588:	0800660d 	.word	0x0800660d
 800658c:	08006753 	.word	0x08006753
 8006590:	08006753 	.word	0x08006753
 8006594:	08006753 	.word	0x08006753
 8006598:	0800664f 	.word	0x0800664f
 800659c:	08006753 	.word	0x08006753
 80065a0:	08006753 	.word	0x08006753
 80065a4:	08006753 	.word	0x08006753
 80065a8:	0800668f 	.word	0x0800668f
 80065ac:	08006753 	.word	0x08006753
 80065b0:	08006753 	.word	0x08006753
 80065b4:	08006753 	.word	0x08006753
 80065b8:	080066d1 	.word	0x080066d1
 80065bc:	08006753 	.word	0x08006753
 80065c0:	08006753 	.word	0x08006753
 80065c4:	08006753 	.word	0x08006753
 80065c8:	08006711 	.word	0x08006711
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68b9      	ldr	r1, [r7, #8]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 f9a6 	bl	8006924 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	699a      	ldr	r2, [r3, #24]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0208 	orr.w	r2, r2, #8
 80065e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	699a      	ldr	r2, [r3, #24]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f022 0204 	bic.w	r2, r2, #4
 80065f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	6999      	ldr	r1, [r3, #24]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	691a      	ldr	r2, [r3, #16]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	430a      	orrs	r2, r1
 8006608:	619a      	str	r2, [r3, #24]
      break;
 800660a:	e0a5      	b.n	8006758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fa20 	bl	8006a58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699a      	ldr	r2, [r3, #24]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699a      	ldr	r2, [r3, #24]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6999      	ldr	r1, [r3, #24]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	021a      	lsls	r2, r3, #8
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	430a      	orrs	r2, r1
 800664a:	619a      	str	r2, [r3, #24]
      break;
 800664c:	e084      	b.n	8006758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68b9      	ldr	r1, [r7, #8]
 8006654:	4618      	mov	r0, r3
 8006656:	f000 fa93 	bl	8006b80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	69da      	ldr	r2, [r3, #28]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f042 0208 	orr.w	r2, r2, #8
 8006668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	69da      	ldr	r2, [r3, #28]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 0204 	bic.w	r2, r2, #4
 8006678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	69d9      	ldr	r1, [r3, #28]
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	691a      	ldr	r2, [r3, #16]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	61da      	str	r2, [r3, #28]
      break;
 800668c:	e064      	b.n	8006758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68b9      	ldr	r1, [r7, #8]
 8006694:	4618      	mov	r0, r3
 8006696:	f000 fb05 	bl	8006ca4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	69da      	ldr	r2, [r3, #28]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	69da      	ldr	r2, [r3, #28]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	69d9      	ldr	r1, [r3, #28]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	021a      	lsls	r2, r3, #8
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	61da      	str	r2, [r3, #28]
      break;
 80066ce:	e043      	b.n	8006758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68b9      	ldr	r1, [r7, #8]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fb78 	bl	8006dcc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f042 0208 	orr.w	r2, r2, #8
 80066ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0204 	bic.w	r2, r2, #4
 80066fa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	691a      	ldr	r2, [r3, #16]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800670e:	e023      	b.n	8006758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68b9      	ldr	r1, [r7, #8]
 8006716:	4618      	mov	r0, r3
 8006718:	f000 fbc2 	bl	8006ea0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800672a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800673a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	691b      	ldr	r3, [r3, #16]
 8006746:	021a      	lsls	r2, r3, #8
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006750:	e002      	b.n	8006758 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	75fb      	strb	r3, [r7, #23]
      break;
 8006756:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006760:	7dfb      	ldrb	r3, [r7, #23]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3718      	adds	r7, #24
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop

0800676c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a4c      	ldr	r2, [pc, #304]	@ (8006900 <TIM_Base_SetConfig+0x144>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d017      	beq.n	8006804 <TIM_Base_SetConfig+0x48>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067da:	d013      	beq.n	8006804 <TIM_Base_SetConfig+0x48>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4a49      	ldr	r2, [pc, #292]	@ (8006904 <TIM_Base_SetConfig+0x148>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d00f      	beq.n	8006804 <TIM_Base_SetConfig+0x48>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	4a48      	ldr	r2, [pc, #288]	@ (8006908 <TIM_Base_SetConfig+0x14c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d00b      	beq.n	8006804 <TIM_Base_SetConfig+0x48>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	4a47      	ldr	r2, [pc, #284]	@ (800690c <TIM_Base_SetConfig+0x150>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d007      	beq.n	8006804 <TIM_Base_SetConfig+0x48>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4a46      	ldr	r2, [pc, #280]	@ (8006910 <TIM_Base_SetConfig+0x154>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d003      	beq.n	8006804 <TIM_Base_SetConfig+0x48>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	4a45      	ldr	r2, [pc, #276]	@ (8006914 <TIM_Base_SetConfig+0x158>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d108      	bne.n	8006816 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800680a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a39      	ldr	r2, [pc, #228]	@ (8006900 <TIM_Base_SetConfig+0x144>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d023      	beq.n	8006866 <TIM_Base_SetConfig+0xaa>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006824:	d01f      	beq.n	8006866 <TIM_Base_SetConfig+0xaa>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a36      	ldr	r2, [pc, #216]	@ (8006904 <TIM_Base_SetConfig+0x148>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d01b      	beq.n	8006866 <TIM_Base_SetConfig+0xaa>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a35      	ldr	r2, [pc, #212]	@ (8006908 <TIM_Base_SetConfig+0x14c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d017      	beq.n	8006866 <TIM_Base_SetConfig+0xaa>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a34      	ldr	r2, [pc, #208]	@ (800690c <TIM_Base_SetConfig+0x150>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d013      	beq.n	8006866 <TIM_Base_SetConfig+0xaa>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a33      	ldr	r2, [pc, #204]	@ (8006910 <TIM_Base_SetConfig+0x154>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d00f      	beq.n	8006866 <TIM_Base_SetConfig+0xaa>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a33      	ldr	r2, [pc, #204]	@ (8006918 <TIM_Base_SetConfig+0x15c>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d00b      	beq.n	8006866 <TIM_Base_SetConfig+0xaa>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a32      	ldr	r2, [pc, #200]	@ (800691c <TIM_Base_SetConfig+0x160>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d007      	beq.n	8006866 <TIM_Base_SetConfig+0xaa>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a31      	ldr	r2, [pc, #196]	@ (8006920 <TIM_Base_SetConfig+0x164>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d003      	beq.n	8006866 <TIM_Base_SetConfig+0xaa>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a2c      	ldr	r2, [pc, #176]	@ (8006914 <TIM_Base_SetConfig+0x158>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d108      	bne.n	8006878 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800686c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	4313      	orrs	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	4313      	orrs	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a18      	ldr	r2, [pc, #96]	@ (8006900 <TIM_Base_SetConfig+0x144>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d013      	beq.n	80068cc <TIM_Base_SetConfig+0x110>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a1a      	ldr	r2, [pc, #104]	@ (8006910 <TIM_Base_SetConfig+0x154>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d00f      	beq.n	80068cc <TIM_Base_SetConfig+0x110>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a1a      	ldr	r2, [pc, #104]	@ (8006918 <TIM_Base_SetConfig+0x15c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d00b      	beq.n	80068cc <TIM_Base_SetConfig+0x110>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a19      	ldr	r2, [pc, #100]	@ (800691c <TIM_Base_SetConfig+0x160>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d007      	beq.n	80068cc <TIM_Base_SetConfig+0x110>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a18      	ldr	r2, [pc, #96]	@ (8006920 <TIM_Base_SetConfig+0x164>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <TIM_Base_SetConfig+0x110>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a13      	ldr	r2, [pc, #76]	@ (8006914 <TIM_Base_SetConfig+0x158>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d103      	bne.n	80068d4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	691a      	ldr	r2, [r3, #16]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f003 0301 	and.w	r3, r3, #1
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d105      	bne.n	80068f2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	f023 0201 	bic.w	r2, r3, #1
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	611a      	str	r2, [r3, #16]
  }
}
 80068f2:	bf00      	nop
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	40012c00 	.word	0x40012c00
 8006904:	40000400 	.word	0x40000400
 8006908:	40000800 	.word	0x40000800
 800690c:	40000c00 	.word	0x40000c00
 8006910:	40013400 	.word	0x40013400
 8006914:	40015000 	.word	0x40015000
 8006918:	40014000 	.word	0x40014000
 800691c:	40014400 	.word	0x40014400
 8006920:	40014800 	.word	0x40014800

08006924 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006924:	b480      	push	{r7}
 8006926:	b087      	sub	sp, #28
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a1b      	ldr	r3, [r3, #32]
 8006938:	f023 0201 	bic.w	r2, r3, #1
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006956:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0303 	bic.w	r3, r3, #3
 800695e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f023 0302 	bic.w	r3, r3, #2
 8006970:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	4313      	orrs	r3, r2
 800697a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a30      	ldr	r2, [pc, #192]	@ (8006a40 <TIM_OC1_SetConfig+0x11c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d013      	beq.n	80069ac <TIM_OC1_SetConfig+0x88>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a2f      	ldr	r2, [pc, #188]	@ (8006a44 <TIM_OC1_SetConfig+0x120>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00f      	beq.n	80069ac <TIM_OC1_SetConfig+0x88>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a2e      	ldr	r2, [pc, #184]	@ (8006a48 <TIM_OC1_SetConfig+0x124>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d00b      	beq.n	80069ac <TIM_OC1_SetConfig+0x88>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a2d      	ldr	r2, [pc, #180]	@ (8006a4c <TIM_OC1_SetConfig+0x128>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d007      	beq.n	80069ac <TIM_OC1_SetConfig+0x88>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a2c      	ldr	r2, [pc, #176]	@ (8006a50 <TIM_OC1_SetConfig+0x12c>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d003      	beq.n	80069ac <TIM_OC1_SetConfig+0x88>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a2b      	ldr	r2, [pc, #172]	@ (8006a54 <TIM_OC1_SetConfig+0x130>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d10c      	bne.n	80069c6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f023 0308 	bic.w	r3, r3, #8
 80069b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f023 0304 	bic.w	r3, r3, #4
 80069c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006a40 <TIM_OC1_SetConfig+0x11c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d013      	beq.n	80069f6 <TIM_OC1_SetConfig+0xd2>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a1c      	ldr	r2, [pc, #112]	@ (8006a44 <TIM_OC1_SetConfig+0x120>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d00f      	beq.n	80069f6 <TIM_OC1_SetConfig+0xd2>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a1b      	ldr	r2, [pc, #108]	@ (8006a48 <TIM_OC1_SetConfig+0x124>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d00b      	beq.n	80069f6 <TIM_OC1_SetConfig+0xd2>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a1a      	ldr	r2, [pc, #104]	@ (8006a4c <TIM_OC1_SetConfig+0x128>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d007      	beq.n	80069f6 <TIM_OC1_SetConfig+0xd2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a19      	ldr	r2, [pc, #100]	@ (8006a50 <TIM_OC1_SetConfig+0x12c>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d003      	beq.n	80069f6 <TIM_OC1_SetConfig+0xd2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a18      	ldr	r2, [pc, #96]	@ (8006a54 <TIM_OC1_SetConfig+0x130>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d111      	bne.n	8006a1a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006a04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	693a      	ldr	r2, [r7, #16]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	621a      	str	r2, [r3, #32]
}
 8006a34:	bf00      	nop
 8006a36:	371c      	adds	r7, #28
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	40012c00 	.word	0x40012c00
 8006a44:	40013400 	.word	0x40013400
 8006a48:	40014000 	.word	0x40014000
 8006a4c:	40014400 	.word	0x40014400
 8006a50:	40014800 	.word	0x40014800
 8006a54:	40015000 	.word	0x40015000

08006a58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a1b      	ldr	r3, [r3, #32]
 8006a6c:	f023 0210 	bic.w	r2, r3, #16
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	021b      	lsls	r3, r3, #8
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f023 0320 	bic.w	r3, r3, #32
 8006aa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	011b      	lsls	r3, r3, #4
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a2c      	ldr	r2, [pc, #176]	@ (8006b68 <TIM_OC2_SetConfig+0x110>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d007      	beq.n	8006acc <TIM_OC2_SetConfig+0x74>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a2b      	ldr	r2, [pc, #172]	@ (8006b6c <TIM_OC2_SetConfig+0x114>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d003      	beq.n	8006acc <TIM_OC2_SetConfig+0x74>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a2a      	ldr	r2, [pc, #168]	@ (8006b70 <TIM_OC2_SetConfig+0x118>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d10d      	bne.n	8006ae8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	011b      	lsls	r3, r3, #4
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ae6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	4a1f      	ldr	r2, [pc, #124]	@ (8006b68 <TIM_OC2_SetConfig+0x110>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d013      	beq.n	8006b18 <TIM_OC2_SetConfig+0xc0>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a1e      	ldr	r2, [pc, #120]	@ (8006b6c <TIM_OC2_SetConfig+0x114>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d00f      	beq.n	8006b18 <TIM_OC2_SetConfig+0xc0>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4a1e      	ldr	r2, [pc, #120]	@ (8006b74 <TIM_OC2_SetConfig+0x11c>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d00b      	beq.n	8006b18 <TIM_OC2_SetConfig+0xc0>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a1d      	ldr	r2, [pc, #116]	@ (8006b78 <TIM_OC2_SetConfig+0x120>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d007      	beq.n	8006b18 <TIM_OC2_SetConfig+0xc0>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8006b7c <TIM_OC2_SetConfig+0x124>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d003      	beq.n	8006b18 <TIM_OC2_SetConfig+0xc0>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a17      	ldr	r2, [pc, #92]	@ (8006b70 <TIM_OC2_SetConfig+0x118>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d113      	bne.n	8006b40 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006b1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006b26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	695b      	ldr	r3, [r3, #20]
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	699b      	ldr	r3, [r3, #24]
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	621a      	str	r2, [r3, #32]
}
 8006b5a:	bf00      	nop
 8006b5c:	371c      	adds	r7, #28
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	40012c00 	.word	0x40012c00
 8006b6c:	40013400 	.word	0x40013400
 8006b70:	40015000 	.word	0x40015000
 8006b74:	40014000 	.word	0x40014000
 8006b78:	40014400 	.word	0x40014400
 8006b7c:	40014800 	.word	0x40014800

08006b80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f023 0303 	bic.w	r3, r3, #3
 8006bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	021b      	lsls	r3, r3, #8
 8006bd4:	697a      	ldr	r2, [r7, #20]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a2b      	ldr	r2, [pc, #172]	@ (8006c8c <TIM_OC3_SetConfig+0x10c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d007      	beq.n	8006bf2 <TIM_OC3_SetConfig+0x72>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a2a      	ldr	r2, [pc, #168]	@ (8006c90 <TIM_OC3_SetConfig+0x110>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d003      	beq.n	8006bf2 <TIM_OC3_SetConfig+0x72>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a29      	ldr	r2, [pc, #164]	@ (8006c94 <TIM_OC3_SetConfig+0x114>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d10d      	bne.n	8006c0e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006bf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	021b      	lsls	r3, r3, #8
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a1e      	ldr	r2, [pc, #120]	@ (8006c8c <TIM_OC3_SetConfig+0x10c>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d013      	beq.n	8006c3e <TIM_OC3_SetConfig+0xbe>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a1d      	ldr	r2, [pc, #116]	@ (8006c90 <TIM_OC3_SetConfig+0x110>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00f      	beq.n	8006c3e <TIM_OC3_SetConfig+0xbe>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a1d      	ldr	r2, [pc, #116]	@ (8006c98 <TIM_OC3_SetConfig+0x118>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d00b      	beq.n	8006c3e <TIM_OC3_SetConfig+0xbe>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a1c      	ldr	r2, [pc, #112]	@ (8006c9c <TIM_OC3_SetConfig+0x11c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d007      	beq.n	8006c3e <TIM_OC3_SetConfig+0xbe>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a1b      	ldr	r2, [pc, #108]	@ (8006ca0 <TIM_OC3_SetConfig+0x120>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d003      	beq.n	8006c3e <TIM_OC3_SetConfig+0xbe>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a16      	ldr	r2, [pc, #88]	@ (8006c94 <TIM_OC3_SetConfig+0x114>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d113      	bne.n	8006c66 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	011b      	lsls	r3, r3, #4
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	011b      	lsls	r3, r3, #4
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	621a      	str	r2, [r3, #32]
}
 8006c80:	bf00      	nop
 8006c82:	371c      	adds	r7, #28
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	40012c00 	.word	0x40012c00
 8006c90:	40013400 	.word	0x40013400
 8006c94:	40015000 	.word	0x40015000
 8006c98:	40014000 	.word	0x40014000
 8006c9c:	40014400 	.word	0x40014400
 8006ca0:	40014800 	.word	0x40014800

08006ca4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006cd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	021b      	lsls	r3, r3, #8
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006cf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	031b      	lsls	r3, r3, #12
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a2c      	ldr	r2, [pc, #176]	@ (8006db4 <TIM_OC4_SetConfig+0x110>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d007      	beq.n	8006d18 <TIM_OC4_SetConfig+0x74>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a2b      	ldr	r2, [pc, #172]	@ (8006db8 <TIM_OC4_SetConfig+0x114>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d003      	beq.n	8006d18 <TIM_OC4_SetConfig+0x74>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a2a      	ldr	r2, [pc, #168]	@ (8006dbc <TIM_OC4_SetConfig+0x118>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d10d      	bne.n	8006d34 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	031b      	lsls	r3, r3, #12
 8006d26:	697a      	ldr	r2, [r7, #20]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a1f      	ldr	r2, [pc, #124]	@ (8006db4 <TIM_OC4_SetConfig+0x110>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d013      	beq.n	8006d64 <TIM_OC4_SetConfig+0xc0>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a1e      	ldr	r2, [pc, #120]	@ (8006db8 <TIM_OC4_SetConfig+0x114>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d00f      	beq.n	8006d64 <TIM_OC4_SetConfig+0xc0>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a1e      	ldr	r2, [pc, #120]	@ (8006dc0 <TIM_OC4_SetConfig+0x11c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d00b      	beq.n	8006d64 <TIM_OC4_SetConfig+0xc0>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a1d      	ldr	r2, [pc, #116]	@ (8006dc4 <TIM_OC4_SetConfig+0x120>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d007      	beq.n	8006d64 <TIM_OC4_SetConfig+0xc0>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a1c      	ldr	r2, [pc, #112]	@ (8006dc8 <TIM_OC4_SetConfig+0x124>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d003      	beq.n	8006d64 <TIM_OC4_SetConfig+0xc0>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a17      	ldr	r2, [pc, #92]	@ (8006dbc <TIM_OC4_SetConfig+0x118>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d113      	bne.n	8006d8c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d6a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d72:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	019b      	lsls	r3, r3, #6
 8006d7a:	693a      	ldr	r2, [r7, #16]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	019b      	lsls	r3, r3, #6
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	621a      	str	r2, [r3, #32]
}
 8006da6:	bf00      	nop
 8006da8:	371c      	adds	r7, #28
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	40012c00 	.word	0x40012c00
 8006db8:	40013400 	.word	0x40013400
 8006dbc:	40015000 	.word	0x40015000
 8006dc0:	40014000 	.word	0x40014000
 8006dc4:	40014400 	.word	0x40014400
 8006dc8:	40014800 	.word	0x40014800

08006dcc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68fa      	ldr	r2, [r7, #12]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006e10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	041b      	lsls	r3, r3, #16
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a19      	ldr	r2, [pc, #100]	@ (8006e88 <TIM_OC5_SetConfig+0xbc>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d013      	beq.n	8006e4e <TIM_OC5_SetConfig+0x82>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a18      	ldr	r2, [pc, #96]	@ (8006e8c <TIM_OC5_SetConfig+0xc0>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d00f      	beq.n	8006e4e <TIM_OC5_SetConfig+0x82>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a17      	ldr	r2, [pc, #92]	@ (8006e90 <TIM_OC5_SetConfig+0xc4>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d00b      	beq.n	8006e4e <TIM_OC5_SetConfig+0x82>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a16      	ldr	r2, [pc, #88]	@ (8006e94 <TIM_OC5_SetConfig+0xc8>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d007      	beq.n	8006e4e <TIM_OC5_SetConfig+0x82>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a15      	ldr	r2, [pc, #84]	@ (8006e98 <TIM_OC5_SetConfig+0xcc>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d003      	beq.n	8006e4e <TIM_OC5_SetConfig+0x82>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a14      	ldr	r2, [pc, #80]	@ (8006e9c <TIM_OC5_SetConfig+0xd0>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d109      	bne.n	8006e62 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006e54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	021b      	lsls	r3, r3, #8
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685a      	ldr	r2, [r3, #4]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	621a      	str	r2, [r3, #32]
}
 8006e7c:	bf00      	nop
 8006e7e:	371c      	adds	r7, #28
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	40012c00 	.word	0x40012c00
 8006e8c:	40013400 	.word	0x40013400
 8006e90:	40014000 	.word	0x40014000
 8006e94:	40014400 	.word	0x40014400
 8006e98:	40014800 	.word	0x40014800
 8006e9c:	40015000 	.word	0x40015000

08006ea0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a1b      	ldr	r3, [r3, #32]
 8006eae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ece:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	021b      	lsls	r3, r3, #8
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ee6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	051b      	lsls	r3, r3, #20
 8006eee:	693a      	ldr	r2, [r7, #16]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a1a      	ldr	r2, [pc, #104]	@ (8006f60 <TIM_OC6_SetConfig+0xc0>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d013      	beq.n	8006f24 <TIM_OC6_SetConfig+0x84>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a19      	ldr	r2, [pc, #100]	@ (8006f64 <TIM_OC6_SetConfig+0xc4>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d00f      	beq.n	8006f24 <TIM_OC6_SetConfig+0x84>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a18      	ldr	r2, [pc, #96]	@ (8006f68 <TIM_OC6_SetConfig+0xc8>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d00b      	beq.n	8006f24 <TIM_OC6_SetConfig+0x84>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a17      	ldr	r2, [pc, #92]	@ (8006f6c <TIM_OC6_SetConfig+0xcc>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d007      	beq.n	8006f24 <TIM_OC6_SetConfig+0x84>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a16      	ldr	r2, [pc, #88]	@ (8006f70 <TIM_OC6_SetConfig+0xd0>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d003      	beq.n	8006f24 <TIM_OC6_SetConfig+0x84>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a15      	ldr	r2, [pc, #84]	@ (8006f74 <TIM_OC6_SetConfig+0xd4>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d109      	bne.n	8006f38 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	029b      	lsls	r3, r3, #10
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	685a      	ldr	r2, [r3, #4]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	621a      	str	r2, [r3, #32]
}
 8006f52:	bf00      	nop
 8006f54:	371c      	adds	r7, #28
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	40012c00 	.word	0x40012c00
 8006f64:	40013400 	.word	0x40013400
 8006f68:	40014000 	.word	0x40014000
 8006f6c:	40014400 	.word	0x40014400
 8006f70:	40014800 	.word	0x40014800
 8006f74:	40015000 	.word	0x40015000

08006f78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	f003 031f 	and.w	r3, r3, #31
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6a1a      	ldr	r2, [r3, #32]
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	43db      	mvns	r3, r3
 8006f9a:	401a      	ands	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a1a      	ldr	r2, [r3, #32]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	f003 031f 	and.w	r3, r3, #31
 8006faa:	6879      	ldr	r1, [r7, #4]
 8006fac:	fa01 f303 	lsl.w	r3, r1, r3
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	621a      	str	r2, [r3, #32]
}
 8006fb6:	bf00      	nop
 8006fb8:	371c      	adds	r7, #28
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
	...

08006fc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d101      	bne.n	8006fdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fd8:	2302      	movs	r3, #2
 8006fda:	e074      	b.n	80070c6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a34      	ldr	r2, [pc, #208]	@ (80070d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d009      	beq.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4a33      	ldr	r2, [pc, #204]	@ (80070d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d004      	beq.n	800701a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a31      	ldr	r2, [pc, #196]	@ (80070dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d108      	bne.n	800702c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007020:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	4313      	orrs	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007036:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a21      	ldr	r2, [pc, #132]	@ (80070d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d022      	beq.n	800709a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800705c:	d01d      	beq.n	800709a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a1f      	ldr	r2, [pc, #124]	@ (80070e0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d018      	beq.n	800709a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a1d      	ldr	r2, [pc, #116]	@ (80070e4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d013      	beq.n	800709a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a1c      	ldr	r2, [pc, #112]	@ (80070e8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d00e      	beq.n	800709a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a15      	ldr	r2, [pc, #84]	@ (80070d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d009      	beq.n	800709a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a18      	ldr	r2, [pc, #96]	@ (80070ec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d004      	beq.n	800709a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a11      	ldr	r2, [pc, #68]	@ (80070dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d10c      	bne.n	80070b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68ba      	ldr	r2, [r7, #8]
 80070b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	40012c00 	.word	0x40012c00
 80070d8:	40013400 	.word	0x40013400
 80070dc:	40015000 	.word	0x40015000
 80070e0:	40000400 	.word	0x40000400
 80070e4:	40000800 	.word	0x40000800
 80070e8:	40000c00 	.word	0x40000c00
 80070ec:	40014000 	.word	0x40014000

080070f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007104:	2b01      	cmp	r3, #1
 8007106:	d101      	bne.n	800710c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007108:	2302      	movs	r3, #2
 800710a:	e078      	b.n	80071fe <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	4313      	orrs	r3, r2
 8007120:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	4313      	orrs	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4313      	orrs	r3, r2
 800714a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	4313      	orrs	r3, r2
 8007158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	4313      	orrs	r3, r2
 8007166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007172:	4313      	orrs	r3, r2
 8007174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	041b      	lsls	r3, r3, #16
 8007182:	4313      	orrs	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	4313      	orrs	r3, r2
 8007192:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a1c      	ldr	r2, [pc, #112]	@ (800720c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d009      	beq.n	80071b2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a1b      	ldr	r2, [pc, #108]	@ (8007210 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d004      	beq.n	80071b2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a19      	ldr	r2, [pc, #100]	@ (8007214 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d11c      	bne.n	80071ec <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071bc:	051b      	lsls	r3, r3, #20
 80071be:	4313      	orrs	r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	6a1b      	ldr	r3, [r3, #32]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071da:	4313      	orrs	r3, r2
 80071dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e8:	4313      	orrs	r3, r2
 80071ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	40012c00 	.word	0x40012c00
 8007210:	40013400 	.word	0x40013400
 8007214:	40015000 	.word	0x40015000

08007218 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007248:	bf00      	nop
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e042      	b.n	800733c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d106      	bne.n	80072ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7fa fe27 	bl	8001f1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2224      	movs	r2, #36	@ 0x24
 80072d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f022 0201 	bic.w	r2, r2, #1
 80072e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d002      	beq.n	80072f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fe86 	bl	8008000 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fb87 	bl	8007a08 <UART_SetConfig>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d101      	bne.n	8007304 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e01b      	b.n	800733c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007312:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007322:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f042 0201 	orr.w	r2, r2, #1
 8007332:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 ff05 	bl	8008144 <UART_CheckIdleState>
 800733a:	4603      	mov	r3, r0
}
 800733c:	4618      	mov	r0, r3
 800733e:	3708      	adds	r7, #8
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b0ba      	sub	sp, #232	@ 0xe8
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800736a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800736e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007372:	4013      	ands	r3, r2
 8007374:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007378:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800737c:	2b00      	cmp	r3, #0
 800737e:	d11b      	bne.n	80073b8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007384:	f003 0320 	and.w	r3, r3, #32
 8007388:	2b00      	cmp	r3, #0
 800738a:	d015      	beq.n	80073b8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800738c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007390:	f003 0320 	and.w	r3, r3, #32
 8007394:	2b00      	cmp	r3, #0
 8007396:	d105      	bne.n	80073a4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007398:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800739c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d009      	beq.n	80073b8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f000 8300 	beq.w	80079ae <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	4798      	blx	r3
      }
      return;
 80073b6:	e2fa      	b.n	80079ae <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80073b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f000 8123 	beq.w	8007608 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80073c2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80073c6:	4b8d      	ldr	r3, [pc, #564]	@ (80075fc <HAL_UART_IRQHandler+0x2b8>)
 80073c8:	4013      	ands	r3, r2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d106      	bne.n	80073dc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80073ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80073d2:	4b8b      	ldr	r3, [pc, #556]	@ (8007600 <HAL_UART_IRQHandler+0x2bc>)
 80073d4:	4013      	ands	r3, r2
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 8116 	beq.w	8007608 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d011      	beq.n	800740c <HAL_UART_IRQHandler+0xc8>
 80073e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00b      	beq.n	800740c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2201      	movs	r2, #1
 80073fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007402:	f043 0201 	orr.w	r2, r3, #1
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800740c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b00      	cmp	r3, #0
 8007416:	d011      	beq.n	800743c <HAL_UART_IRQHandler+0xf8>
 8007418:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00b      	beq.n	800743c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2202      	movs	r2, #2
 800742a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007432:	f043 0204 	orr.w	r2, r3, #4
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800743c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007440:	f003 0304 	and.w	r3, r3, #4
 8007444:	2b00      	cmp	r3, #0
 8007446:	d011      	beq.n	800746c <HAL_UART_IRQHandler+0x128>
 8007448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00b      	beq.n	800746c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2204      	movs	r2, #4
 800745a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007462:	f043 0202 	orr.w	r2, r3, #2
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800746c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007470:	f003 0308 	and.w	r3, r3, #8
 8007474:	2b00      	cmp	r3, #0
 8007476:	d017      	beq.n	80074a8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800747c:	f003 0320 	and.w	r3, r3, #32
 8007480:	2b00      	cmp	r3, #0
 8007482:	d105      	bne.n	8007490 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007484:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007488:	4b5c      	ldr	r3, [pc, #368]	@ (80075fc <HAL_UART_IRQHandler+0x2b8>)
 800748a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00b      	beq.n	80074a8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2208      	movs	r2, #8
 8007496:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800749e:	f043 0208 	orr.w	r2, r3, #8
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80074a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d012      	beq.n	80074da <HAL_UART_IRQHandler+0x196>
 80074b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074b8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00c      	beq.n	80074da <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80074c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074d0:	f043 0220 	orr.w	r2, r3, #32
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 8266 	beq.w	80079b2 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074ea:	f003 0320 	and.w	r3, r3, #32
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d013      	beq.n	800751a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074f6:	f003 0320 	and.w	r3, r3, #32
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d105      	bne.n	800750a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80074fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d007      	beq.n	800751a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800750e:	2b00      	cmp	r3, #0
 8007510:	d003      	beq.n	800751a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007520:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	689b      	ldr	r3, [r3, #8]
 800752a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800752e:	2b40      	cmp	r3, #64	@ 0x40
 8007530:	d005      	beq.n	800753e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007532:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007536:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800753a:	2b00      	cmp	r3, #0
 800753c:	d054      	beq.n	80075e8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 ff17 	bl	8008372 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800754e:	2b40      	cmp	r3, #64	@ 0x40
 8007550:	d146      	bne.n	80075e0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3308      	adds	r3, #8
 8007558:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007560:	e853 3f00 	ldrex	r3, [r3]
 8007564:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007568:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800756c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007570:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	3308      	adds	r3, #8
 800757a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800757e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007582:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007586:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800758a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800758e:	e841 2300 	strex	r3, r2, [r1]
 8007592:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007596:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1d9      	bne.n	8007552 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d017      	beq.n	80075d8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075ae:	4a15      	ldr	r2, [pc, #84]	@ (8007604 <HAL_UART_IRQHandler+0x2c0>)
 80075b0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7fa ffbb 	bl	8002534 <HAL_DMA_Abort_IT>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d019      	beq.n	80075f8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80075d2:	4610      	mov	r0, r2
 80075d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075d6:	e00f      	b.n	80075f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 f9ff 	bl	80079dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075de:	e00b      	b.n	80075f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f9fb 	bl	80079dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e6:	e007      	b.n	80075f8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f000 f9f7 	bl	80079dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80075f6:	e1dc      	b.n	80079b2 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f8:	bf00      	nop
    return;
 80075fa:	e1da      	b.n	80079b2 <HAL_UART_IRQHandler+0x66e>
 80075fc:	10000001 	.word	0x10000001
 8007600:	04000120 	.word	0x04000120
 8007604:	0800843f 	.word	0x0800843f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800760c:	2b01      	cmp	r3, #1
 800760e:	f040 8170 	bne.w	80078f2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007616:	f003 0310 	and.w	r3, r3, #16
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 8169 	beq.w	80078f2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007624:	f003 0310 	and.w	r3, r3, #16
 8007628:	2b00      	cmp	r3, #0
 800762a:	f000 8162 	beq.w	80078f2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2210      	movs	r2, #16
 8007634:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007640:	2b40      	cmp	r3, #64	@ 0x40
 8007642:	f040 80d8 	bne.w	80077f6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007654:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 80af 	beq.w	80077bc <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007664:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007668:	429a      	cmp	r2, r3
 800766a:	f080 80a7 	bcs.w	80077bc <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007674:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0320 	and.w	r3, r3, #32
 8007686:	2b00      	cmp	r3, #0
 8007688:	f040 8087 	bne.w	800779a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007694:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80076a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80076a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	461a      	mov	r2, r3
 80076b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80076b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80076ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80076c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80076c6:	e841 2300 	strex	r3, r2, [r1]
 80076ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80076ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1da      	bne.n	800768c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3308      	adds	r3, #8
 80076dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076e0:	e853 3f00 	ldrex	r3, [r3]
 80076e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80076e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076e8:	f023 0301 	bic.w	r3, r3, #1
 80076ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	3308      	adds	r3, #8
 80076f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80076fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80076fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007700:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007702:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007706:	e841 2300 	strex	r3, r2, [r1]
 800770a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800770c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1e1      	bne.n	80076d6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	3308      	adds	r3, #8
 8007718:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800771c:	e853 3f00 	ldrex	r3, [r3]
 8007720:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007722:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007724:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007728:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3308      	adds	r3, #8
 8007732:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007736:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007738:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800773c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800773e:	e841 2300 	strex	r3, r2, [r1]
 8007742:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007744:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1e3      	bne.n	8007712 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2220      	movs	r2, #32
 800774e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007760:	e853 3f00 	ldrex	r3, [r3]
 8007764:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007768:	f023 0310 	bic.w	r3, r3, #16
 800776c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	461a      	mov	r2, r3
 8007776:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800777a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800777c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007780:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007782:	e841 2300 	strex	r3, r2, [r1]
 8007786:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007788:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1e4      	bne.n	8007758 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007794:	4618      	mov	r0, r3
 8007796:	f7fa fe74 	bl	8002482 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2202      	movs	r2, #2
 800779e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	4619      	mov	r1, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f91b 	bl	80079f0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80077ba:	e0fc      	b.n	80079b6 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077c6:	429a      	cmp	r2, r3
 80077c8:	f040 80f5 	bne.w	80079b6 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0320 	and.w	r3, r3, #32
 80077da:	2b20      	cmp	r3, #32
 80077dc:	f040 80eb 	bne.w	80079b6 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2202      	movs	r2, #2
 80077e4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80077ec:	4619      	mov	r1, r3
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f8fe 	bl	80079f0 <HAL_UARTEx_RxEventCallback>
      return;
 80077f4:	e0df      	b.n	80079b6 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007802:	b29b      	uxth	r3, r3
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007810:	b29b      	uxth	r3, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	f000 80d1 	beq.w	80079ba <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8007818:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 80cc 	beq.w	80079ba <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800782a:	e853 3f00 	ldrex	r3, [r3]
 800782e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007832:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007836:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	461a      	mov	r2, r3
 8007840:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007844:	647b      	str	r3, [r7, #68]	@ 0x44
 8007846:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007848:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800784a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800784c:	e841 2300 	strex	r3, r2, [r1]
 8007850:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1e4      	bne.n	8007822 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3308      	adds	r3, #8
 800785e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007862:	e853 3f00 	ldrex	r3, [r3]
 8007866:	623b      	str	r3, [r7, #32]
   return(result);
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800786e:	f023 0301 	bic.w	r3, r3, #1
 8007872:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3308      	adds	r3, #8
 800787c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007880:	633a      	str	r2, [r7, #48]	@ 0x30
 8007882:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007884:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007888:	e841 2300 	strex	r3, r2, [r1]
 800788c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800788e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007890:	2b00      	cmp	r3, #0
 8007892:	d1e1      	bne.n	8007858 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2220      	movs	r2, #32
 8007898:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	e853 3f00 	ldrex	r3, [r3]
 80078b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f023 0310 	bic.w	r3, r3, #16
 80078bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	461a      	mov	r2, r3
 80078c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80078ca:	61fb      	str	r3, [r7, #28]
 80078cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ce:	69b9      	ldr	r1, [r7, #24]
 80078d0:	69fa      	ldr	r2, [r7, #28]
 80078d2:	e841 2300 	strex	r3, r2, [r1]
 80078d6:	617b      	str	r3, [r7, #20]
   return(result);
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1e4      	bne.n	80078a8 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2202      	movs	r2, #2
 80078e2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078e8:	4619      	mov	r1, r3
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f880 	bl	80079f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078f0:	e063      	b.n	80079ba <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80078f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00e      	beq.n	800791c <HAL_UART_IRQHandler+0x5d8>
 80078fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d008      	beq.n	800791c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007912:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fdd3 	bl	80084c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800791a:	e051      	b.n	80079c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800791c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007924:	2b00      	cmp	r3, #0
 8007926:	d014      	beq.n	8007952 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800792c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007930:	2b00      	cmp	r3, #0
 8007932:	d105      	bne.n	8007940 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007934:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007938:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d008      	beq.n	8007952 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007944:	2b00      	cmp	r3, #0
 8007946:	d03a      	beq.n	80079be <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	4798      	blx	r3
    }
    return;
 8007950:	e035      	b.n	80079be <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800795a:	2b00      	cmp	r3, #0
 800795c:	d009      	beq.n	8007972 <HAL_UART_IRQHandler+0x62e>
 800795e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007966:	2b00      	cmp	r3, #0
 8007968:	d003      	beq.n	8007972 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fd7d 	bl	800846a <UART_EndTransmit_IT>
    return;
 8007970:	e026      	b.n	80079c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007976:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800797a:	2b00      	cmp	r3, #0
 800797c:	d009      	beq.n	8007992 <HAL_UART_IRQHandler+0x64e>
 800797e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007982:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007986:	2b00      	cmp	r3, #0
 8007988:	d003      	beq.n	8007992 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f000 fdac 	bl	80084e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007990:	e016      	b.n	80079c0 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007996:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d010      	beq.n	80079c0 <HAL_UART_IRQHandler+0x67c>
 800799e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	da0c      	bge.n	80079c0 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f000 fd94 	bl	80084d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079ac:	e008      	b.n	80079c0 <HAL_UART_IRQHandler+0x67c>
      return;
 80079ae:	bf00      	nop
 80079b0:	e006      	b.n	80079c0 <HAL_UART_IRQHandler+0x67c>
    return;
 80079b2:	bf00      	nop
 80079b4:	e004      	b.n	80079c0 <HAL_UART_IRQHandler+0x67c>
      return;
 80079b6:	bf00      	nop
 80079b8:	e002      	b.n	80079c0 <HAL_UART_IRQHandler+0x67c>
      return;
 80079ba:	bf00      	nop
 80079bc:	e000      	b.n	80079c0 <HAL_UART_IRQHandler+0x67c>
    return;
 80079be:	bf00      	nop
  }
}
 80079c0:	37e8      	adds	r7, #232	@ 0xe8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop

080079c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	460b      	mov	r3, r1
 80079fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a0c:	b08c      	sub	sp, #48	@ 0x30
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a12:	2300      	movs	r3, #0
 8007a14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	689a      	ldr	r2, [r3, #8]
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	431a      	orrs	r2, r3
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	431a      	orrs	r2, r3
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	4baa      	ldr	r3, [pc, #680]	@ (8007ce0 <UART_SetConfig+0x2d8>)
 8007a38:	4013      	ands	r3, r2
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	6812      	ldr	r2, [r2, #0]
 8007a3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a40:	430b      	orrs	r3, r1
 8007a42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	68da      	ldr	r2, [r3, #12]
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	430a      	orrs	r2, r1
 8007a58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a9f      	ldr	r2, [pc, #636]	@ (8007ce4 <UART_SetConfig+0x2dc>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d004      	beq.n	8007a74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	6a1b      	ldr	r3, [r3, #32]
 8007a6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a70:	4313      	orrs	r3, r2
 8007a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007a7e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007a82:	697a      	ldr	r2, [r7, #20]
 8007a84:	6812      	ldr	r2, [r2, #0]
 8007a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a88:	430b      	orrs	r3, r1
 8007a8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a92:	f023 010f 	bic.w	r1, r3, #15
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a90      	ldr	r2, [pc, #576]	@ (8007ce8 <UART_SetConfig+0x2e0>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d125      	bne.n	8007af8 <UART_SetConfig+0xf0>
 8007aac:	4b8f      	ldr	r3, [pc, #572]	@ (8007cec <UART_SetConfig+0x2e4>)
 8007aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ab2:	f003 0303 	and.w	r3, r3, #3
 8007ab6:	2b03      	cmp	r3, #3
 8007ab8:	d81a      	bhi.n	8007af0 <UART_SetConfig+0xe8>
 8007aba:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac0 <UART_SetConfig+0xb8>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007ad1 	.word	0x08007ad1
 8007ac4:	08007ae1 	.word	0x08007ae1
 8007ac8:	08007ad9 	.word	0x08007ad9
 8007acc:	08007ae9 	.word	0x08007ae9
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ad6:	e116      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007ad8:	2302      	movs	r3, #2
 8007ada:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ade:	e112      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007ae0:	2304      	movs	r3, #4
 8007ae2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ae6:	e10e      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007ae8:	2308      	movs	r3, #8
 8007aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007aee:	e10a      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007af0:	2310      	movs	r3, #16
 8007af2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007af6:	e106      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a7c      	ldr	r2, [pc, #496]	@ (8007cf0 <UART_SetConfig+0x2e8>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d138      	bne.n	8007b74 <UART_SetConfig+0x16c>
 8007b02:	4b7a      	ldr	r3, [pc, #488]	@ (8007cec <UART_SetConfig+0x2e4>)
 8007b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b08:	f003 030c 	and.w	r3, r3, #12
 8007b0c:	2b0c      	cmp	r3, #12
 8007b0e:	d82d      	bhi.n	8007b6c <UART_SetConfig+0x164>
 8007b10:	a201      	add	r2, pc, #4	@ (adr r2, 8007b18 <UART_SetConfig+0x110>)
 8007b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b16:	bf00      	nop
 8007b18:	08007b4d 	.word	0x08007b4d
 8007b1c:	08007b6d 	.word	0x08007b6d
 8007b20:	08007b6d 	.word	0x08007b6d
 8007b24:	08007b6d 	.word	0x08007b6d
 8007b28:	08007b5d 	.word	0x08007b5d
 8007b2c:	08007b6d 	.word	0x08007b6d
 8007b30:	08007b6d 	.word	0x08007b6d
 8007b34:	08007b6d 	.word	0x08007b6d
 8007b38:	08007b55 	.word	0x08007b55
 8007b3c:	08007b6d 	.word	0x08007b6d
 8007b40:	08007b6d 	.word	0x08007b6d
 8007b44:	08007b6d 	.word	0x08007b6d
 8007b48:	08007b65 	.word	0x08007b65
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b52:	e0d8      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007b54:	2302      	movs	r3, #2
 8007b56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b5a:	e0d4      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007b5c:	2304      	movs	r3, #4
 8007b5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b62:	e0d0      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007b64:	2308      	movs	r3, #8
 8007b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b6a:	e0cc      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007b6c:	2310      	movs	r3, #16
 8007b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007b72:	e0c8      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a5e      	ldr	r2, [pc, #376]	@ (8007cf4 <UART_SetConfig+0x2ec>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d125      	bne.n	8007bca <UART_SetConfig+0x1c2>
 8007b7e:	4b5b      	ldr	r3, [pc, #364]	@ (8007cec <UART_SetConfig+0x2e4>)
 8007b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b84:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007b88:	2b30      	cmp	r3, #48	@ 0x30
 8007b8a:	d016      	beq.n	8007bba <UART_SetConfig+0x1b2>
 8007b8c:	2b30      	cmp	r3, #48	@ 0x30
 8007b8e:	d818      	bhi.n	8007bc2 <UART_SetConfig+0x1ba>
 8007b90:	2b20      	cmp	r3, #32
 8007b92:	d00a      	beq.n	8007baa <UART_SetConfig+0x1a2>
 8007b94:	2b20      	cmp	r3, #32
 8007b96:	d814      	bhi.n	8007bc2 <UART_SetConfig+0x1ba>
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d002      	beq.n	8007ba2 <UART_SetConfig+0x19a>
 8007b9c:	2b10      	cmp	r3, #16
 8007b9e:	d008      	beq.n	8007bb2 <UART_SetConfig+0x1aa>
 8007ba0:	e00f      	b.n	8007bc2 <UART_SetConfig+0x1ba>
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ba8:	e0ad      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007baa:	2302      	movs	r3, #2
 8007bac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bb0:	e0a9      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007bb2:	2304      	movs	r3, #4
 8007bb4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bb8:	e0a5      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007bba:	2308      	movs	r3, #8
 8007bbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bc0:	e0a1      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007bc2:	2310      	movs	r3, #16
 8007bc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bc8:	e09d      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a4a      	ldr	r2, [pc, #296]	@ (8007cf8 <UART_SetConfig+0x2f0>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d125      	bne.n	8007c20 <UART_SetConfig+0x218>
 8007bd4:	4b45      	ldr	r3, [pc, #276]	@ (8007cec <UART_SetConfig+0x2e4>)
 8007bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bda:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007bde:	2bc0      	cmp	r3, #192	@ 0xc0
 8007be0:	d016      	beq.n	8007c10 <UART_SetConfig+0x208>
 8007be2:	2bc0      	cmp	r3, #192	@ 0xc0
 8007be4:	d818      	bhi.n	8007c18 <UART_SetConfig+0x210>
 8007be6:	2b80      	cmp	r3, #128	@ 0x80
 8007be8:	d00a      	beq.n	8007c00 <UART_SetConfig+0x1f8>
 8007bea:	2b80      	cmp	r3, #128	@ 0x80
 8007bec:	d814      	bhi.n	8007c18 <UART_SetConfig+0x210>
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d002      	beq.n	8007bf8 <UART_SetConfig+0x1f0>
 8007bf2:	2b40      	cmp	r3, #64	@ 0x40
 8007bf4:	d008      	beq.n	8007c08 <UART_SetConfig+0x200>
 8007bf6:	e00f      	b.n	8007c18 <UART_SetConfig+0x210>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007bfe:	e082      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007c00:	2302      	movs	r3, #2
 8007c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c06:	e07e      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007c08:	2304      	movs	r3, #4
 8007c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c0e:	e07a      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007c10:	2308      	movs	r3, #8
 8007c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c16:	e076      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007c18:	2310      	movs	r3, #16
 8007c1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c1e:	e072      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a35      	ldr	r2, [pc, #212]	@ (8007cfc <UART_SetConfig+0x2f4>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d12a      	bne.n	8007c80 <UART_SetConfig+0x278>
 8007c2a:	4b30      	ldr	r3, [pc, #192]	@ (8007cec <UART_SetConfig+0x2e4>)
 8007c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c30:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c38:	d01a      	beq.n	8007c70 <UART_SetConfig+0x268>
 8007c3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c3e:	d81b      	bhi.n	8007c78 <UART_SetConfig+0x270>
 8007c40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c44:	d00c      	beq.n	8007c60 <UART_SetConfig+0x258>
 8007c46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c4a:	d815      	bhi.n	8007c78 <UART_SetConfig+0x270>
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d003      	beq.n	8007c58 <UART_SetConfig+0x250>
 8007c50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c54:	d008      	beq.n	8007c68 <UART_SetConfig+0x260>
 8007c56:	e00f      	b.n	8007c78 <UART_SetConfig+0x270>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c5e:	e052      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007c60:	2302      	movs	r3, #2
 8007c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c66:	e04e      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007c68:	2304      	movs	r3, #4
 8007c6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c6e:	e04a      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007c70:	2308      	movs	r3, #8
 8007c72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c76:	e046      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007c78:	2310      	movs	r3, #16
 8007c7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007c7e:	e042      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a17      	ldr	r2, [pc, #92]	@ (8007ce4 <UART_SetConfig+0x2dc>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d13a      	bne.n	8007d00 <UART_SetConfig+0x2f8>
 8007c8a:	4b18      	ldr	r3, [pc, #96]	@ (8007cec <UART_SetConfig+0x2e4>)
 8007c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007c94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c98:	d01a      	beq.n	8007cd0 <UART_SetConfig+0x2c8>
 8007c9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007c9e:	d81b      	bhi.n	8007cd8 <UART_SetConfig+0x2d0>
 8007ca0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ca4:	d00c      	beq.n	8007cc0 <UART_SetConfig+0x2b8>
 8007ca6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007caa:	d815      	bhi.n	8007cd8 <UART_SetConfig+0x2d0>
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d003      	beq.n	8007cb8 <UART_SetConfig+0x2b0>
 8007cb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007cb4:	d008      	beq.n	8007cc8 <UART_SetConfig+0x2c0>
 8007cb6:	e00f      	b.n	8007cd8 <UART_SetConfig+0x2d0>
 8007cb8:	2300      	movs	r3, #0
 8007cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cbe:	e022      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cc6:	e01e      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007cc8:	2304      	movs	r3, #4
 8007cca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cce:	e01a      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007cd0:	2308      	movs	r3, #8
 8007cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cd6:	e016      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007cd8:	2310      	movs	r3, #16
 8007cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007cde:	e012      	b.n	8007d06 <UART_SetConfig+0x2fe>
 8007ce0:	cfff69f3 	.word	0xcfff69f3
 8007ce4:	40008000 	.word	0x40008000
 8007ce8:	40013800 	.word	0x40013800
 8007cec:	40021000 	.word	0x40021000
 8007cf0:	40004400 	.word	0x40004400
 8007cf4:	40004800 	.word	0x40004800
 8007cf8:	40004c00 	.word	0x40004c00
 8007cfc:	40005000 	.word	0x40005000
 8007d00:	2310      	movs	r3, #16
 8007d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4aae      	ldr	r2, [pc, #696]	@ (8007fc4 <UART_SetConfig+0x5bc>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	f040 8097 	bne.w	8007e40 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007d16:	2b08      	cmp	r3, #8
 8007d18:	d823      	bhi.n	8007d62 <UART_SetConfig+0x35a>
 8007d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d20 <UART_SetConfig+0x318>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007d45 	.word	0x08007d45
 8007d24:	08007d63 	.word	0x08007d63
 8007d28:	08007d4d 	.word	0x08007d4d
 8007d2c:	08007d63 	.word	0x08007d63
 8007d30:	08007d53 	.word	0x08007d53
 8007d34:	08007d63 	.word	0x08007d63
 8007d38:	08007d63 	.word	0x08007d63
 8007d3c:	08007d63 	.word	0x08007d63
 8007d40:	08007d5b 	.word	0x08007d5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d44:	f7fd fd88 	bl	8005858 <HAL_RCC_GetPCLK1Freq>
 8007d48:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d4a:	e010      	b.n	8007d6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d4c:	4b9e      	ldr	r3, [pc, #632]	@ (8007fc8 <UART_SetConfig+0x5c0>)
 8007d4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d50:	e00d      	b.n	8007d6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d52:	f7fd fd15 	bl	8005780 <HAL_RCC_GetSysClockFreq>
 8007d56:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007d58:	e009      	b.n	8007d6e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007d60:	e005      	b.n	8007d6e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007d6c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 8130 	beq.w	8007fd6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d7a:	4a94      	ldr	r2, [pc, #592]	@ (8007fcc <UART_SetConfig+0x5c4>)
 8007d7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d80:	461a      	mov	r2, r3
 8007d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d84:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d88:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	685a      	ldr	r2, [r3, #4]
 8007d8e:	4613      	mov	r3, r2
 8007d90:	005b      	lsls	r3, r3, #1
 8007d92:	4413      	add	r3, r2
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d305      	bcc.n	8007da6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007da0:	69ba      	ldr	r2, [r7, #24]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d903      	bls.n	8007dae <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007da6:	2301      	movs	r3, #1
 8007da8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007dac:	e113      	b.n	8007fd6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db0:	2200      	movs	r2, #0
 8007db2:	60bb      	str	r3, [r7, #8]
 8007db4:	60fa      	str	r2, [r7, #12]
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dba:	4a84      	ldr	r2, [pc, #528]	@ (8007fcc <UART_SetConfig+0x5c4>)
 8007dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	603b      	str	r3, [r7, #0]
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007dcc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007dd0:	f7f8 fa22 	bl	8000218 <__aeabi_uldivmod>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	4610      	mov	r0, r2
 8007dda:	4619      	mov	r1, r3
 8007ddc:	f04f 0200 	mov.w	r2, #0
 8007de0:	f04f 0300 	mov.w	r3, #0
 8007de4:	020b      	lsls	r3, r1, #8
 8007de6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007dea:	0202      	lsls	r2, r0, #8
 8007dec:	6979      	ldr	r1, [r7, #20]
 8007dee:	6849      	ldr	r1, [r1, #4]
 8007df0:	0849      	lsrs	r1, r1, #1
 8007df2:	2000      	movs	r0, #0
 8007df4:	460c      	mov	r4, r1
 8007df6:	4605      	mov	r5, r0
 8007df8:	eb12 0804 	adds.w	r8, r2, r4
 8007dfc:	eb43 0905 	adc.w	r9, r3, r5
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	469a      	mov	sl, r3
 8007e08:	4693      	mov	fp, r2
 8007e0a:	4652      	mov	r2, sl
 8007e0c:	465b      	mov	r3, fp
 8007e0e:	4640      	mov	r0, r8
 8007e10:	4649      	mov	r1, r9
 8007e12:	f7f8 fa01 	bl	8000218 <__aeabi_uldivmod>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007e24:	d308      	bcc.n	8007e38 <UART_SetConfig+0x430>
 8007e26:	6a3b      	ldr	r3, [r7, #32]
 8007e28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e2c:	d204      	bcs.n	8007e38 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	6a3a      	ldr	r2, [r7, #32]
 8007e34:	60da      	str	r2, [r3, #12]
 8007e36:	e0ce      	b.n	8007fd6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007e3e:	e0ca      	b.n	8007fd6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	69db      	ldr	r3, [r3, #28]
 8007e44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e48:	d166      	bne.n	8007f18 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007e4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e4e:	2b08      	cmp	r3, #8
 8007e50:	d827      	bhi.n	8007ea2 <UART_SetConfig+0x49a>
 8007e52:	a201      	add	r2, pc, #4	@ (adr r2, 8007e58 <UART_SetConfig+0x450>)
 8007e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e58:	08007e7d 	.word	0x08007e7d
 8007e5c:	08007e85 	.word	0x08007e85
 8007e60:	08007e8d 	.word	0x08007e8d
 8007e64:	08007ea3 	.word	0x08007ea3
 8007e68:	08007e93 	.word	0x08007e93
 8007e6c:	08007ea3 	.word	0x08007ea3
 8007e70:	08007ea3 	.word	0x08007ea3
 8007e74:	08007ea3 	.word	0x08007ea3
 8007e78:	08007e9b 	.word	0x08007e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e7c:	f7fd fcec 	bl	8005858 <HAL_RCC_GetPCLK1Freq>
 8007e80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e82:	e014      	b.n	8007eae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e84:	f7fd fcfe 	bl	8005884 <HAL_RCC_GetPCLK2Freq>
 8007e88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e8a:	e010      	b.n	8007eae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e8c:	4b4e      	ldr	r3, [pc, #312]	@ (8007fc8 <UART_SetConfig+0x5c0>)
 8007e8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007e90:	e00d      	b.n	8007eae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e92:	f7fd fc75 	bl	8005780 <HAL_RCC_GetSysClockFreq>
 8007e96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007e98:	e009      	b.n	8007eae <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007ea0:	e005      	b.n	8007eae <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007eac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f000 8090 	beq.w	8007fd6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eba:	4a44      	ldr	r2, [pc, #272]	@ (8007fcc <UART_SetConfig+0x5c4>)
 8007ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ec8:	005a      	lsls	r2, r3, #1
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	085b      	lsrs	r3, r3, #1
 8007ed0:	441a      	add	r2, r3
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007edc:	6a3b      	ldr	r3, [r7, #32]
 8007ede:	2b0f      	cmp	r3, #15
 8007ee0:	d916      	bls.n	8007f10 <UART_SetConfig+0x508>
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ee8:	d212      	bcs.n	8007f10 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007eea:	6a3b      	ldr	r3, [r7, #32]
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	f023 030f 	bic.w	r3, r3, #15
 8007ef2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
 8007ef6:	085b      	lsrs	r3, r3, #1
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	f003 0307 	and.w	r3, r3, #7
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	8bfb      	ldrh	r3, [r7, #30]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	8bfa      	ldrh	r2, [r7, #30]
 8007f0c:	60da      	str	r2, [r3, #12]
 8007f0e:	e062      	b.n	8007fd6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007f16:	e05e      	b.n	8007fd6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f18:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007f1c:	2b08      	cmp	r3, #8
 8007f1e:	d828      	bhi.n	8007f72 <UART_SetConfig+0x56a>
 8007f20:	a201      	add	r2, pc, #4	@ (adr r2, 8007f28 <UART_SetConfig+0x520>)
 8007f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f26:	bf00      	nop
 8007f28:	08007f4d 	.word	0x08007f4d
 8007f2c:	08007f55 	.word	0x08007f55
 8007f30:	08007f5d 	.word	0x08007f5d
 8007f34:	08007f73 	.word	0x08007f73
 8007f38:	08007f63 	.word	0x08007f63
 8007f3c:	08007f73 	.word	0x08007f73
 8007f40:	08007f73 	.word	0x08007f73
 8007f44:	08007f73 	.word	0x08007f73
 8007f48:	08007f6b 	.word	0x08007f6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f4c:	f7fd fc84 	bl	8005858 <HAL_RCC_GetPCLK1Freq>
 8007f50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f52:	e014      	b.n	8007f7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f54:	f7fd fc96 	bl	8005884 <HAL_RCC_GetPCLK2Freq>
 8007f58:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f5a:	e010      	b.n	8007f7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8007fc8 <UART_SetConfig+0x5c0>)
 8007f5e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f60:	e00d      	b.n	8007f7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f62:	f7fd fc0d 	bl	8005780 <HAL_RCC_GetSysClockFreq>
 8007f66:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007f68:	e009      	b.n	8007f7e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007f70:	e005      	b.n	8007f7e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007f72:	2300      	movs	r3, #0
 8007f74:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007f7c:	bf00      	nop
    }

    if (pclk != 0U)
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d028      	beq.n	8007fd6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f88:	4a10      	ldr	r2, [pc, #64]	@ (8007fcc <UART_SetConfig+0x5c4>)
 8007f8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f8e:	461a      	mov	r2, r3
 8007f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f92:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	085b      	lsrs	r3, r3, #1
 8007f9c:	441a      	add	r2, r3
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fa6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fa8:	6a3b      	ldr	r3, [r7, #32]
 8007faa:	2b0f      	cmp	r3, #15
 8007fac:	d910      	bls.n	8007fd0 <UART_SetConfig+0x5c8>
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fb4:	d20c      	bcs.n	8007fd0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	b29a      	uxth	r2, r3
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	60da      	str	r2, [r3, #12]
 8007fc0:	e009      	b.n	8007fd6 <UART_SetConfig+0x5ce>
 8007fc2:	bf00      	nop
 8007fc4:	40008000 	.word	0x40008000
 8007fc8:	00f42400 	.word	0x00f42400
 8007fcc:	0800d1a4 	.word	0x0800d1a4
      }
      else
      {
        ret = HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	2201      	movs	r2, #1
 8007fda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8007ff2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3730      	adds	r7, #48	@ 0x30
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008000 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800800c:	f003 0308 	and.w	r3, r3, #8
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00a      	beq.n	800802a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	430a      	orrs	r2, r1
 8008028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00a      	beq.n	800804c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	430a      	orrs	r2, r1
 800804a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008050:	f003 0302 	and.w	r3, r3, #2
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00a      	beq.n	800806e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	430a      	orrs	r2, r1
 800806c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008072:	f003 0304 	and.w	r3, r3, #4
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00a      	beq.n	8008090 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	430a      	orrs	r2, r1
 800808e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008094:	f003 0310 	and.w	r3, r3, #16
 8008098:	2b00      	cmp	r3, #0
 800809a:	d00a      	beq.n	80080b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	430a      	orrs	r2, r1
 80080b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b6:	f003 0320 	and.w	r3, r3, #32
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d00a      	beq.n	80080d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	430a      	orrs	r2, r1
 80080d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d01a      	beq.n	8008116 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	430a      	orrs	r2, r1
 80080f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80080fe:	d10a      	bne.n	8008116 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	430a      	orrs	r2, r1
 8008114:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800811a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00a      	beq.n	8008138 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	430a      	orrs	r2, r1
 8008136:	605a      	str	r2, [r3, #4]
  }
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b098      	sub	sp, #96	@ 0x60
 8008148:	af02      	add	r7, sp, #8
 800814a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008154:	f7fa f858 	bl	8002208 <HAL_GetTick>
 8008158:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0308 	and.w	r3, r3, #8
 8008164:	2b08      	cmp	r3, #8
 8008166:	d12f      	bne.n	80081c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008168:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800816c:	9300      	str	r3, [sp, #0]
 800816e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008170:	2200      	movs	r2, #0
 8008172:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f88e 	bl	8008298 <UART_WaitOnFlagUntilTimeout>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d022      	beq.n	80081c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800818a:	e853 3f00 	ldrex	r3, [r3]
 800818e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008192:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008196:	653b      	str	r3, [r7, #80]	@ 0x50
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	461a      	mov	r2, r3
 800819e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80081a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081a8:	e841 2300 	strex	r3, r2, [r1]
 80081ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80081ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1e6      	bne.n	8008182 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2220      	movs	r2, #32
 80081b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e063      	b.n	8008290 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f003 0304 	and.w	r3, r3, #4
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	d149      	bne.n	800826a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081d6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081de:	2200      	movs	r2, #0
 80081e0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 f857 	bl	8008298 <UART_WaitOnFlagUntilTimeout>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d03c      	beq.n	800826a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f8:	e853 3f00 	ldrex	r3, [r3]
 80081fc:	623b      	str	r3, [r7, #32]
   return(result);
 80081fe:	6a3b      	ldr	r3, [r7, #32]
 8008200:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008204:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	461a      	mov	r2, r3
 800820c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800820e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008210:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008212:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008216:	e841 2300 	strex	r3, r2, [r1]
 800821a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800821c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1e6      	bne.n	80081f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	3308      	adds	r3, #8
 8008228:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	e853 3f00 	ldrex	r3, [r3]
 8008230:	60fb      	str	r3, [r7, #12]
   return(result);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f023 0301 	bic.w	r3, r3, #1
 8008238:	64bb      	str	r3, [r7, #72]	@ 0x48
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	3308      	adds	r3, #8
 8008240:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008242:	61fa      	str	r2, [r7, #28]
 8008244:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008246:	69b9      	ldr	r1, [r7, #24]
 8008248:	69fa      	ldr	r2, [r7, #28]
 800824a:	e841 2300 	strex	r3, r2, [r1]
 800824e:	617b      	str	r3, [r7, #20]
   return(result);
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1e5      	bne.n	8008222 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2220      	movs	r2, #32
 800825a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008266:	2303      	movs	r3, #3
 8008268:	e012      	b.n	8008290 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2220      	movs	r2, #32
 800826e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2220      	movs	r2, #32
 8008276:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3758      	adds	r7, #88	@ 0x58
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b084      	sub	sp, #16
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	603b      	str	r3, [r7, #0]
 80082a4:	4613      	mov	r3, r2
 80082a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082a8:	e04f      	b.n	800834a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b0:	d04b      	beq.n	800834a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082b2:	f7f9 ffa9 	bl	8002208 <HAL_GetTick>
 80082b6:	4602      	mov	r2, r0
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	69ba      	ldr	r2, [r7, #24]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d302      	bcc.n	80082c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80082c2:	69bb      	ldr	r3, [r7, #24]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d101      	bne.n	80082cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e04e      	b.n	800836a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 0304 	and.w	r3, r3, #4
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d037      	beq.n	800834a <UART_WaitOnFlagUntilTimeout+0xb2>
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	2b80      	cmp	r3, #128	@ 0x80
 80082de:	d034      	beq.n	800834a <UART_WaitOnFlagUntilTimeout+0xb2>
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	2b40      	cmp	r3, #64	@ 0x40
 80082e4:	d031      	beq.n	800834a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	69db      	ldr	r3, [r3, #28]
 80082ec:	f003 0308 	and.w	r3, r3, #8
 80082f0:	2b08      	cmp	r3, #8
 80082f2:	d110      	bne.n	8008316 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2208      	movs	r2, #8
 80082fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f000 f838 	bl	8008372 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2208      	movs	r2, #8
 8008306:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2200      	movs	r2, #0
 800830e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e029      	b.n	800836a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	69db      	ldr	r3, [r3, #28]
 800831c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008320:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008324:	d111      	bne.n	800834a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800832e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f000 f81e 	bl	8008372 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2220      	movs	r2, #32
 800833a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008346:	2303      	movs	r3, #3
 8008348:	e00f      	b.n	800836a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	69da      	ldr	r2, [r3, #28]
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	4013      	ands	r3, r2
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	429a      	cmp	r2, r3
 8008358:	bf0c      	ite	eq
 800835a:	2301      	moveq	r3, #1
 800835c:	2300      	movne	r3, #0
 800835e:	b2db      	uxtb	r3, r3
 8008360:	461a      	mov	r2, r3
 8008362:	79fb      	ldrb	r3, [r7, #7]
 8008364:	429a      	cmp	r2, r3
 8008366:	d0a0      	beq.n	80082aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008372:	b480      	push	{r7}
 8008374:	b095      	sub	sp, #84	@ 0x54
 8008376:	af00      	add	r7, sp, #0
 8008378:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008382:	e853 3f00 	ldrex	r3, [r3]
 8008386:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800838a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800838e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	461a      	mov	r2, r3
 8008396:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008398:	643b      	str	r3, [r7, #64]	@ 0x40
 800839a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800839e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083a0:	e841 2300 	strex	r3, r2, [r1]
 80083a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1e6      	bne.n	800837a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3308      	adds	r3, #8
 80083b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b4:	6a3b      	ldr	r3, [r7, #32]
 80083b6:	e853 3f00 	ldrex	r3, [r3]
 80083ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80083c2:	f023 0301 	bic.w	r3, r3, #1
 80083c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	3308      	adds	r3, #8
 80083ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083d8:	e841 2300 	strex	r3, r2, [r1]
 80083dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1e3      	bne.n	80083ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d118      	bne.n	800841e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	e853 3f00 	ldrex	r3, [r3]
 80083f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	f023 0310 	bic.w	r3, r3, #16
 8008400:	647b      	str	r3, [r7, #68]	@ 0x44
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	461a      	mov	r2, r3
 8008408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800840a:	61bb      	str	r3, [r7, #24]
 800840c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840e:	6979      	ldr	r1, [r7, #20]
 8008410:	69ba      	ldr	r2, [r7, #24]
 8008412:	e841 2300 	strex	r3, r2, [r1]
 8008416:	613b      	str	r3, [r7, #16]
   return(result);
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1e6      	bne.n	80083ec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2220      	movs	r2, #32
 8008422:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2200      	movs	r2, #0
 8008430:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008432:	bf00      	nop
 8008434:	3754      	adds	r7, #84	@ 0x54
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b084      	sub	sp, #16
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800844a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2200      	movs	r2, #0
 8008450:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f7ff fabd 	bl	80079dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008462:	bf00      	nop
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b088      	sub	sp, #32
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	e853 3f00 	ldrex	r3, [r3]
 800847e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008486:	61fb      	str	r3, [r7, #28]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	461a      	mov	r2, r3
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	61bb      	str	r3, [r7, #24]
 8008492:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008494:	6979      	ldr	r1, [r7, #20]
 8008496:	69ba      	ldr	r2, [r7, #24]
 8008498:	e841 2300 	strex	r3, r2, [r1]
 800849c:	613b      	str	r3, [r7, #16]
   return(result);
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d1e6      	bne.n	8008472 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2220      	movs	r2, #32
 80084a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7ff fa88 	bl	80079c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084b8:	bf00      	nop
 80084ba:	3720      	adds	r7, #32
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80084c8:	bf00      	nop
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr

080084d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80084dc:	bf00      	nop
 80084de:	370c      	adds	r7, #12
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800850a:	2b01      	cmp	r3, #1
 800850c:	d101      	bne.n	8008512 <HAL_UARTEx_DisableFifoMode+0x16>
 800850e:	2302      	movs	r3, #2
 8008510:	e027      	b.n	8008562 <HAL_UARTEx_DisableFifoMode+0x66>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2201      	movs	r2, #1
 8008516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2224      	movs	r2, #36	@ 0x24
 800851e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f022 0201 	bic.w	r2, r2, #1
 8008538:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008540:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68fa      	ldr	r2, [r7, #12]
 800854e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2220      	movs	r2, #32
 8008554:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3714      	adds	r7, #20
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr

0800856e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b084      	sub	sp, #16
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
 8008576:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800857e:	2b01      	cmp	r3, #1
 8008580:	d101      	bne.n	8008586 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008582:	2302      	movs	r3, #2
 8008584:	e02d      	b.n	80085e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2224      	movs	r2, #36	@ 0x24
 8008592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	681a      	ldr	r2, [r3, #0]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f022 0201 	bic.w	r2, r2, #1
 80085ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	683a      	ldr	r2, [r7, #0]
 80085be:	430a      	orrs	r2, r1
 80085c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 f850 	bl	8008668 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2220      	movs	r2, #32
 80085d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b084      	sub	sp, #16
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085fa:	2b01      	cmp	r3, #1
 80085fc:	d101      	bne.n	8008602 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80085fe:	2302      	movs	r3, #2
 8008600:	e02d      	b.n	800865e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2224      	movs	r2, #36	@ 0x24
 800860e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f022 0201 	bic.w	r2, r2, #1
 8008628:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	683a      	ldr	r2, [r7, #0]
 800863a:	430a      	orrs	r2, r1
 800863c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f812 	bl	8008668 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2220      	movs	r2, #32
 8008650:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
	...

08008668 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008674:	2b00      	cmp	r3, #0
 8008676:	d108      	bne.n	800868a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008688:	e031      	b.n	80086ee <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800868a:	2308      	movs	r3, #8
 800868c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800868e:	2308      	movs	r3, #8
 8008690:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	0e5b      	lsrs	r3, r3, #25
 800869a:	b2db      	uxtb	r3, r3
 800869c:	f003 0307 	and.w	r3, r3, #7
 80086a0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	0f5b      	lsrs	r3, r3, #29
 80086aa:	b2db      	uxtb	r3, r3
 80086ac:	f003 0307 	and.w	r3, r3, #7
 80086b0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086b2:	7bbb      	ldrb	r3, [r7, #14]
 80086b4:	7b3a      	ldrb	r2, [r7, #12]
 80086b6:	4911      	ldr	r1, [pc, #68]	@ (80086fc <UARTEx_SetNbDataToProcess+0x94>)
 80086b8:	5c8a      	ldrb	r2, [r1, r2]
 80086ba:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80086be:	7b3a      	ldrb	r2, [r7, #12]
 80086c0:	490f      	ldr	r1, [pc, #60]	@ (8008700 <UARTEx_SetNbDataToProcess+0x98>)
 80086c2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80086c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	7b7a      	ldrb	r2, [r7, #13]
 80086d4:	4909      	ldr	r1, [pc, #36]	@ (80086fc <UARTEx_SetNbDataToProcess+0x94>)
 80086d6:	5c8a      	ldrb	r2, [r1, r2]
 80086d8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80086dc:	7b7a      	ldrb	r2, [r7, #13]
 80086de:	4908      	ldr	r1, [pc, #32]	@ (8008700 <UARTEx_SetNbDataToProcess+0x98>)
 80086e0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80086ee:	bf00      	nop
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	0800d1bc 	.word	0x0800d1bc
 8008700:	0800d1c4 	.word	0x0800d1c4

08008704 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008704:	b480      	push	{r7}
 8008706:	b085      	sub	sp, #20
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2200      	movs	r2, #0
 8008710:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008714:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8008718:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	b29a      	uxth	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3714      	adds	r7, #20
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008732:	b480      	push	{r7}
 8008734:	b085      	sub	sp, #20
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800873a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800873e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008746:	b29a      	uxth	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	b29b      	uxth	r3, r3
 800874c:	43db      	mvns	r3, r3
 800874e:	b29b      	uxth	r3, r3
 8008750:	4013      	ands	r3, r2
 8008752:	b29a      	uxth	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	1d3b      	adds	r3, r7, #4
 8008772:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2201      	movs	r2, #1
 800877a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2200      	movs	r2, #0
 8008792:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3714      	adds	r7, #20
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b09d      	sub	sp, #116	@ 0x74
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80087ae:	2300      	movs	r3, #0
 80087b0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4413      	add	r3, r2
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80087c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087ca:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	78db      	ldrb	r3, [r3, #3]
 80087d2:	2b03      	cmp	r3, #3
 80087d4:	d81f      	bhi.n	8008816 <USB_ActivateEndpoint+0x72>
 80087d6:	a201      	add	r2, pc, #4	@ (adr r2, 80087dc <USB_ActivateEndpoint+0x38>)
 80087d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087dc:	080087ed 	.word	0x080087ed
 80087e0:	08008809 	.word	0x08008809
 80087e4:	0800881f 	.word	0x0800881f
 80087e8:	080087fb 	.word	0x080087fb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80087ec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80087f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80087f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80087f8:	e012      	b.n	8008820 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80087fa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80087fe:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8008802:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008806:	e00b      	b.n	8008820 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008808:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800880c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008810:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8008814:	e004      	b.n	8008820 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800881c:	e000      	b.n	8008820 <USB_ActivateEndpoint+0x7c>
      break;
 800881e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	009b      	lsls	r3, r3, #2
 8008828:	441a      	add	r2, r3
 800882a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800882e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008832:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008836:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800883a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800883e:	b29b      	uxth	r3, r3
 8008840:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	4413      	add	r3, r2
 800884c:	881b      	ldrh	r3, [r3, #0]
 800884e:	b29b      	uxth	r3, r3
 8008850:	b21b      	sxth	r3, r3
 8008852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800885a:	b21a      	sxth	r2, r3
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	b21b      	sxth	r3, r3
 8008862:	4313      	orrs	r3, r2
 8008864:	b21b      	sxth	r3, r3
 8008866:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	441a      	add	r2, r3
 8008874:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008878:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800887c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008880:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008888:	b29b      	uxth	r3, r3
 800888a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	7b1b      	ldrb	r3, [r3, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	f040 8178 	bne.w	8008b86 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	785b      	ldrb	r3, [r3, #1]
 800889a:	2b00      	cmp	r3, #0
 800889c:	f000 8084 	beq.w	80089a8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	61bb      	str	r3, [r7, #24]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	461a      	mov	r2, r3
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	4413      	add	r3, r2
 80088b2:	61bb      	str	r3, [r7, #24]
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	00da      	lsls	r2, r3, #3
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	4413      	add	r3, r2
 80088be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088c2:	617b      	str	r3, [r7, #20]
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	88db      	ldrh	r3, [r3, #6]
 80088c8:	085b      	lsrs	r3, r3, #1
 80088ca:	b29b      	uxth	r3, r3
 80088cc:	005b      	lsls	r3, r3, #1
 80088ce:	b29a      	uxth	r2, r3
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	4413      	add	r3, r2
 80088de:	881b      	ldrh	r3, [r3, #0]
 80088e0:	827b      	strh	r3, [r7, #18]
 80088e2:	8a7b      	ldrh	r3, [r7, #18]
 80088e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d01b      	beq.n	8008924 <USB_ActivateEndpoint+0x180>
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4413      	add	r3, r2
 80088f6:	881b      	ldrh	r3, [r3, #0]
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008902:	823b      	strh	r3, [r7, #16]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	441a      	add	r2, r3
 800890e:	8a3b      	ldrh	r3, [r7, #16]
 8008910:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008914:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008918:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800891c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008920:	b29b      	uxth	r3, r3
 8008922:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	78db      	ldrb	r3, [r3, #3]
 8008928:	2b01      	cmp	r3, #1
 800892a:	d020      	beq.n	800896e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	4413      	add	r3, r2
 8008936:	881b      	ldrh	r3, [r3, #0]
 8008938:	b29b      	uxth	r3, r3
 800893a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800893e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008942:	81bb      	strh	r3, [r7, #12]
 8008944:	89bb      	ldrh	r3, [r7, #12]
 8008946:	f083 0320 	eor.w	r3, r3, #32
 800894a:	81bb      	strh	r3, [r7, #12]
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	441a      	add	r2, r3
 8008956:	89bb      	ldrh	r3, [r7, #12]
 8008958:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800895c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008960:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008968:	b29b      	uxth	r3, r3
 800896a:	8013      	strh	r3, [r2, #0]
 800896c:	e2d5      	b.n	8008f1a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	4413      	add	r3, r2
 8008978:	881b      	ldrh	r3, [r3, #0]
 800897a:	b29b      	uxth	r3, r3
 800897c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008980:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008984:	81fb      	strh	r3, [r7, #14]
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	441a      	add	r2, r3
 8008990:	89fb      	ldrh	r3, [r7, #14]
 8008992:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008996:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800899a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800899e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	8013      	strh	r3, [r2, #0]
 80089a6:	e2b8      	b.n	8008f1a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	461a      	mov	r2, r3
 80089b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089b8:	4413      	add	r3, r2
 80089ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	00da      	lsls	r2, r3, #3
 80089c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089c4:	4413      	add	r3, r2
 80089c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80089ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	88db      	ldrh	r3, [r3, #6]
 80089d0:	085b      	lsrs	r3, r3, #1
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	005b      	lsls	r3, r3, #1
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089da:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	461a      	mov	r2, r3
 80089ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ec:	4413      	add	r3, r2
 80089ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	00da      	lsls	r2, r3, #3
 80089f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f8:	4413      	add	r3, r2
 80089fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80089fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a02:	881b      	ldrh	r3, [r3, #0]
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a0a:	b29a      	uxth	r2, r3
 8008a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a0e:	801a      	strh	r2, [r3, #0]
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d10a      	bne.n	8008a2e <USB_ActivateEndpoint+0x28a>
 8008a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1a:	881b      	ldrh	r3, [r3, #0]
 8008a1c:	b29b      	uxth	r3, r3
 8008a1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2a:	801a      	strh	r2, [r3, #0]
 8008a2c:	e039      	b.n	8008aa2 <USB_ActivateEndpoint+0x2fe>
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a34:	d818      	bhi.n	8008a68 <USB_ActivateEndpoint+0x2c4>
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	085b      	lsrs	r3, r3, #1
 8008a3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d002      	beq.n	8008a50 <USB_ActivateEndpoint+0x2ac>
 8008a4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a4c:	3301      	adds	r3, #1
 8008a4e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a52:	881b      	ldrh	r3, [r3, #0]
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	029b      	lsls	r3, r3, #10
 8008a5c:	b29b      	uxth	r3, r3
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	b29a      	uxth	r2, r3
 8008a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a64:	801a      	strh	r2, [r3, #0]
 8008a66:	e01c      	b.n	8008aa2 <USB_ActivateEndpoint+0x2fe>
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	691b      	ldr	r3, [r3, #16]
 8008a6c:	095b      	lsrs	r3, r3, #5
 8008a6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	f003 031f 	and.w	r3, r3, #31
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d102      	bne.n	8008a82 <USB_ActivateEndpoint+0x2de>
 8008a7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a84:	881b      	ldrh	r3, [r3, #0]
 8008a86:	b29a      	uxth	r2, r3
 8008a88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	029b      	lsls	r3, r3, #10
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	4313      	orrs	r3, r2
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	4413      	add	r3, r2
 8008aac:	881b      	ldrh	r3, [r3, #0]
 8008aae:	847b      	strh	r3, [r7, #34]	@ 0x22
 8008ab0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d01b      	beq.n	8008af2 <USB_ActivateEndpoint+0x34e>
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4413      	add	r3, r2
 8008ac4:	881b      	ldrh	r3, [r3, #0]
 8008ac6:	b29b      	uxth	r3, r3
 8008ac8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008acc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ad0:	843b      	strh	r3, [r7, #32]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	441a      	add	r2, r3
 8008adc:	8c3b      	ldrh	r3, [r7, #32]
 8008ade:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ae2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ae6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aee:	b29b      	uxth	r3, r3
 8008af0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d124      	bne.n	8008b44 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008afa:	687a      	ldr	r2, [r7, #4]
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4413      	add	r3, r2
 8008b04:	881b      	ldrh	r3, [r3, #0]
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b10:	83bb      	strh	r3, [r7, #28]
 8008b12:	8bbb      	ldrh	r3, [r7, #28]
 8008b14:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008b18:	83bb      	strh	r3, [r7, #28]
 8008b1a:	8bbb      	ldrh	r3, [r7, #28]
 8008b1c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008b20:	83bb      	strh	r3, [r7, #28]
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	441a      	add	r2, r3
 8008b2c:	8bbb      	ldrh	r3, [r7, #28]
 8008b2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	8013      	strh	r3, [r2, #0]
 8008b42:	e1ea      	b.n	8008f1a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	4413      	add	r3, r2
 8008b4e:	881b      	ldrh	r3, [r3, #0]
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b5a:	83fb      	strh	r3, [r7, #30]
 8008b5c:	8bfb      	ldrh	r3, [r7, #30]
 8008b5e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008b62:	83fb      	strh	r3, [r7, #30]
 8008b64:	687a      	ldr	r2, [r7, #4]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	441a      	add	r2, r3
 8008b6e:	8bfb      	ldrh	r3, [r7, #30]
 8008b70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	8013      	strh	r3, [r2, #0]
 8008b84:	e1c9      	b.n	8008f1a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	78db      	ldrb	r3, [r3, #3]
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d11e      	bne.n	8008bcc <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4413      	add	r3, r2
 8008b98:	881b      	ldrh	r3, [r3, #0]
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ba0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ba4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	441a      	add	r2, r3
 8008bb2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008bb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bbe:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	8013      	strh	r3, [r2, #0]
 8008bca:	e01d      	b.n	8008c08 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008bcc:	687a      	ldr	r2, [r7, #4]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	781b      	ldrb	r3, [r3, #0]
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4413      	add	r3, r2
 8008bd6:	881b      	ldrh	r3, [r3, #0]
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008be2:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	441a      	add	r2, r3
 8008bf0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8008bf4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008bf8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008bfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c00:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	461a      	mov	r2, r3
 8008c16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c18:	4413      	add	r3, r2
 8008c1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	00da      	lsls	r2, r3, #3
 8008c22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	891b      	ldrh	r3, [r3, #8]
 8008c30:	085b      	lsrs	r3, r3, #1
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	005b      	lsls	r3, r3, #1
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c3a:	801a      	strh	r2, [r3, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	461a      	mov	r2, r3
 8008c4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c4c:	4413      	add	r3, r2
 8008c4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	00da      	lsls	r2, r3, #3
 8008c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c58:	4413      	add	r3, r2
 8008c5a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008c5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	895b      	ldrh	r3, [r3, #10]
 8008c64:	085b      	lsrs	r3, r3, #1
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	005b      	lsls	r3, r3, #1
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c6e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	785b      	ldrb	r3, [r3, #1]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	f040 8093 	bne.w	8008da0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008c7a:	687a      	ldr	r2, [r7, #4]
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	881b      	ldrh	r3, [r3, #0]
 8008c86:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8008c8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008c8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d01b      	beq.n	8008cce <USB_ActivateEndpoint+0x52a>
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	881b      	ldrh	r3, [r3, #0]
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ca8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cac:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	441a      	add	r2, r3
 8008cb8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008cba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008cbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008cc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008cce:	687a      	ldr	r2, [r7, #4]
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4413      	add	r3, r2
 8008cd8:	881b      	ldrh	r3, [r3, #0]
 8008cda:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8008cdc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d01b      	beq.n	8008d1e <USB_ActivateEndpoint+0x57a>
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4413      	add	r3, r2
 8008cf0:	881b      	ldrh	r3, [r3, #0]
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cfc:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	441a      	add	r2, r3
 8008d08:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008d0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d16:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4413      	add	r3, r2
 8008d28:	881b      	ldrh	r3, [r3, #0]
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008d30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d34:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008d36:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008d38:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008d3c:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008d3e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008d40:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008d44:	873b      	strh	r3, [r7, #56]	@ 0x38
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	441a      	add	r2, r3
 8008d50:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8008d52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	881b      	ldrh	r3, [r3, #0]
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d7c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	441a      	add	r2, r3
 8008d88:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008d8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	8013      	strh	r3, [r2, #0]
 8008d9e:	e0bc      	b.n	8008f1a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	009b      	lsls	r3, r3, #2
 8008da8:	4413      	add	r3, r2
 8008daa:	881b      	ldrh	r3, [r3, #0]
 8008dac:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008db0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008db4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d01d      	beq.n	8008df8 <USB_ActivateEndpoint+0x654>
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	4413      	add	r3, r2
 8008dc6:	881b      	ldrh	r3, [r3, #0]
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dd2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	441a      	add	r2, r3
 8008de0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008de4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008de8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008dec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008df0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4413      	add	r3, r2
 8008e02:	881b      	ldrh	r3, [r3, #0]
 8008e04:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8008e08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d01d      	beq.n	8008e50 <USB_ActivateEndpoint+0x6ac>
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	4413      	add	r3, r2
 8008e1e:	881b      	ldrh	r3, [r3, #0]
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e2a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	441a      	add	r2, r3
 8008e38:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8008e3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e48:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	78db      	ldrb	r3, [r3, #3]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d024      	beq.n	8008ea2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008e58:	687a      	ldr	r2, [r7, #4]
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	4413      	add	r3, r2
 8008e62:	881b      	ldrh	r3, [r3, #0]
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e6e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008e72:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008e76:	f083 0320 	eor.w	r3, r3, #32
 8008e7a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	441a      	add	r2, r3
 8008e88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8008e8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008e90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008e94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	8013      	strh	r3, [r2, #0]
 8008ea0:	e01d      	b.n	8008ede <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4413      	add	r3, r2
 8008eac:	881b      	ldrh	r3, [r3, #0]
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008eb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008eb8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	441a      	add	r2, r3
 8008ec6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008eca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008ece:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008ed2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ed6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	4413      	add	r3, r2
 8008ee8:	881b      	ldrh	r3, [r3, #0]
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ef0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ef4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	441a      	add	r2, r3
 8008f02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008f06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008f1a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3774      	adds	r7, #116	@ 0x74
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop

08008f2c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b08d      	sub	sp, #52	@ 0x34
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	7b1b      	ldrb	r3, [r3, #12]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f040 808e 	bne.w	800905c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	785b      	ldrb	r3, [r3, #1]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d044      	beq.n	8008fd2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	781b      	ldrb	r3, [r3, #0]
 8008f4e:	009b      	lsls	r3, r3, #2
 8008f50:	4413      	add	r3, r2
 8008f52:	881b      	ldrh	r3, [r3, #0]
 8008f54:	81bb      	strh	r3, [r7, #12]
 8008f56:	89bb      	ldrh	r3, [r7, #12]
 8008f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d01b      	beq.n	8008f98 <USB_DeactivateEndpoint+0x6c>
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4413      	add	r3, r2
 8008f6a:	881b      	ldrh	r3, [r3, #0]
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f76:	817b      	strh	r3, [r7, #10]
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	441a      	add	r2, r3
 8008f82:	897b      	ldrh	r3, [r7, #10]
 8008f84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008f88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008f8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f90:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008f98:	687a      	ldr	r2, [r7, #4]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	881b      	ldrh	r3, [r3, #0]
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008faa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fae:	813b      	strh	r3, [r7, #8]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	441a      	add	r2, r3
 8008fba:	893b      	ldrh	r3, [r7, #8]
 8008fbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008fc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008fc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008fc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	8013      	strh	r3, [r2, #0]
 8008fd0:	e192      	b.n	80092f8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	881b      	ldrh	r3, [r3, #0]
 8008fde:	827b      	strh	r3, [r7, #18]
 8008fe0:	8a7b      	ldrh	r3, [r7, #18]
 8008fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d01b      	beq.n	8009022 <USB_DeactivateEndpoint+0xf6>
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	781b      	ldrb	r3, [r3, #0]
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	4413      	add	r3, r2
 8008ff4:	881b      	ldrh	r3, [r3, #0]
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ffc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009000:	823b      	strh	r3, [r7, #16]
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	009b      	lsls	r3, r3, #2
 800900a:	441a      	add	r2, r3
 800900c:	8a3b      	ldrh	r3, [r7, #16]
 800900e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009012:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009016:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800901a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800901e:	b29b      	uxth	r3, r3
 8009020:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	4413      	add	r3, r2
 800902c:	881b      	ldrh	r3, [r3, #0]
 800902e:	b29b      	uxth	r3, r3
 8009030:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009034:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009038:	81fb      	strh	r3, [r7, #14]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	441a      	add	r2, r3
 8009044:	89fb      	ldrh	r3, [r7, #14]
 8009046:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800904a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800904e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009056:	b29b      	uxth	r3, r3
 8009058:	8013      	strh	r3, [r2, #0]
 800905a:	e14d      	b.n	80092f8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	785b      	ldrb	r3, [r3, #1]
 8009060:	2b00      	cmp	r3, #0
 8009062:	f040 80a5 	bne.w	80091b0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	4413      	add	r3, r2
 8009070:	881b      	ldrh	r3, [r3, #0]
 8009072:	843b      	strh	r3, [r7, #32]
 8009074:	8c3b      	ldrh	r3, [r7, #32]
 8009076:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800907a:	2b00      	cmp	r3, #0
 800907c:	d01b      	beq.n	80090b6 <USB_DeactivateEndpoint+0x18a>
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	881b      	ldrh	r3, [r3, #0]
 800908a:	b29b      	uxth	r3, r3
 800908c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009090:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009094:	83fb      	strh	r3, [r7, #30]
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	781b      	ldrb	r3, [r3, #0]
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	441a      	add	r2, r3
 80090a0:	8bfb      	ldrh	r3, [r7, #30]
 80090a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80090ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	4413      	add	r3, r2
 80090c0:	881b      	ldrh	r3, [r3, #0]
 80090c2:	83bb      	strh	r3, [r7, #28]
 80090c4:	8bbb      	ldrh	r3, [r7, #28]
 80090c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d01b      	beq.n	8009106 <USB_DeactivateEndpoint+0x1da>
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	781b      	ldrb	r3, [r3, #0]
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	4413      	add	r3, r2
 80090d8:	881b      	ldrh	r3, [r3, #0]
 80090da:	b29b      	uxth	r3, r3
 80090dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090e4:	837b      	strh	r3, [r7, #26]
 80090e6:	687a      	ldr	r2, [r7, #4]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	441a      	add	r2, r3
 80090f0:	8b7b      	ldrh	r3, [r7, #26]
 80090f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090fe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009102:	b29b      	uxth	r3, r3
 8009104:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	4413      	add	r3, r2
 8009110:	881b      	ldrh	r3, [r3, #0]
 8009112:	b29b      	uxth	r3, r3
 8009114:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009118:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800911c:	833b      	strh	r3, [r7, #24]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	441a      	add	r2, r3
 8009128:	8b3b      	ldrh	r3, [r7, #24]
 800912a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800912e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009136:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800913a:	b29b      	uxth	r3, r3
 800913c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4413      	add	r3, r2
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	b29b      	uxth	r3, r3
 800914c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009150:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009154:	82fb      	strh	r3, [r7, #22]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	441a      	add	r2, r3
 8009160:	8afb      	ldrh	r3, [r7, #22]
 8009162:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009166:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800916a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800916e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009172:	b29b      	uxth	r3, r3
 8009174:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	4413      	add	r3, r2
 8009180:	881b      	ldrh	r3, [r3, #0]
 8009182:	b29b      	uxth	r3, r3
 8009184:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009188:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800918c:	82bb      	strh	r3, [r7, #20]
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	441a      	add	r2, r3
 8009198:	8abb      	ldrh	r3, [r7, #20]
 800919a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800919e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	8013      	strh	r3, [r2, #0]
 80091ae:	e0a3      	b.n	80092f8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	781b      	ldrb	r3, [r3, #0]
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	4413      	add	r3, r2
 80091ba:	881b      	ldrh	r3, [r3, #0]
 80091bc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80091be:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80091c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d01b      	beq.n	8009200 <USB_DeactivateEndpoint+0x2d4>
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	4413      	add	r3, r2
 80091d2:	881b      	ldrh	r3, [r3, #0]
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091de:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	441a      	add	r2, r3
 80091ea:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80091ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80091f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	4413      	add	r3, r2
 800920a:	881b      	ldrh	r3, [r3, #0]
 800920c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800920e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8009210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009214:	2b00      	cmp	r3, #0
 8009216:	d01b      	beq.n	8009250 <USB_DeactivateEndpoint+0x324>
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	881b      	ldrh	r3, [r3, #0]
 8009224:	b29b      	uxth	r3, r3
 8009226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800922a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800922e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	781b      	ldrb	r3, [r3, #0]
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	441a      	add	r2, r3
 800923a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800923c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009240:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009244:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009248:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800924c:	b29b      	uxth	r3, r3
 800924e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4413      	add	r3, r2
 800925a:	881b      	ldrh	r3, [r3, #0]
 800925c:	b29b      	uxth	r3, r3
 800925e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009266:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	441a      	add	r2, r3
 8009272:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009274:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009278:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800927c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009284:	b29b      	uxth	r3, r3
 8009286:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4413      	add	r3, r2
 8009292:	881b      	ldrh	r3, [r3, #0]
 8009294:	b29b      	uxth	r3, r3
 8009296:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800929a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800929e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	441a      	add	r2, r3
 80092aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80092ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092bc:	b29b      	uxth	r3, r3
 80092be:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4413      	add	r3, r2
 80092ca:	881b      	ldrh	r3, [r3, #0]
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092d6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80092d8:	687a      	ldr	r2, [r7, #4]
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	441a      	add	r2, r3
 80092e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80092e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80092e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80092ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80092f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3734      	adds	r7, #52	@ 0x34
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b0c2      	sub	sp, #264	@ 0x108
 800930a:	af00      	add	r7, sp, #0
 800930c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009310:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009314:	6018      	str	r0, [r3, #0]
 8009316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800931a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800931e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009324:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	785b      	ldrb	r3, [r3, #1]
 800932c:	2b01      	cmp	r3, #1
 800932e:	f040 86b7 	bne.w	800a0a0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	699a      	ldr	r2, [r3, #24]
 800933e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	429a      	cmp	r2, r3
 800934c:	d908      	bls.n	8009360 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800934e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009352:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	691b      	ldr	r3, [r3, #16]
 800935a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800935e:	e007      	b.n	8009370 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	699b      	ldr	r3, [r3, #24]
 800936c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009374:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	7b1b      	ldrb	r3, [r3, #12]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d13a      	bne.n	80093f6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009384:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	6959      	ldr	r1, [r3, #20]
 800938c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009390:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	88da      	ldrh	r2, [r3, #6]
 8009398:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800939c:	b29b      	uxth	r3, r3
 800939e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80093a2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80093a6:	6800      	ldr	r0, [r0, #0]
 80093a8:	f001 fc99 	bl	800acde <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80093ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	613b      	str	r3, [r7, #16]
 80093b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	461a      	mov	r2, r3
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	4413      	add	r3, r2
 80093ce:	613b      	str	r3, [r7, #16]
 80093d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	00da      	lsls	r2, r3, #3
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	4413      	add	r3, r2
 80093e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80093e6:	60fb      	str	r3, [r7, #12]
 80093e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093ec:	b29a      	uxth	r2, r3
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	801a      	strh	r2, [r3, #0]
 80093f2:	f000 be1f 	b.w	800a034 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80093f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80093fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	78db      	ldrb	r3, [r3, #3]
 8009402:	2b02      	cmp	r3, #2
 8009404:	f040 8462 	bne.w	8009ccc <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800940c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	6a1a      	ldr	r2, [r3, #32]
 8009414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	429a      	cmp	r2, r3
 8009422:	f240 83df 	bls.w	8009be4 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800942a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009434:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4413      	add	r3, r2
 8009440:	881b      	ldrh	r3, [r3, #0]
 8009442:	b29b      	uxth	r3, r3
 8009444:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009448:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800944c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8009450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009454:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800945e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	781b      	ldrb	r3, [r3, #0]
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	441a      	add	r2, r3
 800946a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800946e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009472:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009476:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800947a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800947e:	b29b      	uxth	r3, r3
 8009480:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6a1a      	ldr	r2, [r3, #32]
 800948e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009492:	1ad2      	subs	r2, r2, r3
 8009494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80094a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4413      	add	r3, r2
 80094ba:	881b      	ldrh	r3, [r3, #0]
 80094bc:	b29b      	uxth	r3, r3
 80094be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f000 81c7 	beq.w	8009856 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80094c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80094d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	785b      	ldrb	r3, [r3, #1]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d177      	bne.n	80095d4 <USB_EPStartXfer+0x2ce>
 80094e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80094f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80094f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094fe:	b29b      	uxth	r3, r3
 8009500:	461a      	mov	r2, r3
 8009502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009504:	4413      	add	r3, r2
 8009506:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800950c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	00da      	lsls	r2, r3, #3
 8009516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009518:	4413      	add	r3, r2
 800951a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800951e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009522:	881b      	ldrh	r3, [r3, #0]
 8009524:	b29b      	uxth	r3, r3
 8009526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800952a:	b29a      	uxth	r2, r3
 800952c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952e:	801a      	strh	r2, [r3, #0]
 8009530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009534:	2b00      	cmp	r3, #0
 8009536:	d10a      	bne.n	800954e <USB_EPStartXfer+0x248>
 8009538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800953a:	881b      	ldrh	r3, [r3, #0]
 800953c:	b29b      	uxth	r3, r3
 800953e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009546:	b29a      	uxth	r2, r3
 8009548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954a:	801a      	strh	r2, [r3, #0]
 800954c:	e067      	b.n	800961e <USB_EPStartXfer+0x318>
 800954e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009552:	2b3e      	cmp	r3, #62	@ 0x3e
 8009554:	d81c      	bhi.n	8009590 <USB_EPStartXfer+0x28a>
 8009556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800955a:	085b      	lsrs	r3, r3, #1
 800955c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009564:	f003 0301 	and.w	r3, r3, #1
 8009568:	2b00      	cmp	r3, #0
 800956a:	d004      	beq.n	8009576 <USB_EPStartXfer+0x270>
 800956c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009570:	3301      	adds	r3, #1
 8009572:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009578:	881b      	ldrh	r3, [r3, #0]
 800957a:	b29a      	uxth	r2, r3
 800957c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8009580:	b29b      	uxth	r3, r3
 8009582:	029b      	lsls	r3, r3, #10
 8009584:	b29b      	uxth	r3, r3
 8009586:	4313      	orrs	r3, r2
 8009588:	b29a      	uxth	r2, r3
 800958a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800958c:	801a      	strh	r2, [r3, #0]
 800958e:	e046      	b.n	800961e <USB_EPStartXfer+0x318>
 8009590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009594:	095b      	lsrs	r3, r3, #5
 8009596:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800959a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800959e:	f003 031f 	and.w	r3, r3, #31
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d104      	bne.n	80095b0 <USB_EPStartXfer+0x2aa>
 80095a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80095aa:	3b01      	subs	r3, #1
 80095ac:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80095b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b2:	881b      	ldrh	r3, [r3, #0]
 80095b4:	b29a      	uxth	r2, r3
 80095b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	029b      	lsls	r3, r3, #10
 80095be:	b29b      	uxth	r3, r3
 80095c0:	4313      	orrs	r3, r2
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095cc:	b29a      	uxth	r2, r3
 80095ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d0:	801a      	strh	r2, [r3, #0]
 80095d2:	e024      	b.n	800961e <USB_EPStartXfer+0x318>
 80095d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	785b      	ldrb	r3, [r3, #1]
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d11c      	bne.n	800961e <USB_EPStartXfer+0x318>
 80095e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80095e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095f2:	b29b      	uxth	r3, r3
 80095f4:	461a      	mov	r2, r3
 80095f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f8:	4413      	add	r3, r2
 80095fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80095fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009600:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	00da      	lsls	r2, r3, #3
 800960a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800960c:	4413      	add	r3, r2
 800960e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009612:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009618:	b29a      	uxth	r2, r3
 800961a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800961c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800961e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009622:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	895b      	ldrh	r3, [r3, #10]
 800962a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800962e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	6959      	ldr	r1, [r3, #20]
 800963a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800963e:	b29b      	uxth	r3, r3
 8009640:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009644:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009648:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800964c:	6800      	ldr	r0, [r0, #0]
 800964e:	f001 fb46 	bl	800acde <USB_WritePMA>
            ep->xfer_buff += len;
 8009652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	695a      	ldr	r2, [r3, #20]
 800965e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009662:	441a      	add	r2, r3
 8009664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	6a1a      	ldr	r2, [r3, #32]
 800967c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	429a      	cmp	r2, r3
 800968a:	d90f      	bls.n	80096ac <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800968c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	6a1a      	ldr	r2, [r3, #32]
 8009698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800969c:	1ad2      	subs	r2, r2, r3
 800969e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	621a      	str	r2, [r3, #32]
 80096aa:	e00e      	b.n	80096ca <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80096ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	6a1b      	ldr	r3, [r3, #32]
 80096b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80096bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2200      	movs	r2, #0
 80096c8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80096ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	785b      	ldrb	r3, [r3, #1]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d177      	bne.n	80097ca <USB_EPStartXfer+0x4c4>
 80096da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	61bb      	str	r3, [r7, #24]
 80096e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80096ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	461a      	mov	r2, r3
 80096f8:	69bb      	ldr	r3, [r7, #24]
 80096fa:	4413      	add	r3, r2
 80096fc:	61bb      	str	r3, [r7, #24]
 80096fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009702:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	00da      	lsls	r2, r3, #3
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	4413      	add	r3, r2
 8009710:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009714:	617b      	str	r3, [r7, #20]
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	881b      	ldrh	r3, [r3, #0]
 800971a:	b29b      	uxth	r3, r3
 800971c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009720:	b29a      	uxth	r2, r3
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	801a      	strh	r2, [r3, #0]
 8009726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10a      	bne.n	8009744 <USB_EPStartXfer+0x43e>
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	881b      	ldrh	r3, [r3, #0]
 8009732:	b29b      	uxth	r3, r3
 8009734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800973c:	b29a      	uxth	r2, r3
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	801a      	strh	r2, [r3, #0]
 8009742:	e06d      	b.n	8009820 <USB_EPStartXfer+0x51a>
 8009744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009748:	2b3e      	cmp	r3, #62	@ 0x3e
 800974a:	d81c      	bhi.n	8009786 <USB_EPStartXfer+0x480>
 800974c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009750:	085b      	lsrs	r3, r3, #1
 8009752:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800975a:	f003 0301 	and.w	r3, r3, #1
 800975e:	2b00      	cmp	r3, #0
 8009760:	d004      	beq.n	800976c <USB_EPStartXfer+0x466>
 8009762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009766:	3301      	adds	r3, #1
 8009768:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	881b      	ldrh	r3, [r3, #0]
 8009770:	b29a      	uxth	r2, r3
 8009772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009776:	b29b      	uxth	r3, r3
 8009778:	029b      	lsls	r3, r3, #10
 800977a:	b29b      	uxth	r3, r3
 800977c:	4313      	orrs	r3, r2
 800977e:	b29a      	uxth	r2, r3
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	801a      	strh	r2, [r3, #0]
 8009784:	e04c      	b.n	8009820 <USB_EPStartXfer+0x51a>
 8009786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800978a:	095b      	lsrs	r3, r3, #5
 800978c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009794:	f003 031f 	and.w	r3, r3, #31
 8009798:	2b00      	cmp	r3, #0
 800979a:	d104      	bne.n	80097a6 <USB_EPStartXfer+0x4a0>
 800979c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097a0:	3b01      	subs	r3, #1
 80097a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	881b      	ldrh	r3, [r3, #0]
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	029b      	lsls	r3, r3, #10
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	4313      	orrs	r3, r2
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	801a      	strh	r2, [r3, #0]
 80097c8:	e02a      	b.n	8009820 <USB_EPStartXfer+0x51a>
 80097ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	785b      	ldrb	r3, [r3, #1]
 80097d6:	2b01      	cmp	r3, #1
 80097d8:	d122      	bne.n	8009820 <USB_EPStartXfer+0x51a>
 80097da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	623b      	str	r3, [r7, #32]
 80097e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80097ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	461a      	mov	r2, r3
 80097f8:	6a3b      	ldr	r3, [r7, #32]
 80097fa:	4413      	add	r3, r2
 80097fc:	623b      	str	r3, [r7, #32]
 80097fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009802:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	00da      	lsls	r2, r3, #3
 800980c:	6a3b      	ldr	r3, [r7, #32]
 800980e:	4413      	add	r3, r2
 8009810:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009814:	61fb      	str	r3, [r7, #28]
 8009816:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800981a:	b29a      	uxth	r2, r3
 800981c:	69fb      	ldr	r3, [r7, #28]
 800981e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009820:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009824:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	891b      	ldrh	r3, [r3, #8]
 800982c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009830:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009834:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	6959      	ldr	r1, [r3, #20]
 800983c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009840:	b29b      	uxth	r3, r3
 8009842:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009846:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800984a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800984e:	6800      	ldr	r0, [r0, #0]
 8009850:	f001 fa45 	bl	800acde <USB_WritePMA>
 8009854:	e3ee      	b.n	800a034 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800985a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	785b      	ldrb	r3, [r3, #1]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d177      	bne.n	8009956 <USB_EPStartXfer+0x650>
 8009866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800986a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009876:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009880:	b29b      	uxth	r3, r3
 8009882:	461a      	mov	r2, r3
 8009884:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009886:	4413      	add	r3, r2
 8009888:	64bb      	str	r3, [r7, #72]	@ 0x48
 800988a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800988e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	781b      	ldrb	r3, [r3, #0]
 8009896:	00da      	lsls	r2, r3, #3
 8009898:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800989a:	4413      	add	r3, r2
 800989c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80098a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80098a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098a4:	881b      	ldrh	r3, [r3, #0]
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098b0:	801a      	strh	r2, [r3, #0]
 80098b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d10a      	bne.n	80098d0 <USB_EPStartXfer+0x5ca>
 80098ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098bc:	881b      	ldrh	r3, [r3, #0]
 80098be:	b29b      	uxth	r3, r3
 80098c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098cc:	801a      	strh	r2, [r3, #0]
 80098ce:	e06d      	b.n	80099ac <USB_EPStartXfer+0x6a6>
 80098d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80098d6:	d81c      	bhi.n	8009912 <USB_EPStartXfer+0x60c>
 80098d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098dc:	085b      	lsrs	r3, r3, #1
 80098de:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80098e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098e6:	f003 0301 	and.w	r3, r3, #1
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d004      	beq.n	80098f8 <USB_EPStartXfer+0x5f2>
 80098ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80098f2:	3301      	adds	r3, #1
 80098f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80098f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098fa:	881b      	ldrh	r3, [r3, #0]
 80098fc:	b29a      	uxth	r2, r3
 80098fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009902:	b29b      	uxth	r3, r3
 8009904:	029b      	lsls	r3, r3, #10
 8009906:	b29b      	uxth	r3, r3
 8009908:	4313      	orrs	r3, r2
 800990a:	b29a      	uxth	r2, r3
 800990c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800990e:	801a      	strh	r2, [r3, #0]
 8009910:	e04c      	b.n	80099ac <USB_EPStartXfer+0x6a6>
 8009912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009916:	095b      	lsrs	r3, r3, #5
 8009918:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800991c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009920:	f003 031f 	and.w	r3, r3, #31
 8009924:	2b00      	cmp	r3, #0
 8009926:	d104      	bne.n	8009932 <USB_EPStartXfer+0x62c>
 8009928:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800992c:	3b01      	subs	r3, #1
 800992e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009932:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009934:	881b      	ldrh	r3, [r3, #0]
 8009936:	b29a      	uxth	r2, r3
 8009938:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800993c:	b29b      	uxth	r3, r3
 800993e:	029b      	lsls	r3, r3, #10
 8009940:	b29b      	uxth	r3, r3
 8009942:	4313      	orrs	r3, r2
 8009944:	b29b      	uxth	r3, r3
 8009946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800994a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800994e:	b29a      	uxth	r2, r3
 8009950:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009952:	801a      	strh	r2, [r3, #0]
 8009954:	e02a      	b.n	80099ac <USB_EPStartXfer+0x6a6>
 8009956:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800995a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	785b      	ldrb	r3, [r3, #1]
 8009962:	2b01      	cmp	r3, #1
 8009964:	d122      	bne.n	80099ac <USB_EPStartXfer+0x6a6>
 8009966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800996a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	653b      	str	r3, [r7, #80]	@ 0x50
 8009972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009976:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009980:	b29b      	uxth	r3, r3
 8009982:	461a      	mov	r2, r3
 8009984:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009986:	4413      	add	r3, r2
 8009988:	653b      	str	r3, [r7, #80]	@ 0x50
 800998a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800998e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	781b      	ldrb	r3, [r3, #0]
 8009996:	00da      	lsls	r2, r3, #3
 8009998:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800999a:	4413      	add	r3, r2
 800999c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80099a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099a6:	b29a      	uxth	r2, r3
 80099a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80099ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	891b      	ldrh	r3, [r3, #8]
 80099b8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80099bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6959      	ldr	r1, [r3, #20]
 80099c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80099d2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80099d6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80099da:	6800      	ldr	r0, [r0, #0]
 80099dc:	f001 f97f 	bl	800acde <USB_WritePMA>
            ep->xfer_buff += len;
 80099e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	695a      	ldr	r2, [r3, #20]
 80099ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80099f0:	441a      	add	r2, r3
 80099f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80099f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80099fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	6a1a      	ldr	r2, [r3, #32]
 8009a0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	691b      	ldr	r3, [r3, #16]
 8009a16:	429a      	cmp	r2, r3
 8009a18:	d90f      	bls.n	8009a3a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	6a1a      	ldr	r2, [r3, #32]
 8009a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009a2a:	1ad2      	subs	r2, r2, r3
 8009a2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	621a      	str	r2, [r3, #32]
 8009a38:	e00e      	b.n	8009a58 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009a3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	6a1b      	ldr	r3, [r3, #32]
 8009a46:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8009a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	2200      	movs	r2, #0
 8009a56:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009a58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	643b      	str	r3, [r7, #64]	@ 0x40
 8009a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	785b      	ldrb	r3, [r3, #1]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d177      	bne.n	8009b64 <USB_EPStartXfer+0x85e>
 8009a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	461a      	mov	r2, r3
 8009a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a94:	4413      	add	r3, r2
 8009a96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009a9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	781b      	ldrb	r3, [r3, #0]
 8009aa4:	00da      	lsls	r2, r3, #3
 8009aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa8:	4413      	add	r3, r2
 8009aaa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009aae:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ab2:	881b      	ldrh	r3, [r3, #0]
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009aba:	b29a      	uxth	r2, r3
 8009abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009abe:	801a      	strh	r2, [r3, #0]
 8009ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10a      	bne.n	8009ade <USB_EPStartXfer+0x7d8>
 8009ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aca:	881b      	ldrh	r3, [r3, #0]
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ad6:	b29a      	uxth	r2, r3
 8009ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ada:	801a      	strh	r2, [r3, #0]
 8009adc:	e067      	b.n	8009bae <USB_EPStartXfer+0x8a8>
 8009ade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ae2:	2b3e      	cmp	r3, #62	@ 0x3e
 8009ae4:	d81c      	bhi.n	8009b20 <USB_EPStartXfer+0x81a>
 8009ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009aea:	085b      	lsrs	r3, r3, #1
 8009aec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009af0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009af4:	f003 0301 	and.w	r3, r3, #1
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d004      	beq.n	8009b06 <USB_EPStartXfer+0x800>
 8009afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b00:	3301      	adds	r3, #1
 8009b02:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b08:	881b      	ldrh	r3, [r3, #0]
 8009b0a:	b29a      	uxth	r2, r3
 8009b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	029b      	lsls	r3, r3, #10
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	4313      	orrs	r3, r2
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b1c:	801a      	strh	r2, [r3, #0]
 8009b1e:	e046      	b.n	8009bae <USB_EPStartXfer+0x8a8>
 8009b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b24:	095b      	lsrs	r3, r3, #5
 8009b26:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009b2e:	f003 031f 	and.w	r3, r3, #31
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d104      	bne.n	8009b40 <USB_EPStartXfer+0x83a>
 8009b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b42:	881b      	ldrh	r3, [r3, #0]
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	029b      	lsls	r3, r3, #10
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	4313      	orrs	r3, r2
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b5c:	b29a      	uxth	r2, r3
 8009b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b60:	801a      	strh	r2, [r3, #0]
 8009b62:	e024      	b.n	8009bae <USB_EPStartXfer+0x8a8>
 8009b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	785b      	ldrb	r3, [r3, #1]
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d11c      	bne.n	8009bae <USB_EPStartXfer+0x8a8>
 8009b74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	461a      	mov	r2, r3
 8009b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b88:	4413      	add	r3, r2
 8009b8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	00da      	lsls	r2, r3, #3
 8009b9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b9c:	4413      	add	r3, r2
 8009b9e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	895b      	ldrh	r3, [r3, #10]
 8009bba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	6959      	ldr	r1, [r3, #20]
 8009bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009bd4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009bd8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009bdc:	6800      	ldr	r0, [r0, #0]
 8009bde:	f001 f87e 	bl	800acde <USB_WritePMA>
 8009be2:	e227      	b.n	800a034 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	6a1b      	ldr	r3, [r3, #32]
 8009bf0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009bf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009bf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009bfc:	681a      	ldr	r2, [r3, #0]
 8009bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	009b      	lsls	r3, r3, #2
 8009c0c:	4413      	add	r3, r2
 8009c0e:	881b      	ldrh	r3, [r3, #0]
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009c16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c1a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009c1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	441a      	add	r2, r3
 8009c38:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009c3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009c50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	461a      	mov	r2, r3
 8009c6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c70:	4413      	add	r3, r2
 8009c72:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
 8009c80:	00da      	lsls	r2, r3, #3
 8009c82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c84:	4413      	add	r3, r2
 8009c86:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009c8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c94:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009c96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009c9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	891b      	ldrh	r3, [r3, #8]
 8009ca2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009caa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	6959      	ldr	r1, [r3, #20]
 8009cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009cbc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009cc0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009cc4:	6800      	ldr	r0, [r0, #0]
 8009cc6:	f001 f80a 	bl	800acde <USB_WritePMA>
 8009cca:	e1b3      	b.n	800a034 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009ccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	6a1a      	ldr	r2, [r3, #32]
 8009cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009cdc:	1ad2      	subs	r2, r2, r3
 8009cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ce2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009cea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009cf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	4413      	add	r3, r2
 8009d04:	881b      	ldrh	r3, [r3, #0]
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f000 80c6 	beq.w	8009e9e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	785b      	ldrb	r3, [r3, #1]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d177      	bne.n	8009e1e <USB_EPStartXfer+0xb18>
 8009d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d4e:	4413      	add	r3, r2
 8009d50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009d56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	00da      	lsls	r2, r3, #3
 8009d60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d62:	4413      	add	r3, r2
 8009d64:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009d68:	667b      	str	r3, [r7, #100]	@ 0x64
 8009d6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d6c:	881b      	ldrh	r3, [r3, #0]
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d78:	801a      	strh	r2, [r3, #0]
 8009d7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d10a      	bne.n	8009d98 <USB_EPStartXfer+0xa92>
 8009d82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d84:	881b      	ldrh	r3, [r3, #0]
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d94:	801a      	strh	r2, [r3, #0]
 8009d96:	e067      	b.n	8009e68 <USB_EPStartXfer+0xb62>
 8009d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009d9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009d9e:	d81c      	bhi.n	8009dda <USB_EPStartXfer+0xad4>
 8009da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009da4:	085b      	lsrs	r3, r3, #1
 8009da6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dae:	f003 0301 	and.w	r3, r3, #1
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d004      	beq.n	8009dc0 <USB_EPStartXfer+0xaba>
 8009db6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009dba:	3301      	adds	r3, #1
 8009dbc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009dc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009dc2:	881b      	ldrh	r3, [r3, #0]
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	029b      	lsls	r3, r3, #10
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009dd6:	801a      	strh	r2, [r3, #0]
 8009dd8:	e046      	b.n	8009e68 <USB_EPStartXfer+0xb62>
 8009dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009dde:	095b      	lsrs	r3, r3, #5
 8009de0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009de8:	f003 031f 	and.w	r3, r3, #31
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d104      	bne.n	8009dfa <USB_EPStartXfer+0xaf4>
 8009df0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009df4:	3b01      	subs	r3, #1
 8009df6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009dfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009dfc:	881b      	ldrh	r3, [r3, #0]
 8009dfe:	b29a      	uxth	r2, r3
 8009e00:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	029b      	lsls	r3, r3, #10
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e1a:	801a      	strh	r2, [r3, #0]
 8009e1c:	e024      	b.n	8009e68 <USB_EPStartXfer+0xb62>
 8009e1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	785b      	ldrb	r3, [r3, #1]
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d11c      	bne.n	8009e68 <USB_EPStartXfer+0xb62>
 8009e2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	461a      	mov	r2, r3
 8009e40:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e42:	4413      	add	r3, r2
 8009e44:	673b      	str	r3, [r7, #112]	@ 0x70
 8009e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	00da      	lsls	r2, r3, #3
 8009e54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009e56:	4413      	add	r3, r2
 8009e58:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009e5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009e5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e66:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	895b      	ldrh	r3, [r3, #10]
 8009e74:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009e7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	6959      	ldr	r1, [r3, #20]
 8009e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009e8e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8009e92:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8009e96:	6800      	ldr	r0, [r0, #0]
 8009e98:	f000 ff21 	bl	800acde <USB_WritePMA>
 8009e9c:	e0ca      	b.n	800a034 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009e9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	785b      	ldrb	r3, [r3, #1]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d177      	bne.n	8009f9e <USB_EPStartXfer+0xc98>
 8009eae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009eb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009eba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ebe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	461a      	mov	r2, r3
 8009ecc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009ece:	4413      	add	r3, r2
 8009ed0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009ed2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009ed6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	00da      	lsls	r2, r3, #3
 8009ee0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009ee2:	4413      	add	r3, r2
 8009ee4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009ee8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009eea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ef4:	b29a      	uxth	r2, r3
 8009ef6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ef8:	801a      	strh	r2, [r3, #0]
 8009efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d10a      	bne.n	8009f18 <USB_EPStartXfer+0xc12>
 8009f02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f04:	881b      	ldrh	r3, [r3, #0]
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f10:	b29a      	uxth	r2, r3
 8009f12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f14:	801a      	strh	r2, [r3, #0]
 8009f16:	e073      	b.n	800a000 <USB_EPStartXfer+0xcfa>
 8009f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f1c:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f1e:	d81c      	bhi.n	8009f5a <USB_EPStartXfer+0xc54>
 8009f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f24:	085b      	lsrs	r3, r3, #1
 8009f26:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f2e:	f003 0301 	and.w	r3, r3, #1
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d004      	beq.n	8009f40 <USB_EPStartXfer+0xc3a>
 8009f36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009f40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f42:	881b      	ldrh	r3, [r3, #0]
 8009f44:	b29a      	uxth	r2, r3
 8009f46:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	029b      	lsls	r3, r3, #10
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	4313      	orrs	r3, r2
 8009f52:	b29a      	uxth	r2, r3
 8009f54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f56:	801a      	strh	r2, [r3, #0]
 8009f58:	e052      	b.n	800a000 <USB_EPStartXfer+0xcfa>
 8009f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f5e:	095b      	lsrs	r3, r3, #5
 8009f60:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009f68:	f003 031f 	and.w	r3, r3, #31
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d104      	bne.n	8009f7a <USB_EPStartXfer+0xc74>
 8009f70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009f74:	3b01      	subs	r3, #1
 8009f76:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009f7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f7c:	881b      	ldrh	r3, [r3, #0]
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	029b      	lsls	r3, r3, #10
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f96:	b29a      	uxth	r2, r3
 8009f98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f9a:	801a      	strh	r2, [r3, #0]
 8009f9c:	e030      	b.n	800a000 <USB_EPStartXfer+0xcfa>
 8009f9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	785b      	ldrb	r3, [r3, #1]
 8009faa:	2b01      	cmp	r3, #1
 8009fac:	d128      	bne.n	800a000 <USB_EPStartXfer+0xcfa>
 8009fae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009fbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	461a      	mov	r2, r3
 8009fce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009fd2:	4413      	add	r3, r2
 8009fd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009fd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009fdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	00da      	lsls	r2, r3, #3
 8009fe6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009fea:	4413      	add	r3, r2
 8009fec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009ff0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009ffe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	891b      	ldrh	r3, [r3, #8]
 800a00c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	6959      	ldr	r1, [r3, #20]
 800a01c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a020:	b29b      	uxth	r3, r3
 800a022:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a026:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a02a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a02e:	6800      	ldr	r0, [r0, #0]
 800a030:	f000 fe55 	bl	800acde <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a038:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a042:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	4413      	add	r3, r2
 800a04e:	881b      	ldrh	r3, [r3, #0]
 800a050:	b29b      	uxth	r3, r3
 800a052:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a056:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a05a:	817b      	strh	r3, [r7, #10]
 800a05c:	897b      	ldrh	r3, [r7, #10]
 800a05e:	f083 0310 	eor.w	r3, r3, #16
 800a062:	817b      	strh	r3, [r7, #10]
 800a064:	897b      	ldrh	r3, [r7, #10]
 800a066:	f083 0320 	eor.w	r3, r3, #32
 800a06a:	817b      	strh	r3, [r7, #10]
 800a06c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a070:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a074:	681a      	ldr	r2, [r3, #0]
 800a076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a07a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	441a      	add	r2, r3
 800a086:	897b      	ldrh	r3, [r7, #10]
 800a088:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a08c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a090:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a094:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a098:	b29b      	uxth	r3, r3
 800a09a:	8013      	strh	r3, [r2, #0]
 800a09c:	f000 bcdf 	b.w	800aa5e <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a0a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	7b1b      	ldrb	r3, [r3, #12]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f040 80bc 	bne.w	800a22a <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a0b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	699a      	ldr	r2, [r3, #24]
 800a0be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	429a      	cmp	r2, r3
 800a0cc:	d917      	bls.n	800a0fe <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a0ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800a0de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	699a      	ldr	r2, [r3, #24]
 800a0ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a0ee:	1ad2      	subs	r2, r2, r3
 800a0f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a0f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	619a      	str	r2, [r3, #24]
 800a0fc:	e00e      	b.n	800a11c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a0fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800a10e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a112:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2200      	movs	r2, #0
 800a11a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a11c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a120:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a12a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a12e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a138:	b29b      	uxth	r3, r3
 800a13a:	461a      	mov	r2, r3
 800a13c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a140:	4413      	add	r3, r2
 800a142:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a14a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	00da      	lsls	r2, r3, #3
 800a154:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800a158:	4413      	add	r3, r2
 800a15a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a15e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a162:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a166:	881b      	ldrh	r3, [r3, #0]
 800a168:	b29b      	uxth	r3, r3
 800a16a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a16e:	b29a      	uxth	r2, r3
 800a170:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a174:	801a      	strh	r2, [r3, #0]
 800a176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d10d      	bne.n	800a19a <USB_EPStartXfer+0xe94>
 800a17e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a182:	881b      	ldrh	r3, [r3, #0]
 800a184:	b29b      	uxth	r3, r3
 800a186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a18a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a18e:	b29a      	uxth	r2, r3
 800a190:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a194:	801a      	strh	r2, [r3, #0]
 800a196:	f000 bc28 	b.w	800a9ea <USB_EPStartXfer+0x16e4>
 800a19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a19e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a1a0:	d81f      	bhi.n	800a1e2 <USB_EPStartXfer+0xedc>
 800a1a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1a6:	085b      	lsrs	r3, r3, #1
 800a1a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a1ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1b0:	f003 0301 	and.w	r3, r3, #1
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d004      	beq.n	800a1c2 <USB_EPStartXfer+0xebc>
 800a1b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a1bc:	3301      	adds	r3, #1
 800a1be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a1c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1c6:	881b      	ldrh	r3, [r3, #0]
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	029b      	lsls	r3, r3, #10
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	b29a      	uxth	r2, r3
 800a1d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a1dc:	801a      	strh	r2, [r3, #0]
 800a1de:	f000 bc04 	b.w	800a9ea <USB_EPStartXfer+0x16e4>
 800a1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1e6:	095b      	lsrs	r3, r3, #5
 800a1e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a1ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a1f0:	f003 031f 	and.w	r3, r3, #31
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d104      	bne.n	800a202 <USB_EPStartXfer+0xefc>
 800a1f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a1fc:	3b01      	subs	r3, #1
 800a1fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a202:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a206:	881b      	ldrh	r3, [r3, #0]
 800a208:	b29a      	uxth	r2, r3
 800a20a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800a20e:	b29b      	uxth	r3, r3
 800a210:	029b      	lsls	r3, r3, #10
 800a212:	b29b      	uxth	r3, r3
 800a214:	4313      	orrs	r3, r2
 800a216:	b29b      	uxth	r3, r3
 800a218:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a21c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a220:	b29a      	uxth	r2, r3
 800a222:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a226:	801a      	strh	r2, [r3, #0]
 800a228:	e3df      	b.n	800a9ea <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a22a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a22e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	78db      	ldrb	r3, [r3, #3]
 800a236:	2b02      	cmp	r3, #2
 800a238:	f040 8218 	bne.w	800a66c <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a23c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	785b      	ldrb	r3, [r3, #1]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	f040 809d 	bne.w	800a388 <USB_EPStartXfer+0x1082>
 800a24e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a252:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a25c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a260:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	461a      	mov	r2, r3
 800a26e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a272:	4413      	add	r3, r2
 800a274:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a27c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	00da      	lsls	r2, r3, #3
 800a286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a28a:	4413      	add	r3, r2
 800a28c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a290:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a294:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a298:	881b      	ldrh	r3, [r3, #0]
 800a29a:	b29b      	uxth	r3, r3
 800a29c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a2a6:	801a      	strh	r2, [r3, #0]
 800a2a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	691b      	ldr	r3, [r3, #16]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d10c      	bne.n	800a2d2 <USB_EPStartXfer+0xfcc>
 800a2b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a2bc:	881b      	ldrh	r3, [r3, #0]
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2c8:	b29a      	uxth	r2, r3
 800a2ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a2ce:	801a      	strh	r2, [r3, #0]
 800a2d0:	e08f      	b.n	800a3f2 <USB_EPStartXfer+0x10ec>
 800a2d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	2b3e      	cmp	r3, #62	@ 0x3e
 800a2e0:	d826      	bhi.n	800a330 <USB_EPStartXfer+0x102a>
 800a2e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	085b      	lsrs	r3, r3, #1
 800a2f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a2f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	691b      	ldr	r3, [r3, #16]
 800a300:	f003 0301 	and.w	r3, r3, #1
 800a304:	2b00      	cmp	r3, #0
 800a306:	d004      	beq.n	800a312 <USB_EPStartXfer+0x100c>
 800a308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a30c:	3301      	adds	r3, #1
 800a30e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a312:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a316:	881b      	ldrh	r3, [r3, #0]
 800a318:	b29a      	uxth	r2, r3
 800a31a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a31e:	b29b      	uxth	r3, r3
 800a320:	029b      	lsls	r3, r3, #10
 800a322:	b29b      	uxth	r3, r3
 800a324:	4313      	orrs	r3, r2
 800a326:	b29a      	uxth	r2, r3
 800a328:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a32c:	801a      	strh	r2, [r3, #0]
 800a32e:	e060      	b.n	800a3f2 <USB_EPStartXfer+0x10ec>
 800a330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	691b      	ldr	r3, [r3, #16]
 800a33c:	095b      	lsrs	r3, r3, #5
 800a33e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	f003 031f 	and.w	r3, r3, #31
 800a352:	2b00      	cmp	r3, #0
 800a354:	d104      	bne.n	800a360 <USB_EPStartXfer+0x105a>
 800a356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a35a:	3b01      	subs	r3, #1
 800a35c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a360:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a364:	881b      	ldrh	r3, [r3, #0]
 800a366:	b29a      	uxth	r2, r3
 800a368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a36c:	b29b      	uxth	r3, r3
 800a36e:	029b      	lsls	r3, r3, #10
 800a370:	b29b      	uxth	r3, r3
 800a372:	4313      	orrs	r3, r2
 800a374:	b29b      	uxth	r3, r3
 800a376:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a37a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a37e:	b29a      	uxth	r2, r3
 800a380:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800a384:	801a      	strh	r2, [r3, #0]
 800a386:	e034      	b.n	800a3f2 <USB_EPStartXfer+0x10ec>
 800a388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a38c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	785b      	ldrb	r3, [r3, #1]
 800a394:	2b01      	cmp	r3, #1
 800a396:	d12c      	bne.n	800a3f2 <USB_EPStartXfer+0x10ec>
 800a398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a39c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a3a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a3bc:	4413      	add	r3, r2
 800a3be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a3c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	781b      	ldrb	r3, [r3, #0]
 800a3ce:	00da      	lsls	r2, r3, #3
 800a3d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800a3d4:	4413      	add	r3, r2
 800a3d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a3da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a3de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	b29a      	uxth	r2, r3
 800a3ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800a3f0:	801a      	strh	r2, [r3, #0]
 800a3f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a400:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a404:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	785b      	ldrb	r3, [r3, #1]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	f040 809d 	bne.w	800a54c <USB_EPStartXfer+0x1246>
 800a412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a416:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a424:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a42e:	b29b      	uxth	r3, r3
 800a430:	461a      	mov	r2, r3
 800a432:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a436:	4413      	add	r3, r2
 800a438:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a43c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	00da      	lsls	r2, r3, #3
 800a44a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a44e:	4413      	add	r3, r2
 800a450:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a454:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a458:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a45c:	881b      	ldrh	r3, [r3, #0]
 800a45e:	b29b      	uxth	r3, r3
 800a460:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a464:	b29a      	uxth	r2, r3
 800a466:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a46a:	801a      	strh	r2, [r3, #0]
 800a46c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d10c      	bne.n	800a496 <USB_EPStartXfer+0x1190>
 800a47c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a480:	881b      	ldrh	r3, [r3, #0]
 800a482:	b29b      	uxth	r3, r3
 800a484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a48c:	b29a      	uxth	r2, r3
 800a48e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a492:	801a      	strh	r2, [r3, #0]
 800a494:	e088      	b.n	800a5a8 <USB_EPStartXfer+0x12a2>
 800a496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a49a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	691b      	ldr	r3, [r3, #16]
 800a4a2:	2b3e      	cmp	r3, #62	@ 0x3e
 800a4a4:	d826      	bhi.n	800a4f4 <USB_EPStartXfer+0x11ee>
 800a4a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	085b      	lsrs	r3, r3, #1
 800a4b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a4b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	691b      	ldr	r3, [r3, #16]
 800a4c4:	f003 0301 	and.w	r3, r3, #1
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d004      	beq.n	800a4d6 <USB_EPStartXfer+0x11d0>
 800a4cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a4d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a4da:	881b      	ldrh	r3, [r3, #0]
 800a4dc:	b29a      	uxth	r2, r3
 800a4de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4e2:	b29b      	uxth	r3, r3
 800a4e4:	029b      	lsls	r3, r3, #10
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a4f0:	801a      	strh	r2, [r3, #0]
 800a4f2:	e059      	b.n	800a5a8 <USB_EPStartXfer+0x12a2>
 800a4f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	691b      	ldr	r3, [r3, #16]
 800a500:	095b      	lsrs	r3, r3, #5
 800a502:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a50a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	f003 031f 	and.w	r3, r3, #31
 800a516:	2b00      	cmp	r3, #0
 800a518:	d104      	bne.n	800a524 <USB_EPStartXfer+0x121e>
 800a51a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a51e:	3b01      	subs	r3, #1
 800a520:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a524:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a528:	881b      	ldrh	r3, [r3, #0]
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a530:	b29b      	uxth	r3, r3
 800a532:	029b      	lsls	r3, r3, #10
 800a534:	b29b      	uxth	r3, r3
 800a536:	4313      	orrs	r3, r2
 800a538:	b29b      	uxth	r3, r3
 800a53a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a53e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a542:	b29a      	uxth	r2, r3
 800a544:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a548:	801a      	strh	r2, [r3, #0]
 800a54a:	e02d      	b.n	800a5a8 <USB_EPStartXfer+0x12a2>
 800a54c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a550:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	785b      	ldrb	r3, [r3, #1]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d125      	bne.n	800a5a8 <USB_EPStartXfer+0x12a2>
 800a55c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a560:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	461a      	mov	r2, r3
 800a56e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a572:	4413      	add	r3, r2
 800a574:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a578:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a57c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	781b      	ldrb	r3, [r3, #0]
 800a584:	00da      	lsls	r2, r3, #3
 800a586:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800a58a:	4413      	add	r3, r2
 800a58c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a590:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	691b      	ldr	r3, [r3, #16]
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a5a6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a5a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	69db      	ldr	r3, [r3, #28]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f000 8218 	beq.w	800a9ea <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a5ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	4413      	add	r3, r2
 800a5d4:	881b      	ldrh	r3, [r3, #0]
 800a5d6:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a5da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a5de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d005      	beq.n	800a5f2 <USB_EPStartXfer+0x12ec>
 800a5e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a5ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d10d      	bne.n	800a60e <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a5f2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a5f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f040 81f5 	bne.w	800a9ea <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a600:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800a604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f040 81ee 	bne.w	800a9ea <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a60e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a612:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a61c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	4413      	add	r3, r2
 800a628:	881b      	ldrh	r3, [r3, #0]
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a630:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a634:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800a638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a63c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a646:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	441a      	add	r2, r3
 800a652:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800a656:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a65a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a65e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a662:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a666:	b29b      	uxth	r3, r3
 800a668:	8013      	strh	r3, [r2, #0]
 800a66a:	e1be      	b.n	800a9ea <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a66c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	78db      	ldrb	r3, [r3, #3]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	f040 81b4 	bne.w	800a9e6 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a67e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a682:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	699a      	ldr	r2, [r3, #24]
 800a68a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a68e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	429a      	cmp	r2, r3
 800a698:	d917      	bls.n	800a6ca <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800a69a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a69e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	691b      	ldr	r3, [r3, #16]
 800a6a6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800a6aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	699a      	ldr	r2, [r3, #24]
 800a6b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6ba:	1ad2      	subs	r2, r2, r3
 800a6bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	619a      	str	r2, [r3, #24]
 800a6c8:	e00e      	b.n	800a6e8 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800a6ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	699b      	ldr	r3, [r3, #24]
 800a6d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800a6da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a6e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	785b      	ldrb	r3, [r3, #1]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f040 8085 	bne.w	800a804 <USB_EPStartXfer+0x14fe>
 800a6fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a70c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a716:	b29b      	uxth	r3, r3
 800a718:	461a      	mov	r2, r3
 800a71a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a71e:	4413      	add	r3, r2
 800a720:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	00da      	lsls	r2, r3, #3
 800a732:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800a736:	4413      	add	r3, r2
 800a738:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a73c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a740:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a744:	881b      	ldrh	r3, [r3, #0]
 800a746:	b29b      	uxth	r3, r3
 800a748:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a752:	801a      	strh	r2, [r3, #0]
 800a754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d10c      	bne.n	800a776 <USB_EPStartXfer+0x1470>
 800a75c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a760:	881b      	ldrh	r3, [r3, #0]
 800a762:	b29b      	uxth	r3, r3
 800a764:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a768:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a76c:	b29a      	uxth	r2, r3
 800a76e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a772:	801a      	strh	r2, [r3, #0]
 800a774:	e077      	b.n	800a866 <USB_EPStartXfer+0x1560>
 800a776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a77a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a77c:	d81e      	bhi.n	800a7bc <USB_EPStartXfer+0x14b6>
 800a77e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a782:	085b      	lsrs	r3, r3, #1
 800a784:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a78c:	f003 0301 	and.w	r3, r3, #1
 800a790:	2b00      	cmp	r3, #0
 800a792:	d004      	beq.n	800a79e <USB_EPStartXfer+0x1498>
 800a794:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a798:	3301      	adds	r3, #1
 800a79a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a79e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a7a2:	881b      	ldrh	r3, [r3, #0]
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7aa:	b29b      	uxth	r3, r3
 800a7ac:	029b      	lsls	r3, r3, #10
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	b29a      	uxth	r2, r3
 800a7b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a7b8:	801a      	strh	r2, [r3, #0]
 800a7ba:	e054      	b.n	800a866 <USB_EPStartXfer+0x1560>
 800a7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7c0:	095b      	lsrs	r3, r3, #5
 800a7c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7ca:	f003 031f 	and.w	r3, r3, #31
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d104      	bne.n	800a7dc <USB_EPStartXfer+0x14d6>
 800a7d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a7dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a7e0:	881b      	ldrh	r3, [r3, #0]
 800a7e2:	b29a      	uxth	r2, r3
 800a7e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a7e8:	b29b      	uxth	r3, r3
 800a7ea:	029b      	lsls	r3, r3, #10
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7fa:	b29a      	uxth	r2, r3
 800a7fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a800:	801a      	strh	r2, [r3, #0]
 800a802:	e030      	b.n	800a866 <USB_EPStartXfer+0x1560>
 800a804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	785b      	ldrb	r3, [r3, #1]
 800a810:	2b01      	cmp	r3, #1
 800a812:	d128      	bne.n	800a866 <USB_EPStartXfer+0x1560>
 800a814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a818:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a826:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a830:	b29b      	uxth	r3, r3
 800a832:	461a      	mov	r2, r3
 800a834:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a838:	4413      	add	r3, r2
 800a83a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a83e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	781b      	ldrb	r3, [r3, #0]
 800a84a:	00da      	lsls	r2, r3, #3
 800a84c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a850:	4413      	add	r3, r2
 800a852:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a856:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a85a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a85e:	b29a      	uxth	r2, r3
 800a860:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800a864:	801a      	strh	r2, [r3, #0]
 800a866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a86a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a874:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a878:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	785b      	ldrb	r3, [r3, #1]
 800a880:	2b00      	cmp	r3, #0
 800a882:	f040 8085 	bne.w	800a990 <USB_EPStartXfer+0x168a>
 800a886:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a88a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a898:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a8aa:	4413      	add	r3, r2
 800a8ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a8b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	781b      	ldrb	r3, [r3, #0]
 800a8bc:	00da      	lsls	r2, r3, #3
 800a8be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800a8c2:	4413      	add	r3, r2
 800a8c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a8c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a8cc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a8d0:	881b      	ldrh	r3, [r3, #0]
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a8d8:	b29a      	uxth	r2, r3
 800a8da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a8de:	801a      	strh	r2, [r3, #0]
 800a8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d10c      	bne.n	800a902 <USB_EPStartXfer+0x15fc>
 800a8e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a8ec:	881b      	ldrh	r3, [r3, #0]
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a8fe:	801a      	strh	r2, [r3, #0]
 800a900:	e073      	b.n	800a9ea <USB_EPStartXfer+0x16e4>
 800a902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a906:	2b3e      	cmp	r3, #62	@ 0x3e
 800a908:	d81e      	bhi.n	800a948 <USB_EPStartXfer+0x1642>
 800a90a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a90e:	085b      	lsrs	r3, r3, #1
 800a910:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d004      	beq.n	800a92a <USB_EPStartXfer+0x1624>
 800a920:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a924:	3301      	adds	r3, #1
 800a926:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a92a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a92e:	881b      	ldrh	r3, [r3, #0]
 800a930:	b29a      	uxth	r2, r3
 800a932:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a936:	b29b      	uxth	r3, r3
 800a938:	029b      	lsls	r3, r3, #10
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	4313      	orrs	r3, r2
 800a93e:	b29a      	uxth	r2, r3
 800a940:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a944:	801a      	strh	r2, [r3, #0]
 800a946:	e050      	b.n	800a9ea <USB_EPStartXfer+0x16e4>
 800a948:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a94c:	095b      	lsrs	r3, r3, #5
 800a94e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a956:	f003 031f 	and.w	r3, r3, #31
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d104      	bne.n	800a968 <USB_EPStartXfer+0x1662>
 800a95e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a962:	3b01      	subs	r3, #1
 800a964:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a968:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a96c:	881b      	ldrh	r3, [r3, #0]
 800a96e:	b29a      	uxth	r2, r3
 800a970:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a974:	b29b      	uxth	r3, r3
 800a976:	029b      	lsls	r3, r3, #10
 800a978:	b29b      	uxth	r3, r3
 800a97a:	4313      	orrs	r3, r2
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a982:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a986:	b29a      	uxth	r2, r3
 800a988:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a98c:	801a      	strh	r2, [r3, #0]
 800a98e:	e02c      	b.n	800a9ea <USB_EPStartXfer+0x16e4>
 800a990:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a994:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	785b      	ldrb	r3, [r3, #1]
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d124      	bne.n	800a9ea <USB_EPStartXfer+0x16e4>
 800a9a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a9b6:	4413      	add	r3, r2
 800a9b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a9bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	00da      	lsls	r2, r3, #3
 800a9ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800a9ce:	4413      	add	r3, r2
 800a9d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a9d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a9d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a9e2:	801a      	strh	r2, [r3, #0]
 800a9e4:	e001      	b.n	800a9ea <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e03a      	b.n	800aa60 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a9ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	4413      	add	r3, r2
 800aa04:	881b      	ldrh	r3, [r3, #0]
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa10:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800aa14:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800aa18:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aa1c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800aa20:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800aa24:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800aa28:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800aa2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	009b      	lsls	r3, r3, #2
 800aa44:	441a      	add	r2, r3
 800aa46:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800aa4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aa5e:	2300      	movs	r3, #0
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aa6a:	b480      	push	{r7}
 800aa6c:	b085      	sub	sp, #20
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
 800aa72:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	785b      	ldrb	r3, [r3, #1]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d020      	beq.n	800aabe <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	4413      	add	r3, r2
 800aa86:	881b      	ldrh	r3, [r3, #0]
 800aa88:	b29b      	uxth	r3, r3
 800aa8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa92:	81bb      	strh	r3, [r7, #12]
 800aa94:	89bb      	ldrh	r3, [r7, #12]
 800aa96:	f083 0310 	eor.w	r3, r3, #16
 800aa9a:	81bb      	strh	r3, [r7, #12]
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	441a      	add	r2, r3
 800aaa6:	89bb      	ldrh	r3, [r7, #12]
 800aaa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aaac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aab0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aab4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	8013      	strh	r3, [r2, #0]
 800aabc:	e01f      	b.n	800aafe <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	009b      	lsls	r3, r3, #2
 800aac6:	4413      	add	r3, r2
 800aac8:	881b      	ldrh	r3, [r3, #0]
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aad4:	81fb      	strh	r3, [r7, #14]
 800aad6:	89fb      	ldrh	r3, [r7, #14]
 800aad8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aadc:	81fb      	strh	r3, [r7, #14]
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	441a      	add	r2, r3
 800aae8:	89fb      	ldrh	r3, [r7, #14]
 800aaea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aaee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aaf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aaf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3714      	adds	r7, #20
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ab0c:	b480      	push	{r7}
 800ab0e:	b087      	sub	sp, #28
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	7b1b      	ldrb	r3, [r3, #12]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f040 809d 	bne.w	800ac5a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	785b      	ldrb	r3, [r3, #1]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d04c      	beq.n	800abc2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	009b      	lsls	r3, r3, #2
 800ab30:	4413      	add	r3, r2
 800ab32:	881b      	ldrh	r3, [r3, #0]
 800ab34:	823b      	strh	r3, [r7, #16]
 800ab36:	8a3b      	ldrh	r3, [r7, #16]
 800ab38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d01b      	beq.n	800ab78 <USB_EPClearStall+0x6c>
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4413      	add	r3, r2
 800ab4a:	881b      	ldrh	r3, [r3, #0]
 800ab4c:	b29b      	uxth	r3, r3
 800ab4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab56:	81fb      	strh	r3, [r7, #14]
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	441a      	add	r2, r3
 800ab62:	89fb      	ldrh	r3, [r7, #14]
 800ab64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab70:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	78db      	ldrb	r3, [r3, #3]
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d06c      	beq.n	800ac5a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	4413      	add	r3, r2
 800ab8a:	881b      	ldrh	r3, [r3, #0]
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab96:	81bb      	strh	r3, [r7, #12]
 800ab98:	89bb      	ldrh	r3, [r7, #12]
 800ab9a:	f083 0320 	eor.w	r3, r3, #32
 800ab9e:	81bb      	strh	r3, [r7, #12]
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	009b      	lsls	r3, r3, #2
 800aba8:	441a      	add	r2, r3
 800abaa:	89bb      	ldrh	r3, [r7, #12]
 800abac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abb0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	8013      	strh	r3, [r2, #0]
 800abc0:	e04b      	b.n	800ac5a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	4413      	add	r3, r2
 800abcc:	881b      	ldrh	r3, [r3, #0]
 800abce:	82fb      	strh	r3, [r7, #22]
 800abd0:	8afb      	ldrh	r3, [r7, #22]
 800abd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d01b      	beq.n	800ac12 <USB_EPClearStall+0x106>
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	4413      	add	r3, r2
 800abe4:	881b      	ldrh	r3, [r3, #0]
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abf0:	82bb      	strh	r3, [r7, #20]
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	441a      	add	r2, r3
 800abfc:	8abb      	ldrh	r3, [r7, #20]
 800abfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ac0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	4413      	add	r3, r2
 800ac1c:	881b      	ldrh	r3, [r3, #0]
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac28:	827b      	strh	r3, [r7, #18]
 800ac2a:	8a7b      	ldrh	r3, [r7, #18]
 800ac2c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ac30:	827b      	strh	r3, [r7, #18]
 800ac32:	8a7b      	ldrh	r3, [r7, #18]
 800ac34:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ac38:	827b      	strh	r3, [r7, #18]
 800ac3a:	687a      	ldr	r2, [r7, #4]
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	441a      	add	r2, r3
 800ac44:	8a7b      	ldrh	r3, [r7, #18]
 800ac46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ac5a:	2300      	movs	r3, #0
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	371c      	adds	r7, #28
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	460b      	mov	r3, r1
 800ac72:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ac74:	78fb      	ldrb	r3, [r7, #3]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d103      	bne.n	800ac82 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2280      	movs	r2, #128	@ 0x80
 800ac7e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800ac82:	2300      	movs	r3, #0
}
 800ac84:	4618      	mov	r0, r3
 800ac86:	370c      	adds	r7, #12
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b083      	sub	sp, #12
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aca4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800acb0:	2300      	movs	r3, #0
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	370c      	adds	r7, #12
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr

0800acbe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800acbe:	b480      	push	{r7}
 800acc0:	b085      	sub	sp, #20
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800accc:	b29b      	uxth	r3, r3
 800acce:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800acd0:	68fb      	ldr	r3, [r7, #12]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3714      	adds	r7, #20
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr

0800acde <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800acde:	b480      	push	{r7}
 800ace0:	b08b      	sub	sp, #44	@ 0x2c
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	60f8      	str	r0, [r7, #12]
 800ace6:	60b9      	str	r1, [r7, #8]
 800ace8:	4611      	mov	r1, r2
 800acea:	461a      	mov	r2, r3
 800acec:	460b      	mov	r3, r1
 800acee:	80fb      	strh	r3, [r7, #6]
 800acf0:	4613      	mov	r3, r2
 800acf2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800acf4:	88bb      	ldrh	r3, [r7, #4]
 800acf6:	3301      	adds	r3, #1
 800acf8:	085b      	lsrs	r3, r3, #1
 800acfa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad04:	88fa      	ldrh	r2, [r7, #6]
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	4413      	add	r3, r2
 800ad0a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad0e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad14:	e01b      	b.n	800ad4e <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	021b      	lsls	r3, r3, #8
 800ad24:	b21a      	sxth	r2, r3
 800ad26:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad2a:	4313      	orrs	r3, r2
 800ad2c:	b21b      	sxth	r3, r3
 800ad2e:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ad30:	6a3b      	ldr	r3, [r7, #32]
 800ad32:	8a7a      	ldrh	r2, [r7, #18]
 800ad34:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ad36:	6a3b      	ldr	r3, [r7, #32]
 800ad38:	3302      	adds	r3, #2
 800ad3a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ad3c:	69fb      	ldr	r3, [r7, #28]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ad42:	69fb      	ldr	r3, [r7, #28]
 800ad44:	3301      	adds	r3, #1
 800ad46:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ad48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d1e0      	bne.n	800ad16 <USB_WritePMA+0x38>
  }
}
 800ad54:	bf00      	nop
 800ad56:	bf00      	nop
 800ad58:	372c      	adds	r7, #44	@ 0x2c
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr

0800ad62 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ad62:	b480      	push	{r7}
 800ad64:	b08b      	sub	sp, #44	@ 0x2c
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	60f8      	str	r0, [r7, #12]
 800ad6a:	60b9      	str	r1, [r7, #8]
 800ad6c:	4611      	mov	r1, r2
 800ad6e:	461a      	mov	r2, r3
 800ad70:	460b      	mov	r3, r1
 800ad72:	80fb      	strh	r3, [r7, #6]
 800ad74:	4613      	mov	r3, r2
 800ad76:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ad78:	88bb      	ldrh	r3, [r7, #4]
 800ad7a:	085b      	lsrs	r3, r3, #1
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad88:	88fa      	ldrh	r2, [r7, #6]
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ad92:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ad94:	69bb      	ldr	r3, [r7, #24]
 800ad96:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad98:	e018      	b.n	800adcc <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ad9a:	6a3b      	ldr	r3, [r7, #32]
 800ad9c:	881b      	ldrh	r3, [r3, #0]
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ada2:	6a3b      	ldr	r3, [r7, #32]
 800ada4:	3302      	adds	r3, #2
 800ada6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	b2da      	uxtb	r2, r3
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	3301      	adds	r3, #1
 800adb4:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	0a1b      	lsrs	r3, r3, #8
 800adba:	b2da      	uxtb	r2, r3
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	3301      	adds	r3, #1
 800adc4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800adc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc8:	3b01      	subs	r3, #1
 800adca:	627b      	str	r3, [r7, #36]	@ 0x24
 800adcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adce:	2b00      	cmp	r3, #0
 800add0:	d1e3      	bne.n	800ad9a <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800add2:	88bb      	ldrh	r3, [r7, #4]
 800add4:	f003 0301 	and.w	r3, r3, #1
 800add8:	b29b      	uxth	r3, r3
 800adda:	2b00      	cmp	r3, #0
 800addc:	d007      	beq.n	800adee <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800adde:	6a3b      	ldr	r3, [r7, #32]
 800ade0:	881b      	ldrh	r3, [r3, #0]
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	b2da      	uxtb	r2, r3
 800adea:	69fb      	ldr	r3, [r7, #28]
 800adec:	701a      	strb	r2, [r3, #0]
  }
}
 800adee:	bf00      	nop
 800adf0:	372c      	adds	r7, #44	@ 0x2c
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr

0800adfa <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b084      	sub	sp, #16
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	6078      	str	r0, [r7, #4]
 800ae02:	460b      	mov	r3, r1
 800ae04:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ae06:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ae0a:	f002 f903 	bl	800d014 <USBD_static_malloc>
 800ae0e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d105      	bne.n	800ae22 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800ae1e:	2302      	movs	r3, #2
 800ae20:	e066      	b.n	800aef0 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	68fa      	ldr	r2, [r7, #12]
 800ae26:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	7c1b      	ldrb	r3, [r3, #16]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d119      	bne.n	800ae66 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ae32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ae36:	2202      	movs	r2, #2
 800ae38:	2181      	movs	r1, #129	@ 0x81
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f001 ff91 	bl	800cd62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2201      	movs	r2, #1
 800ae44:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ae46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ae4a:	2202      	movs	r2, #2
 800ae4c:	2101      	movs	r1, #1
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f001 ff87 	bl	800cd62 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2201      	movs	r2, #1
 800ae58:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2210      	movs	r2, #16
 800ae60:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800ae64:	e016      	b.n	800ae94 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ae66:	2340      	movs	r3, #64	@ 0x40
 800ae68:	2202      	movs	r2, #2
 800ae6a:	2181      	movs	r1, #129	@ 0x81
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f001 ff78 	bl	800cd62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2201      	movs	r2, #1
 800ae76:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ae78:	2340      	movs	r3, #64	@ 0x40
 800ae7a:	2202      	movs	r2, #2
 800ae7c:	2101      	movs	r1, #1
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f001 ff6f 	bl	800cd62 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2201      	movs	r2, #1
 800ae88:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2210      	movs	r2, #16
 800ae90:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ae94:	2308      	movs	r3, #8
 800ae96:	2203      	movs	r2, #3
 800ae98:	2182      	movs	r1, #130	@ 0x82
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f001 ff61 	bl	800cd62 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2201      	movs	r2, #1
 800aea4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	7c1b      	ldrb	r3, [r3, #16]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d109      	bne.n	800aede <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aed0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aed4:	2101      	movs	r1, #1
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f002 f832 	bl	800cf40 <USBD_LL_PrepareReceive>
 800aedc:	e007      	b.n	800aeee <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aee4:	2340      	movs	r3, #64	@ 0x40
 800aee6:	2101      	movs	r1, #1
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f002 f829 	bl	800cf40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	460b      	mov	r3, r1
 800af02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800af04:	2181      	movs	r1, #129	@ 0x81
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f001 ff51 	bl	800cdae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800af12:	2101      	movs	r1, #1
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f001 ff4a 	bl	800cdae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800af22:	2182      	movs	r1, #130	@ 0x82
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f001 ff42 	bl	800cdae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2200      	movs	r2, #0
 800af2e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2200      	movs	r2, #0
 800af36:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00e      	beq.n	800af62 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800af4a:	685b      	ldr	r3, [r3, #4]
 800af4c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800af54:	4618      	mov	r0, r3
 800af56:	f002 f86b 	bl	800d030 <USBD_static_free>
    pdev->pClassData = NULL;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800af62:	2300      	movs	r3, #0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3708      	adds	r7, #8
 800af68:	46bd      	mov	sp, r7
 800af6a:	bd80      	pop	{r7, pc}

0800af6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b086      	sub	sp, #24
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800af7c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800af7e:	2300      	movs	r3, #0
 800af80:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800af82:	2300      	movs	r3, #0
 800af84:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800af86:	2300      	movs	r3, #0
 800af88:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d101      	bne.n	800af94 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800af90:	2303      	movs	r3, #3
 800af92:	e0af      	b.n	800b0f4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d03f      	beq.n	800b020 <USBD_CDC_Setup+0xb4>
 800afa0:	2b20      	cmp	r3, #32
 800afa2:	f040 809f 	bne.w	800b0e4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	88db      	ldrh	r3, [r3, #6]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d02e      	beq.n	800b00c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	b25b      	sxtb	r3, r3
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	da16      	bge.n	800afe6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800afbe:	689b      	ldr	r3, [r3, #8]
 800afc0:	683a      	ldr	r2, [r7, #0]
 800afc2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800afc4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800afc6:	683a      	ldr	r2, [r7, #0]
 800afc8:	88d2      	ldrh	r2, [r2, #6]
 800afca:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	88db      	ldrh	r3, [r3, #6]
 800afd0:	2b07      	cmp	r3, #7
 800afd2:	bf28      	it	cs
 800afd4:	2307      	movcs	r3, #7
 800afd6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800afd8:	693b      	ldr	r3, [r7, #16]
 800afda:	89fa      	ldrh	r2, [r7, #14]
 800afdc:	4619      	mov	r1, r3
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f001 facd 	bl	800c57e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800afe4:	e085      	b.n	800b0f2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	785a      	ldrb	r2, [r3, #1]
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	88db      	ldrh	r3, [r3, #6]
 800aff4:	b2da      	uxtb	r2, r3
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800affc:	6939      	ldr	r1, [r7, #16]
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	88db      	ldrh	r3, [r3, #6]
 800b002:	461a      	mov	r2, r3
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f001 fae6 	bl	800c5d6 <USBD_CtlPrepareRx>
      break;
 800b00a:	e072      	b.n	800b0f2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	683a      	ldr	r2, [r7, #0]
 800b016:	7850      	ldrb	r0, [r2, #1]
 800b018:	2200      	movs	r2, #0
 800b01a:	6839      	ldr	r1, [r7, #0]
 800b01c:	4798      	blx	r3
      break;
 800b01e:	e068      	b.n	800b0f2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	785b      	ldrb	r3, [r3, #1]
 800b024:	2b0b      	cmp	r3, #11
 800b026:	d852      	bhi.n	800b0ce <USBD_CDC_Setup+0x162>
 800b028:	a201      	add	r2, pc, #4	@ (adr r2, 800b030 <USBD_CDC_Setup+0xc4>)
 800b02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b02e:	bf00      	nop
 800b030:	0800b061 	.word	0x0800b061
 800b034:	0800b0dd 	.word	0x0800b0dd
 800b038:	0800b0cf 	.word	0x0800b0cf
 800b03c:	0800b0cf 	.word	0x0800b0cf
 800b040:	0800b0cf 	.word	0x0800b0cf
 800b044:	0800b0cf 	.word	0x0800b0cf
 800b048:	0800b0cf 	.word	0x0800b0cf
 800b04c:	0800b0cf 	.word	0x0800b0cf
 800b050:	0800b0cf 	.word	0x0800b0cf
 800b054:	0800b0cf 	.word	0x0800b0cf
 800b058:	0800b08b 	.word	0x0800b08b
 800b05c:	0800b0b5 	.word	0x0800b0b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b066:	b2db      	uxtb	r3, r3
 800b068:	2b03      	cmp	r3, #3
 800b06a:	d107      	bne.n	800b07c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b06c:	f107 030a 	add.w	r3, r7, #10
 800b070:	2202      	movs	r2, #2
 800b072:	4619      	mov	r1, r3
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f001 fa82 	bl	800c57e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b07a:	e032      	b.n	800b0e2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f001 fa0c 	bl	800c49c <USBD_CtlError>
            ret = USBD_FAIL;
 800b084:	2303      	movs	r3, #3
 800b086:	75fb      	strb	r3, [r7, #23]
          break;
 800b088:	e02b      	b.n	800b0e2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b090:	b2db      	uxtb	r3, r3
 800b092:	2b03      	cmp	r3, #3
 800b094:	d107      	bne.n	800b0a6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b096:	f107 030d 	add.w	r3, r7, #13
 800b09a:	2201      	movs	r2, #1
 800b09c:	4619      	mov	r1, r3
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f001 fa6d 	bl	800c57e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0a4:	e01d      	b.n	800b0e2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b0a6:	6839      	ldr	r1, [r7, #0]
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f001 f9f7 	bl	800c49c <USBD_CtlError>
            ret = USBD_FAIL;
 800b0ae:	2303      	movs	r3, #3
 800b0b0:	75fb      	strb	r3, [r7, #23]
          break;
 800b0b2:	e016      	b.n	800b0e2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0ba:	b2db      	uxtb	r3, r3
 800b0bc:	2b03      	cmp	r3, #3
 800b0be:	d00f      	beq.n	800b0e0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b0c0:	6839      	ldr	r1, [r7, #0]
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f001 f9ea 	bl	800c49c <USBD_CtlError>
            ret = USBD_FAIL;
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b0cc:	e008      	b.n	800b0e0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f001 f9e3 	bl	800c49c <USBD_CtlError>
          ret = USBD_FAIL;
 800b0d6:	2303      	movs	r3, #3
 800b0d8:	75fb      	strb	r3, [r7, #23]
          break;
 800b0da:	e002      	b.n	800b0e2 <USBD_CDC_Setup+0x176>
          break;
 800b0dc:	bf00      	nop
 800b0de:	e008      	b.n	800b0f2 <USBD_CDC_Setup+0x186>
          break;
 800b0e0:	bf00      	nop
      }
      break;
 800b0e2:	e006      	b.n	800b0f2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b0e4:	6839      	ldr	r1, [r7, #0]
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f001 f9d8 	bl	800c49c <USBD_CtlError>
      ret = USBD_FAIL;
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	75fb      	strb	r3, [r7, #23]
      break;
 800b0f0:	bf00      	nop
  }

  return (uint8_t)ret;
 800b0f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3718      	adds	r7, #24
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	460b      	mov	r3, r1
 800b106:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b10e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b116:	2b00      	cmp	r3, #0
 800b118:	d101      	bne.n	800b11e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b11a:	2303      	movs	r3, #3
 800b11c:	e04f      	b.n	800b1be <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b124:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b126:	78fa      	ldrb	r2, [r7, #3]
 800b128:	6879      	ldr	r1, [r7, #4]
 800b12a:	4613      	mov	r3, r2
 800b12c:	009b      	lsls	r3, r3, #2
 800b12e:	4413      	add	r3, r2
 800b130:	009b      	lsls	r3, r3, #2
 800b132:	440b      	add	r3, r1
 800b134:	3318      	adds	r3, #24
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d029      	beq.n	800b190 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b13c:	78fa      	ldrb	r2, [r7, #3]
 800b13e:	6879      	ldr	r1, [r7, #4]
 800b140:	4613      	mov	r3, r2
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	4413      	add	r3, r2
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	440b      	add	r3, r1
 800b14a:	3318      	adds	r3, #24
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	78f9      	ldrb	r1, [r7, #3]
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	460b      	mov	r3, r1
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	440b      	add	r3, r1
 800b158:	00db      	lsls	r3, r3, #3
 800b15a:	4403      	add	r3, r0
 800b15c:	3320      	adds	r3, #32
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	fbb2 f1f3 	udiv	r1, r2, r3
 800b164:	fb01 f303 	mul.w	r3, r1, r3
 800b168:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d110      	bne.n	800b190 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b16e:	78fa      	ldrb	r2, [r7, #3]
 800b170:	6879      	ldr	r1, [r7, #4]
 800b172:	4613      	mov	r3, r2
 800b174:	009b      	lsls	r3, r3, #2
 800b176:	4413      	add	r3, r2
 800b178:	009b      	lsls	r3, r3, #2
 800b17a:	440b      	add	r3, r1
 800b17c:	3318      	adds	r3, #24
 800b17e:	2200      	movs	r2, #0
 800b180:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b182:	78f9      	ldrb	r1, [r7, #3]
 800b184:	2300      	movs	r3, #0
 800b186:	2200      	movs	r2, #0
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f001 feb8 	bl	800cefe <USBD_LL_Transmit>
 800b18e:	e015      	b.n	800b1bc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	2200      	movs	r2, #0
 800b194:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b19e:	691b      	ldr	r3, [r3, #16]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d00b      	beq.n	800b1bc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b1aa:	691b      	ldr	r3, [r3, #16]
 800b1ac:	68ba      	ldr	r2, [r7, #8]
 800b1ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b1b2:	68ba      	ldr	r2, [r7, #8]
 800b1b4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b1b8:	78fa      	ldrb	r2, [r7, #3]
 800b1ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3710      	adds	r7, #16
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b084      	sub	sp, #16
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	6078      	str	r0, [r7, #4]
 800b1ce:	460b      	mov	r3, r1
 800b1d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d101      	bne.n	800b1e8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b1e4:	2303      	movs	r3, #3
 800b1e6:	e015      	b.n	800b214 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b1e8:	78fb      	ldrb	r3, [r7, #3]
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f001 fec8 	bl	800cf82 <USBD_LL_GetRxDataSize>
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b200:	68db      	ldr	r3, [r3, #12]
 800b202:	68fa      	ldr	r2, [r7, #12]
 800b204:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b20e:	4611      	mov	r1, r2
 800b210:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b212:	2300      	movs	r3, #0
}
 800b214:	4618      	mov	r0, r3
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b084      	sub	sp, #16
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b22a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d101      	bne.n	800b236 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b232:	2303      	movs	r3, #3
 800b234:	e01a      	b.n	800b26c <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d014      	beq.n	800b26a <USBD_CDC_EP0_RxReady+0x4e>
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b246:	2bff      	cmp	r3, #255	@ 0xff
 800b248:	d00f      	beq.n	800b26a <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	68fa      	ldr	r2, [r7, #12]
 800b254:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800b258:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b25a:	68fa      	ldr	r2, [r7, #12]
 800b25c:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b260:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	22ff      	movs	r2, #255	@ 0xff
 800b266:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b26a:	2300      	movs	r3, #0
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3710      	adds	r7, #16
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2243      	movs	r2, #67	@ 0x43
 800b280:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b282:	4b03      	ldr	r3, [pc, #12]	@ (800b290 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b284:	4618      	mov	r0, r3
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr
 800b290:	20000098 	.word	0x20000098

0800b294 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2243      	movs	r2, #67	@ 0x43
 800b2a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b2a2:	4b03      	ldr	r3, [pc, #12]	@ (800b2b0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr
 800b2b0:	20000054 	.word	0x20000054

0800b2b4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2243      	movs	r2, #67	@ 0x43
 800b2c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b2c2:	4b03      	ldr	r3, [pc, #12]	@ (800b2d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	370c      	adds	r7, #12
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ce:	4770      	bx	lr
 800b2d0:	200000dc 	.word	0x200000dc

0800b2d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b2d4:	b480      	push	{r7}
 800b2d6:	b083      	sub	sp, #12
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	220a      	movs	r2, #10
 800b2e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b2e2:	4b03      	ldr	r3, [pc, #12]	@ (800b2f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr
 800b2f0:	20000010 	.word	0x20000010

0800b2f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b083      	sub	sp, #12
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d101      	bne.n	800b308 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b304:	2303      	movs	r3, #3
 800b306:	e004      	b.n	800b312 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	683a      	ldr	r2, [r7, #0]
 800b30c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	370c      	adds	r7, #12
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr

0800b31e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b31e:	b480      	push	{r7}
 800b320:	b087      	sub	sp, #28
 800b322:	af00      	add	r7, sp, #0
 800b324:	60f8      	str	r0, [r7, #12]
 800b326:	60b9      	str	r1, [r7, #8]
 800b328:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b330:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d101      	bne.n	800b33c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b338:	2303      	movs	r3, #3
 800b33a:	e008      	b.n	800b34e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	68ba      	ldr	r2, [r7, #8]
 800b340:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b34c:	2300      	movs	r3, #0
}
 800b34e:	4618      	mov	r0, r3
 800b350:	371c      	adds	r7, #28
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr

0800b35a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b35a:	b480      	push	{r7}
 800b35c:	b085      	sub	sp, #20
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
 800b362:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b36a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d101      	bne.n	800b376 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b372:	2303      	movs	r3, #3
 800b374:	e004      	b.n	800b380 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	683a      	ldr	r2, [r7, #0]
 800b37a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b37e:	2300      	movs	r3, #0
}
 800b380:	4618      	mov	r0, r3
 800b382:	3714      	adds	r7, #20
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b39a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b39c:	2301      	movs	r3, #1
 800b39e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d101      	bne.n	800b3ae <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b3aa:	2303      	movs	r3, #3
 800b3ac:	e01a      	b.n	800b3e4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d114      	bne.n	800b3e2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b3d6:	2181      	movs	r1, #129	@ 0x81
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	f001 fd90 	bl	800cefe <USBD_LL_Transmit>

    ret = USBD_OK;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b3e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3710      	adds	r7, #16
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b3fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b402:	2b00      	cmp	r3, #0
 800b404:	d101      	bne.n	800b40a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b406:	2303      	movs	r3, #3
 800b408:	e016      	b.n	800b438 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	7c1b      	ldrb	r3, [r3, #16]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d109      	bne.n	800b426 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b418:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b41c:	2101      	movs	r1, #1
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f001 fd8e 	bl	800cf40 <USBD_LL_PrepareReceive>
 800b424:	e007      	b.n	800b436 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b42c:	2340      	movs	r3, #64	@ 0x40
 800b42e:	2101      	movs	r1, #1
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f001 fd85 	bl	800cf40 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b436:	2300      	movs	r3, #0
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3710      	adds	r7, #16
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b086      	sub	sp, #24
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	60b9      	str	r1, [r7, #8]
 800b44a:	4613      	mov	r3, r2
 800b44c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d101      	bne.n	800b458 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b454:	2303      	movs	r3, #3
 800b456:	e01f      	b.n	800b498 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	2200      	movs	r2, #0
 800b45c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2200      	movs	r2, #0
 800b464:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	2200      	movs	r2, #0
 800b46c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d003      	beq.n	800b47e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	68ba      	ldr	r2, [r7, #8]
 800b47a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2201      	movs	r2, #1
 800b482:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	79fa      	ldrb	r2, [r7, #7]
 800b48a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	f001 fbed 	bl	800cc6c <USBD_LL_Init>
 800b492:	4603      	mov	r3, r0
 800b494:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b496:	7dfb      	ldrb	r3, [r7, #23]
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3718      	adds	r7, #24
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b4ae:	683b      	ldr	r3, [r7, #0]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b4b4:	2303      	movs	r3, #3
 800b4b6:	e016      	b.n	800b4e6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	683a      	ldr	r2, [r7, #0]
 800b4bc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d00b      	beq.n	800b4e4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4d4:	f107 020e 	add.w	r2, r7, #14
 800b4d8:	4610      	mov	r0, r2
 800b4da:	4798      	blx	r3
 800b4dc:	4602      	mov	r2, r0
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3710      	adds	r7, #16
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b082      	sub	sp, #8
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b4f6:	6878      	ldr	r0, [r7, #4]
 800b4f8:	f001 fc18 	bl	800cd2c <USBD_LL_Start>
 800b4fc:	4603      	mov	r3, r0
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3708      	adds	r7, #8
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b506:	b480      	push	{r7}
 800b508:	b083      	sub	sp, #12
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b50e:	2300      	movs	r3, #0
}
 800b510:	4618      	mov	r0, r3
 800b512:	370c      	adds	r7, #12
 800b514:	46bd      	mov	sp, r7
 800b516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51a:	4770      	bx	lr

0800b51c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	460b      	mov	r3, r1
 800b526:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b528:	2303      	movs	r3, #3
 800b52a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b532:	2b00      	cmp	r3, #0
 800b534:	d009      	beq.n	800b54a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	78fa      	ldrb	r2, [r7, #3]
 800b540:	4611      	mov	r1, r2
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	4798      	blx	r3
 800b546:	4603      	mov	r3, r0
 800b548:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b54a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b082      	sub	sp, #8
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	460b      	mov	r3, r1
 800b55e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b566:	2b00      	cmp	r3, #0
 800b568:	d007      	beq.n	800b57a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	78fa      	ldrb	r2, [r7, #3]
 800b574:	4611      	mov	r1, r2
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	4798      	blx	r3
  }

  return USBD_OK;
 800b57a:	2300      	movs	r3, #0
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3708      	adds	r7, #8
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}

0800b584 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
 800b58c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b594:	6839      	ldr	r1, [r7, #0]
 800b596:	4618      	mov	r0, r3
 800b598:	f000 ff46 	bl	800c428 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b5aa:	461a      	mov	r2, r3
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b5b8:	f003 031f 	and.w	r3, r3, #31
 800b5bc:	2b02      	cmp	r3, #2
 800b5be:	d01a      	beq.n	800b5f6 <USBD_LL_SetupStage+0x72>
 800b5c0:	2b02      	cmp	r3, #2
 800b5c2:	d822      	bhi.n	800b60a <USBD_LL_SetupStage+0x86>
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d002      	beq.n	800b5ce <USBD_LL_SetupStage+0x4a>
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d00a      	beq.n	800b5e2 <USBD_LL_SetupStage+0x5e>
 800b5cc:	e01d      	b.n	800b60a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	6878      	ldr	r0, [r7, #4]
 800b5d8:	f000 f9ee 	bl	800b9b8 <USBD_StdDevReq>
 800b5dc:	4603      	mov	r3, r0
 800b5de:	73fb      	strb	r3, [r7, #15]
      break;
 800b5e0:	e020      	b.n	800b624 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b5e8:	4619      	mov	r1, r3
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 fa52 	bl	800ba94 <USBD_StdItfReq>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	73fb      	strb	r3, [r7, #15]
      break;
 800b5f4:	e016      	b.n	800b624 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 fa91 	bl	800bb26 <USBD_StdEPReq>
 800b604:	4603      	mov	r3, r0
 800b606:	73fb      	strb	r3, [r7, #15]
      break;
 800b608:	e00c      	b.n	800b624 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b610:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b614:	b2db      	uxtb	r3, r3
 800b616:	4619      	mov	r1, r3
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f001 fbe7 	bl	800cdec <USBD_LL_StallEP>
 800b61e:	4603      	mov	r3, r0
 800b620:	73fb      	strb	r3, [r7, #15]
      break;
 800b622:	bf00      	nop
  }

  return ret;
 800b624:	7bfb      	ldrb	r3, [r7, #15]
}
 800b626:	4618      	mov	r0, r3
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b62e:	b580      	push	{r7, lr}
 800b630:	b086      	sub	sp, #24
 800b632:	af00      	add	r7, sp, #0
 800b634:	60f8      	str	r0, [r7, #12]
 800b636:	460b      	mov	r3, r1
 800b638:	607a      	str	r2, [r7, #4]
 800b63a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b63c:	7afb      	ldrb	r3, [r7, #11]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d138      	bne.n	800b6b4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b648:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b650:	2b03      	cmp	r3, #3
 800b652:	d14a      	bne.n	800b6ea <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	689a      	ldr	r2, [r3, #8]
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d913      	bls.n	800b688 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b660:	693b      	ldr	r3, [r7, #16]
 800b662:	689a      	ldr	r2, [r3, #8]
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	1ad2      	subs	r2, r2, r3
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	68da      	ldr	r2, [r3, #12]
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	4293      	cmp	r3, r2
 800b678:	bf28      	it	cs
 800b67a:	4613      	movcs	r3, r2
 800b67c:	461a      	mov	r2, r3
 800b67e:	6879      	ldr	r1, [r7, #4]
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	f000 ffc5 	bl	800c610 <USBD_CtlContinueRx>
 800b686:	e030      	b.n	800b6ea <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	2b03      	cmp	r3, #3
 800b692:	d10b      	bne.n	800b6ac <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b69a:	691b      	ldr	r3, [r3, #16]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d005      	beq.n	800b6ac <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6a6:	691b      	ldr	r3, [r3, #16]
 800b6a8:	68f8      	ldr	r0, [r7, #12]
 800b6aa:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	f000 ffc0 	bl	800c632 <USBD_CtlSendStatus>
 800b6b2:	e01a      	b.n	800b6ea <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	2b03      	cmp	r3, #3
 800b6be:	d114      	bne.n	800b6ea <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6c6:	699b      	ldr	r3, [r3, #24]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00e      	beq.n	800b6ea <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6d2:	699b      	ldr	r3, [r3, #24]
 800b6d4:	7afa      	ldrb	r2, [r7, #11]
 800b6d6:	4611      	mov	r1, r2
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	4798      	blx	r3
 800b6dc:	4603      	mov	r3, r0
 800b6de:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b6e0:	7dfb      	ldrb	r3, [r7, #23]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d001      	beq.n	800b6ea <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b6e6:	7dfb      	ldrb	r3, [r7, #23]
 800b6e8:	e000      	b.n	800b6ec <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b6ea:	2300      	movs	r3, #0
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3718      	adds	r7, #24
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b086      	sub	sp, #24
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	607a      	str	r2, [r7, #4]
 800b700:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b702:	7afb      	ldrb	r3, [r7, #11]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d16b      	bne.n	800b7e0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	3314      	adds	r3, #20
 800b70c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b714:	2b02      	cmp	r3, #2
 800b716:	d156      	bne.n	800b7c6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	689a      	ldr	r2, [r3, #8]
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	68db      	ldr	r3, [r3, #12]
 800b720:	429a      	cmp	r2, r3
 800b722:	d914      	bls.n	800b74e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	689a      	ldr	r2, [r3, #8]
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	1ad2      	subs	r2, r2, r3
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	461a      	mov	r2, r3
 800b738:	6879      	ldr	r1, [r7, #4]
 800b73a:	68f8      	ldr	r0, [r7, #12]
 800b73c:	f000 ff3a 	bl	800c5b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b740:	2300      	movs	r3, #0
 800b742:	2200      	movs	r2, #0
 800b744:	2100      	movs	r1, #0
 800b746:	68f8      	ldr	r0, [r7, #12]
 800b748:	f001 fbfa 	bl	800cf40 <USBD_LL_PrepareReceive>
 800b74c:	e03b      	b.n	800b7c6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	68da      	ldr	r2, [r3, #12]
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	429a      	cmp	r2, r3
 800b758:	d11c      	bne.n	800b794 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	685a      	ldr	r2, [r3, #4]
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b762:	429a      	cmp	r2, r3
 800b764:	d316      	bcc.n	800b794 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	685a      	ldr	r2, [r3, #4]
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b770:	429a      	cmp	r2, r3
 800b772:	d20f      	bcs.n	800b794 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b774:	2200      	movs	r2, #0
 800b776:	2100      	movs	r1, #0
 800b778:	68f8      	ldr	r0, [r7, #12]
 800b77a:	f000 ff1b 	bl	800c5b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2200      	movs	r2, #0
 800b782:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b786:	2300      	movs	r3, #0
 800b788:	2200      	movs	r2, #0
 800b78a:	2100      	movs	r1, #0
 800b78c:	68f8      	ldr	r0, [r7, #12]
 800b78e:	f001 fbd7 	bl	800cf40 <USBD_LL_PrepareReceive>
 800b792:	e018      	b.n	800b7c6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	2b03      	cmp	r3, #3
 800b79e:	d10b      	bne.n	800b7b8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d005      	beq.n	800b7b8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7b2:	68db      	ldr	r3, [r3, #12]
 800b7b4:	68f8      	ldr	r0, [r7, #12]
 800b7b6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b7b8:	2180      	movs	r1, #128	@ 0x80
 800b7ba:	68f8      	ldr	r0, [r7, #12]
 800b7bc:	f001 fb16 	bl	800cdec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b7c0:	68f8      	ldr	r0, [r7, #12]
 800b7c2:	f000 ff49 	bl	800c658 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	d122      	bne.n	800b816 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b7d0:	68f8      	ldr	r0, [r7, #12]
 800b7d2:	f7ff fe98 	bl	800b506 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b7de:	e01a      	b.n	800b816 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	2b03      	cmp	r3, #3
 800b7ea:	d114      	bne.n	800b816 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7f2:	695b      	ldr	r3, [r3, #20]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d00e      	beq.n	800b816 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7fe:	695b      	ldr	r3, [r3, #20]
 800b800:	7afa      	ldrb	r2, [r7, #11]
 800b802:	4611      	mov	r1, r2
 800b804:	68f8      	ldr	r0, [r7, #12]
 800b806:	4798      	blx	r3
 800b808:	4603      	mov	r3, r0
 800b80a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b80c:	7dfb      	ldrb	r3, [r7, #23]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d001      	beq.n	800b816 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b812:	7dfb      	ldrb	r3, [r7, #23]
 800b814:	e000      	b.n	800b818 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b816:	2300      	movs	r3, #0
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3718      	adds	r7, #24
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2200      	movs	r2, #0
 800b842:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d101      	bne.n	800b854 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b850:	2303      	movs	r3, #3
 800b852:	e02f      	b.n	800b8b4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00f      	beq.n	800b87e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d009      	beq.n	800b87e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	6852      	ldr	r2, [r2, #4]
 800b876:	b2d2      	uxtb	r2, r2
 800b878:	4611      	mov	r1, r2
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b87e:	2340      	movs	r3, #64	@ 0x40
 800b880:	2200      	movs	r2, #0
 800b882:	2100      	movs	r1, #0
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f001 fa6c 	bl	800cd62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2201      	movs	r2, #1
 800b88e:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2240      	movs	r2, #64	@ 0x40
 800b896:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b89a:	2340      	movs	r3, #64	@ 0x40
 800b89c:	2200      	movs	r2, #0
 800b89e:	2180      	movs	r1, #128	@ 0x80
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f001 fa5e 	bl	800cd62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2240      	movs	r2, #64	@ 0x40
 800b8b0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b8b2:	2300      	movs	r3, #0
}
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	3708      	adds	r7, #8
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd80      	pop	{r7, pc}

0800b8bc <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	b083      	sub	sp, #12
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	78fa      	ldrb	r2, [r7, #3]
 800b8cc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b8ce:	2300      	movs	r3, #0
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	370c      	adds	r7, #12
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr

0800b8dc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	b083      	sub	sp, #12
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b8ea:	b2da      	uxtb	r2, r3
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2204      	movs	r2, #4
 800b8f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b8fa:	2300      	movs	r3, #0
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	370c      	adds	r7, #12
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b916:	b2db      	uxtb	r3, r3
 800b918:	2b04      	cmp	r3, #4
 800b91a:	d106      	bne.n	800b92a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b922:	b2da      	uxtb	r2, r3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b946:	2b00      	cmp	r3, #0
 800b948:	d101      	bne.n	800b94e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b94a:	2303      	movs	r3, #3
 800b94c:	e012      	b.n	800b974 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b954:	b2db      	uxtb	r3, r3
 800b956:	2b03      	cmp	r3, #3
 800b958:	d10b      	bne.n	800b972 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b960:	69db      	ldr	r3, [r3, #28]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d005      	beq.n	800b972 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b96c:	69db      	ldr	r3, [r3, #28]
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b972:	2300      	movs	r3, #0
}
 800b974:	4618      	mov	r0, r3
 800b976:	3708      	adds	r7, #8
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b087      	sub	sp, #28
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b98e:	697b      	ldr	r3, [r7, #20]
 800b990:	3301      	adds	r3, #1
 800b992:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b99a:	8a3b      	ldrh	r3, [r7, #16]
 800b99c:	021b      	lsls	r3, r3, #8
 800b99e:	b21a      	sxth	r2, r3
 800b9a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	b21b      	sxth	r3, r3
 800b9a8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b9aa:	89fb      	ldrh	r3, [r7, #14]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	371c      	adds	r7, #28
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b9ce:	2b40      	cmp	r3, #64	@ 0x40
 800b9d0:	d005      	beq.n	800b9de <USBD_StdDevReq+0x26>
 800b9d2:	2b40      	cmp	r3, #64	@ 0x40
 800b9d4:	d853      	bhi.n	800ba7e <USBD_StdDevReq+0xc6>
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00b      	beq.n	800b9f2 <USBD_StdDevReq+0x3a>
 800b9da:	2b20      	cmp	r3, #32
 800b9dc:	d14f      	bne.n	800ba7e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	6839      	ldr	r1, [r7, #0]
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	4798      	blx	r3
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	73fb      	strb	r3, [r7, #15]
      break;
 800b9f0:	e04a      	b.n	800ba88 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	785b      	ldrb	r3, [r3, #1]
 800b9f6:	2b09      	cmp	r3, #9
 800b9f8:	d83b      	bhi.n	800ba72 <USBD_StdDevReq+0xba>
 800b9fa:	a201      	add	r2, pc, #4	@ (adr r2, 800ba00 <USBD_StdDevReq+0x48>)
 800b9fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba00:	0800ba55 	.word	0x0800ba55
 800ba04:	0800ba69 	.word	0x0800ba69
 800ba08:	0800ba73 	.word	0x0800ba73
 800ba0c:	0800ba5f 	.word	0x0800ba5f
 800ba10:	0800ba73 	.word	0x0800ba73
 800ba14:	0800ba33 	.word	0x0800ba33
 800ba18:	0800ba29 	.word	0x0800ba29
 800ba1c:	0800ba73 	.word	0x0800ba73
 800ba20:	0800ba4b 	.word	0x0800ba4b
 800ba24:	0800ba3d 	.word	0x0800ba3d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ba28:	6839      	ldr	r1, [r7, #0]
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 f9de 	bl	800bdec <USBD_GetDescriptor>
          break;
 800ba30:	e024      	b.n	800ba7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ba32:	6839      	ldr	r1, [r7, #0]
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f000 fb6d 	bl	800c114 <USBD_SetAddress>
          break;
 800ba3a:	e01f      	b.n	800ba7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ba3c:	6839      	ldr	r1, [r7, #0]
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f000 fbac 	bl	800c19c <USBD_SetConfig>
 800ba44:	4603      	mov	r3, r0
 800ba46:	73fb      	strb	r3, [r7, #15]
          break;
 800ba48:	e018      	b.n	800ba7c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ba4a:	6839      	ldr	r1, [r7, #0]
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 fc4b 	bl	800c2e8 <USBD_GetConfig>
          break;
 800ba52:	e013      	b.n	800ba7c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ba54:	6839      	ldr	r1, [r7, #0]
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 fc7c 	bl	800c354 <USBD_GetStatus>
          break;
 800ba5c:	e00e      	b.n	800ba7c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ba5e:	6839      	ldr	r1, [r7, #0]
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 fcab 	bl	800c3bc <USBD_SetFeature>
          break;
 800ba66:	e009      	b.n	800ba7c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ba68:	6839      	ldr	r1, [r7, #0]
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 fcba 	bl	800c3e4 <USBD_ClrFeature>
          break;
 800ba70:	e004      	b.n	800ba7c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ba72:	6839      	ldr	r1, [r7, #0]
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f000 fd11 	bl	800c49c <USBD_CtlError>
          break;
 800ba7a:	bf00      	nop
      }
      break;
 800ba7c:	e004      	b.n	800ba88 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800ba7e:	6839      	ldr	r1, [r7, #0]
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 fd0b 	bl	800c49c <USBD_CtlError>
      break;
 800ba86:	bf00      	nop
  }

  return ret;
 800ba88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop

0800ba94 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b084      	sub	sp, #16
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800baaa:	2b40      	cmp	r3, #64	@ 0x40
 800baac:	d005      	beq.n	800baba <USBD_StdItfReq+0x26>
 800baae:	2b40      	cmp	r3, #64	@ 0x40
 800bab0:	d82f      	bhi.n	800bb12 <USBD_StdItfReq+0x7e>
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d001      	beq.n	800baba <USBD_StdItfReq+0x26>
 800bab6:	2b20      	cmp	r3, #32
 800bab8:	d12b      	bne.n	800bb12 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	3b01      	subs	r3, #1
 800bac4:	2b02      	cmp	r3, #2
 800bac6:	d81d      	bhi.n	800bb04 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	889b      	ldrh	r3, [r3, #4]
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d813      	bhi.n	800bafa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bad8:	689b      	ldr	r3, [r3, #8]
 800bada:	6839      	ldr	r1, [r7, #0]
 800badc:	6878      	ldr	r0, [r7, #4]
 800bade:	4798      	blx	r3
 800bae0:	4603      	mov	r3, r0
 800bae2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	88db      	ldrh	r3, [r3, #6]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d110      	bne.n	800bb0e <USBD_StdItfReq+0x7a>
 800baec:	7bfb      	ldrb	r3, [r7, #15]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d10d      	bne.n	800bb0e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 fd9d 	bl	800c632 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800baf8:	e009      	b.n	800bb0e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bafa:	6839      	ldr	r1, [r7, #0]
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 fccd 	bl	800c49c <USBD_CtlError>
          break;
 800bb02:	e004      	b.n	800bb0e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bb04:	6839      	ldr	r1, [r7, #0]
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 fcc8 	bl	800c49c <USBD_CtlError>
          break;
 800bb0c:	e000      	b.n	800bb10 <USBD_StdItfReq+0x7c>
          break;
 800bb0e:	bf00      	nop
      }
      break;
 800bb10:	e004      	b.n	800bb1c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bb12:	6839      	ldr	r1, [r7, #0]
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 fcc1 	bl	800c49c <USBD_CtlError>
      break;
 800bb1a:	bf00      	nop
  }

  return ret;
 800bb1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	3710      	adds	r7, #16
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b084      	sub	sp, #16
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
 800bb2e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bb30:	2300      	movs	r3, #0
 800bb32:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	889b      	ldrh	r3, [r3, #4]
 800bb38:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	781b      	ldrb	r3, [r3, #0]
 800bb3e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bb42:	2b40      	cmp	r3, #64	@ 0x40
 800bb44:	d007      	beq.n	800bb56 <USBD_StdEPReq+0x30>
 800bb46:	2b40      	cmp	r3, #64	@ 0x40
 800bb48:	f200 8145 	bhi.w	800bdd6 <USBD_StdEPReq+0x2b0>
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d00c      	beq.n	800bb6a <USBD_StdEPReq+0x44>
 800bb50:	2b20      	cmp	r3, #32
 800bb52:	f040 8140 	bne.w	800bdd6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb5c:	689b      	ldr	r3, [r3, #8]
 800bb5e:	6839      	ldr	r1, [r7, #0]
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	4798      	blx	r3
 800bb64:	4603      	mov	r3, r0
 800bb66:	73fb      	strb	r3, [r7, #15]
      break;
 800bb68:	e13a      	b.n	800bde0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	785b      	ldrb	r3, [r3, #1]
 800bb6e:	2b03      	cmp	r3, #3
 800bb70:	d007      	beq.n	800bb82 <USBD_StdEPReq+0x5c>
 800bb72:	2b03      	cmp	r3, #3
 800bb74:	f300 8129 	bgt.w	800bdca <USBD_StdEPReq+0x2a4>
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d07f      	beq.n	800bc7c <USBD_StdEPReq+0x156>
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d03c      	beq.n	800bbfa <USBD_StdEPReq+0xd4>
 800bb80:	e123      	b.n	800bdca <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb88:	b2db      	uxtb	r3, r3
 800bb8a:	2b02      	cmp	r3, #2
 800bb8c:	d002      	beq.n	800bb94 <USBD_StdEPReq+0x6e>
 800bb8e:	2b03      	cmp	r3, #3
 800bb90:	d016      	beq.n	800bbc0 <USBD_StdEPReq+0x9a>
 800bb92:	e02c      	b.n	800bbee <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb94:	7bbb      	ldrb	r3, [r7, #14]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d00d      	beq.n	800bbb6 <USBD_StdEPReq+0x90>
 800bb9a:	7bbb      	ldrb	r3, [r7, #14]
 800bb9c:	2b80      	cmp	r3, #128	@ 0x80
 800bb9e:	d00a      	beq.n	800bbb6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bba0:	7bbb      	ldrb	r3, [r7, #14]
 800bba2:	4619      	mov	r1, r3
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f001 f921 	bl	800cdec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbaa:	2180      	movs	r1, #128	@ 0x80
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f001 f91d 	bl	800cdec <USBD_LL_StallEP>
 800bbb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bbb4:	e020      	b.n	800bbf8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800bbb6:	6839      	ldr	r1, [r7, #0]
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 fc6f 	bl	800c49c <USBD_CtlError>
              break;
 800bbbe:	e01b      	b.n	800bbf8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	885b      	ldrh	r3, [r3, #2]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d10e      	bne.n	800bbe6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bbc8:	7bbb      	ldrb	r3, [r7, #14]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d00b      	beq.n	800bbe6 <USBD_StdEPReq+0xc0>
 800bbce:	7bbb      	ldrb	r3, [r7, #14]
 800bbd0:	2b80      	cmp	r3, #128	@ 0x80
 800bbd2:	d008      	beq.n	800bbe6 <USBD_StdEPReq+0xc0>
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	88db      	ldrh	r3, [r3, #6]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d104      	bne.n	800bbe6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bbdc:	7bbb      	ldrb	r3, [r7, #14]
 800bbde:	4619      	mov	r1, r3
 800bbe0:	6878      	ldr	r0, [r7, #4]
 800bbe2:	f001 f903 	bl	800cdec <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 fd23 	bl	800c632 <USBD_CtlSendStatus>

              break;
 800bbec:	e004      	b.n	800bbf8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bbee:	6839      	ldr	r1, [r7, #0]
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 fc53 	bl	800c49c <USBD_CtlError>
              break;
 800bbf6:	bf00      	nop
          }
          break;
 800bbf8:	e0ec      	b.n	800bdd4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc00:	b2db      	uxtb	r3, r3
 800bc02:	2b02      	cmp	r3, #2
 800bc04:	d002      	beq.n	800bc0c <USBD_StdEPReq+0xe6>
 800bc06:	2b03      	cmp	r3, #3
 800bc08:	d016      	beq.n	800bc38 <USBD_StdEPReq+0x112>
 800bc0a:	e030      	b.n	800bc6e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc0c:	7bbb      	ldrb	r3, [r7, #14]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00d      	beq.n	800bc2e <USBD_StdEPReq+0x108>
 800bc12:	7bbb      	ldrb	r3, [r7, #14]
 800bc14:	2b80      	cmp	r3, #128	@ 0x80
 800bc16:	d00a      	beq.n	800bc2e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bc18:	7bbb      	ldrb	r3, [r7, #14]
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f001 f8e5 	bl	800cdec <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc22:	2180      	movs	r1, #128	@ 0x80
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f001 f8e1 	bl	800cdec <USBD_LL_StallEP>
 800bc2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bc2c:	e025      	b.n	800bc7a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800bc2e:	6839      	ldr	r1, [r7, #0]
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 fc33 	bl	800c49c <USBD_CtlError>
              break;
 800bc36:	e020      	b.n	800bc7a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	885b      	ldrh	r3, [r3, #2]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d11b      	bne.n	800bc78 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bc40:	7bbb      	ldrb	r3, [r7, #14]
 800bc42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d004      	beq.n	800bc54 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bc4a:	7bbb      	ldrb	r3, [r7, #14]
 800bc4c:	4619      	mov	r1, r3
 800bc4e:	6878      	ldr	r0, [r7, #4]
 800bc50:	f001 f8eb 	bl	800ce2a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 fcec 	bl	800c632 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc60:	689b      	ldr	r3, [r3, #8]
 800bc62:	6839      	ldr	r1, [r7, #0]
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	4798      	blx	r3
 800bc68:	4603      	mov	r3, r0
 800bc6a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800bc6c:	e004      	b.n	800bc78 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800bc6e:	6839      	ldr	r1, [r7, #0]
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 fc13 	bl	800c49c <USBD_CtlError>
              break;
 800bc76:	e000      	b.n	800bc7a <USBD_StdEPReq+0x154>
              break;
 800bc78:	bf00      	nop
          }
          break;
 800bc7a:	e0ab      	b.n	800bdd4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	2b02      	cmp	r3, #2
 800bc86:	d002      	beq.n	800bc8e <USBD_StdEPReq+0x168>
 800bc88:	2b03      	cmp	r3, #3
 800bc8a:	d032      	beq.n	800bcf2 <USBD_StdEPReq+0x1cc>
 800bc8c:	e097      	b.n	800bdbe <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bc8e:	7bbb      	ldrb	r3, [r7, #14]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d007      	beq.n	800bca4 <USBD_StdEPReq+0x17e>
 800bc94:	7bbb      	ldrb	r3, [r7, #14]
 800bc96:	2b80      	cmp	r3, #128	@ 0x80
 800bc98:	d004      	beq.n	800bca4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800bc9a:	6839      	ldr	r1, [r7, #0]
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 fbfd 	bl	800c49c <USBD_CtlError>
                break;
 800bca2:	e091      	b.n	800bdc8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bca4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	da0b      	bge.n	800bcc4 <USBD_StdEPReq+0x19e>
 800bcac:	7bbb      	ldrb	r3, [r7, #14]
 800bcae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	4413      	add	r3, r2
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	3310      	adds	r3, #16
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	3304      	adds	r3, #4
 800bcc2:	e00b      	b.n	800bcdc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bcc4:	7bbb      	ldrb	r3, [r7, #14]
 800bcc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcca:	4613      	mov	r3, r2
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	4413      	add	r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	4413      	add	r3, r2
 800bcda:	3304      	adds	r3, #4
 800bcdc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	2200      	movs	r2, #0
 800bce2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	2202      	movs	r2, #2
 800bce8:	4619      	mov	r1, r3
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 fc47 	bl	800c57e <USBD_CtlSendData>
              break;
 800bcf0:	e06a      	b.n	800bdc8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bcf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	da11      	bge.n	800bd1e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bcfa:	7bbb      	ldrb	r3, [r7, #14]
 800bcfc:	f003 020f 	and.w	r2, r3, #15
 800bd00:	6879      	ldr	r1, [r7, #4]
 800bd02:	4613      	mov	r3, r2
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	4413      	add	r3, r2
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	440b      	add	r3, r1
 800bd0c:	3324      	adds	r3, #36	@ 0x24
 800bd0e:	881b      	ldrh	r3, [r3, #0]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d117      	bne.n	800bd44 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bd14:	6839      	ldr	r1, [r7, #0]
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fbc0 	bl	800c49c <USBD_CtlError>
                  break;
 800bd1c:	e054      	b.n	800bdc8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bd1e:	7bbb      	ldrb	r3, [r7, #14]
 800bd20:	f003 020f 	and.w	r2, r3, #15
 800bd24:	6879      	ldr	r1, [r7, #4]
 800bd26:	4613      	mov	r3, r2
 800bd28:	009b      	lsls	r3, r3, #2
 800bd2a:	4413      	add	r3, r2
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	440b      	add	r3, r1
 800bd30:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bd34:	881b      	ldrh	r3, [r3, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d104      	bne.n	800bd44 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bd3a:	6839      	ldr	r1, [r7, #0]
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f000 fbad 	bl	800c49c <USBD_CtlError>
                  break;
 800bd42:	e041      	b.n	800bdc8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	da0b      	bge.n	800bd64 <USBD_StdEPReq+0x23e>
 800bd4c:	7bbb      	ldrb	r3, [r7, #14]
 800bd4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bd52:	4613      	mov	r3, r2
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	4413      	add	r3, r2
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	3310      	adds	r3, #16
 800bd5c:	687a      	ldr	r2, [r7, #4]
 800bd5e:	4413      	add	r3, r2
 800bd60:	3304      	adds	r3, #4
 800bd62:	e00b      	b.n	800bd7c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bd64:	7bbb      	ldrb	r3, [r7, #14]
 800bd66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	009b      	lsls	r3, r3, #2
 800bd6e:	4413      	add	r3, r2
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bd76:	687a      	ldr	r2, [r7, #4]
 800bd78:	4413      	add	r3, r2
 800bd7a:	3304      	adds	r3, #4
 800bd7c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bd7e:	7bbb      	ldrb	r3, [r7, #14]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d002      	beq.n	800bd8a <USBD_StdEPReq+0x264>
 800bd84:	7bbb      	ldrb	r3, [r7, #14]
 800bd86:	2b80      	cmp	r3, #128	@ 0x80
 800bd88:	d103      	bne.n	800bd92 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	601a      	str	r2, [r3, #0]
 800bd90:	e00e      	b.n	800bdb0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bd92:	7bbb      	ldrb	r3, [r7, #14]
 800bd94:	4619      	mov	r1, r3
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f001 f866 	bl	800ce68 <USBD_LL_IsStallEP>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d003      	beq.n	800bdaa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	2201      	movs	r2, #1
 800bda6:	601a      	str	r2, [r3, #0]
 800bda8:	e002      	b.n	800bdb0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	2200      	movs	r2, #0
 800bdae:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	2202      	movs	r2, #2
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 fbe1 	bl	800c57e <USBD_CtlSendData>
              break;
 800bdbc:	e004      	b.n	800bdc8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bdbe:	6839      	ldr	r1, [r7, #0]
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 fb6b 	bl	800c49c <USBD_CtlError>
              break;
 800bdc6:	bf00      	nop
          }
          break;
 800bdc8:	e004      	b.n	800bdd4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800bdca:	6839      	ldr	r1, [r7, #0]
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 fb65 	bl	800c49c <USBD_CtlError>
          break;
 800bdd2:	bf00      	nop
      }
      break;
 800bdd4:	e004      	b.n	800bde0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800bdd6:	6839      	ldr	r1, [r7, #0]
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 fb5f 	bl	800c49c <USBD_CtlError>
      break;
 800bdde:	bf00      	nop
  }

  return ret;
 800bde0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3710      	adds	r7, #16
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
	...

0800bdec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bdfe:	2300      	movs	r3, #0
 800be00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	885b      	ldrh	r3, [r3, #2]
 800be06:	0a1b      	lsrs	r3, r3, #8
 800be08:	b29b      	uxth	r3, r3
 800be0a:	3b01      	subs	r3, #1
 800be0c:	2b0e      	cmp	r3, #14
 800be0e:	f200 8152 	bhi.w	800c0b6 <USBD_GetDescriptor+0x2ca>
 800be12:	a201      	add	r2, pc, #4	@ (adr r2, 800be18 <USBD_GetDescriptor+0x2c>)
 800be14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be18:	0800be89 	.word	0x0800be89
 800be1c:	0800bea1 	.word	0x0800bea1
 800be20:	0800bee1 	.word	0x0800bee1
 800be24:	0800c0b7 	.word	0x0800c0b7
 800be28:	0800c0b7 	.word	0x0800c0b7
 800be2c:	0800c057 	.word	0x0800c057
 800be30:	0800c083 	.word	0x0800c083
 800be34:	0800c0b7 	.word	0x0800c0b7
 800be38:	0800c0b7 	.word	0x0800c0b7
 800be3c:	0800c0b7 	.word	0x0800c0b7
 800be40:	0800c0b7 	.word	0x0800c0b7
 800be44:	0800c0b7 	.word	0x0800c0b7
 800be48:	0800c0b7 	.word	0x0800c0b7
 800be4c:	0800c0b7 	.word	0x0800c0b7
 800be50:	0800be55 	.word	0x0800be55
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be5a:	69db      	ldr	r3, [r3, #28]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d00b      	beq.n	800be78 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be66:	69db      	ldr	r3, [r3, #28]
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	7c12      	ldrb	r2, [r2, #16]
 800be6c:	f107 0108 	add.w	r1, r7, #8
 800be70:	4610      	mov	r0, r2
 800be72:	4798      	blx	r3
 800be74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800be76:	e126      	b.n	800c0c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800be78:	6839      	ldr	r1, [r7, #0]
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fb0e 	bl	800c49c <USBD_CtlError>
        err++;
 800be80:	7afb      	ldrb	r3, [r7, #11]
 800be82:	3301      	adds	r3, #1
 800be84:	72fb      	strb	r3, [r7, #11]
      break;
 800be86:	e11e      	b.n	800c0c6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	687a      	ldr	r2, [r7, #4]
 800be92:	7c12      	ldrb	r2, [r2, #16]
 800be94:	f107 0108 	add.w	r1, r7, #8
 800be98:	4610      	mov	r0, r2
 800be9a:	4798      	blx	r3
 800be9c:	60f8      	str	r0, [r7, #12]
      break;
 800be9e:	e112      	b.n	800c0c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	7c1b      	ldrb	r3, [r3, #16]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d10d      	bne.n	800bec4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800beae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beb0:	f107 0208 	add.w	r2, r7, #8
 800beb4:	4610      	mov	r0, r2
 800beb6:	4798      	blx	r3
 800beb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	3301      	adds	r3, #1
 800bebe:	2202      	movs	r2, #2
 800bec0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bec2:	e100      	b.n	800c0c6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800beca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800becc:	f107 0208 	add.w	r2, r7, #8
 800bed0:	4610      	mov	r0, r2
 800bed2:	4798      	blx	r3
 800bed4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	3301      	adds	r3, #1
 800beda:	2202      	movs	r2, #2
 800bedc:	701a      	strb	r2, [r3, #0]
      break;
 800bede:	e0f2      	b.n	800c0c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	885b      	ldrh	r3, [r3, #2]
 800bee4:	b2db      	uxtb	r3, r3
 800bee6:	2b05      	cmp	r3, #5
 800bee8:	f200 80ac 	bhi.w	800c044 <USBD_GetDescriptor+0x258>
 800beec:	a201      	add	r2, pc, #4	@ (adr r2, 800bef4 <USBD_GetDescriptor+0x108>)
 800beee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bef2:	bf00      	nop
 800bef4:	0800bf0d 	.word	0x0800bf0d
 800bef8:	0800bf41 	.word	0x0800bf41
 800befc:	0800bf75 	.word	0x0800bf75
 800bf00:	0800bfa9 	.word	0x0800bfa9
 800bf04:	0800bfdd 	.word	0x0800bfdd
 800bf08:	0800c011 	.word	0x0800c011
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf12:	685b      	ldr	r3, [r3, #4]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d00b      	beq.n	800bf30 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	687a      	ldr	r2, [r7, #4]
 800bf22:	7c12      	ldrb	r2, [r2, #16]
 800bf24:	f107 0108 	add.w	r1, r7, #8
 800bf28:	4610      	mov	r0, r2
 800bf2a:	4798      	blx	r3
 800bf2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf2e:	e091      	b.n	800c054 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf30:	6839      	ldr	r1, [r7, #0]
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 fab2 	bl	800c49c <USBD_CtlError>
            err++;
 800bf38:	7afb      	ldrb	r3, [r7, #11]
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf3e:	e089      	b.n	800c054 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf46:	689b      	ldr	r3, [r3, #8]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d00b      	beq.n	800bf64 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	7c12      	ldrb	r2, [r2, #16]
 800bf58:	f107 0108 	add.w	r1, r7, #8
 800bf5c:	4610      	mov	r0, r2
 800bf5e:	4798      	blx	r3
 800bf60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf62:	e077      	b.n	800c054 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf64:	6839      	ldr	r1, [r7, #0]
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 fa98 	bl	800c49c <USBD_CtlError>
            err++;
 800bf6c:	7afb      	ldrb	r3, [r7, #11]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	72fb      	strb	r3, [r7, #11]
          break;
 800bf72:	e06f      	b.n	800c054 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf7a:	68db      	ldr	r3, [r3, #12]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d00b      	beq.n	800bf98 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf86:	68db      	ldr	r3, [r3, #12]
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	7c12      	ldrb	r2, [r2, #16]
 800bf8c:	f107 0108 	add.w	r1, r7, #8
 800bf90:	4610      	mov	r0, r2
 800bf92:	4798      	blx	r3
 800bf94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf96:	e05d      	b.n	800c054 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bf98:	6839      	ldr	r1, [r7, #0]
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 fa7e 	bl	800c49c <USBD_CtlError>
            err++;
 800bfa0:	7afb      	ldrb	r3, [r7, #11]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	72fb      	strb	r3, [r7, #11]
          break;
 800bfa6:	e055      	b.n	800c054 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfae:	691b      	ldr	r3, [r3, #16]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d00b      	beq.n	800bfcc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfba:	691b      	ldr	r3, [r3, #16]
 800bfbc:	687a      	ldr	r2, [r7, #4]
 800bfbe:	7c12      	ldrb	r2, [r2, #16]
 800bfc0:	f107 0108 	add.w	r1, r7, #8
 800bfc4:	4610      	mov	r0, r2
 800bfc6:	4798      	blx	r3
 800bfc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bfca:	e043      	b.n	800c054 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bfcc:	6839      	ldr	r1, [r7, #0]
 800bfce:	6878      	ldr	r0, [r7, #4]
 800bfd0:	f000 fa64 	bl	800c49c <USBD_CtlError>
            err++;
 800bfd4:	7afb      	ldrb	r3, [r7, #11]
 800bfd6:	3301      	adds	r3, #1
 800bfd8:	72fb      	strb	r3, [r7, #11]
          break;
 800bfda:	e03b      	b.n	800c054 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfe2:	695b      	ldr	r3, [r3, #20]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d00b      	beq.n	800c000 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bfee:	695b      	ldr	r3, [r3, #20]
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	7c12      	ldrb	r2, [r2, #16]
 800bff4:	f107 0108 	add.w	r1, r7, #8
 800bff8:	4610      	mov	r0, r2
 800bffa:	4798      	blx	r3
 800bffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bffe:	e029      	b.n	800c054 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c000:	6839      	ldr	r1, [r7, #0]
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f000 fa4a 	bl	800c49c <USBD_CtlError>
            err++;
 800c008:	7afb      	ldrb	r3, [r7, #11]
 800c00a:	3301      	adds	r3, #1
 800c00c:	72fb      	strb	r3, [r7, #11]
          break;
 800c00e:	e021      	b.n	800c054 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c016:	699b      	ldr	r3, [r3, #24]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00b      	beq.n	800c034 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c022:	699b      	ldr	r3, [r3, #24]
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	7c12      	ldrb	r2, [r2, #16]
 800c028:	f107 0108 	add.w	r1, r7, #8
 800c02c:	4610      	mov	r0, r2
 800c02e:	4798      	blx	r3
 800c030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c032:	e00f      	b.n	800c054 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c034:	6839      	ldr	r1, [r7, #0]
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f000 fa30 	bl	800c49c <USBD_CtlError>
            err++;
 800c03c:	7afb      	ldrb	r3, [r7, #11]
 800c03e:	3301      	adds	r3, #1
 800c040:	72fb      	strb	r3, [r7, #11]
          break;
 800c042:	e007      	b.n	800c054 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c044:	6839      	ldr	r1, [r7, #0]
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 fa28 	bl	800c49c <USBD_CtlError>
          err++;
 800c04c:	7afb      	ldrb	r3, [r7, #11]
 800c04e:	3301      	adds	r3, #1
 800c050:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c052:	bf00      	nop
      }
      break;
 800c054:	e037      	b.n	800c0c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	7c1b      	ldrb	r3, [r3, #16]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d109      	bne.n	800c072 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c066:	f107 0208 	add.w	r2, r7, #8
 800c06a:	4610      	mov	r0, r2
 800c06c:	4798      	blx	r3
 800c06e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c070:	e029      	b.n	800c0c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c072:	6839      	ldr	r1, [r7, #0]
 800c074:	6878      	ldr	r0, [r7, #4]
 800c076:	f000 fa11 	bl	800c49c <USBD_CtlError>
        err++;
 800c07a:	7afb      	ldrb	r3, [r7, #11]
 800c07c:	3301      	adds	r3, #1
 800c07e:	72fb      	strb	r3, [r7, #11]
      break;
 800c080:	e021      	b.n	800c0c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	7c1b      	ldrb	r3, [r3, #16]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d10d      	bne.n	800c0a6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c092:	f107 0208 	add.w	r2, r7, #8
 800c096:	4610      	mov	r0, r2
 800c098:	4798      	blx	r3
 800c09a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	3301      	adds	r3, #1
 800c0a0:	2207      	movs	r2, #7
 800c0a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c0a4:	e00f      	b.n	800c0c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c0a6:	6839      	ldr	r1, [r7, #0]
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 f9f7 	bl	800c49c <USBD_CtlError>
        err++;
 800c0ae:	7afb      	ldrb	r3, [r7, #11]
 800c0b0:	3301      	adds	r3, #1
 800c0b2:	72fb      	strb	r3, [r7, #11]
      break;
 800c0b4:	e007      	b.n	800c0c6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c0b6:	6839      	ldr	r1, [r7, #0]
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 f9ef 	bl	800c49c <USBD_CtlError>
      err++;
 800c0be:	7afb      	ldrb	r3, [r7, #11]
 800c0c0:	3301      	adds	r3, #1
 800c0c2:	72fb      	strb	r3, [r7, #11]
      break;
 800c0c4:	bf00      	nop
  }

  if (err != 0U)
 800c0c6:	7afb      	ldrb	r3, [r7, #11]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d11e      	bne.n	800c10a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	88db      	ldrh	r3, [r3, #6]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d016      	beq.n	800c102 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c0d4:	893b      	ldrh	r3, [r7, #8]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d00e      	beq.n	800c0f8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	88da      	ldrh	r2, [r3, #6]
 800c0de:	893b      	ldrh	r3, [r7, #8]
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	bf28      	it	cs
 800c0e4:	4613      	movcs	r3, r2
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c0ea:	893b      	ldrh	r3, [r7, #8]
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	68f9      	ldr	r1, [r7, #12]
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f000 fa44 	bl	800c57e <USBD_CtlSendData>
 800c0f6:	e009      	b.n	800c10c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c0f8:	6839      	ldr	r1, [r7, #0]
 800c0fa:	6878      	ldr	r0, [r7, #4]
 800c0fc:	f000 f9ce 	bl	800c49c <USBD_CtlError>
 800c100:	e004      	b.n	800c10c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 fa95 	bl	800c632 <USBD_CtlSendStatus>
 800c108:	e000      	b.n	800c10c <USBD_GetDescriptor+0x320>
    return;
 800c10a:	bf00      	nop
  }
}
 800c10c:	3710      	adds	r7, #16
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
 800c112:	bf00      	nop

0800c114 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	889b      	ldrh	r3, [r3, #4]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d131      	bne.n	800c18a <USBD_SetAddress+0x76>
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	88db      	ldrh	r3, [r3, #6]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d12d      	bne.n	800c18a <USBD_SetAddress+0x76>
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	885b      	ldrh	r3, [r3, #2]
 800c132:	2b7f      	cmp	r3, #127	@ 0x7f
 800c134:	d829      	bhi.n	800c18a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	885b      	ldrh	r3, [r3, #2]
 800c13a:	b2db      	uxtb	r3, r3
 800c13c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c140:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c148:	b2db      	uxtb	r3, r3
 800c14a:	2b03      	cmp	r3, #3
 800c14c:	d104      	bne.n	800c158 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c14e:	6839      	ldr	r1, [r7, #0]
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 f9a3 	bl	800c49c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c156:	e01d      	b.n	800c194 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	7bfa      	ldrb	r2, [r7, #15]
 800c15c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c160:	7bfb      	ldrb	r3, [r7, #15]
 800c162:	4619      	mov	r1, r3
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 feab 	bl	800cec0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 fa61 	bl	800c632 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c170:	7bfb      	ldrb	r3, [r7, #15]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d004      	beq.n	800c180 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2202      	movs	r2, #2
 800c17a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c17e:	e009      	b.n	800c194 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	2201      	movs	r2, #1
 800c184:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c188:	e004      	b.n	800c194 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c18a:	6839      	ldr	r1, [r7, #0]
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f000 f985 	bl	800c49c <USBD_CtlError>
  }
}
 800c192:	bf00      	nop
 800c194:	bf00      	nop
 800c196:	3710      	adds	r7, #16
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
 800c1a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	885b      	ldrh	r3, [r3, #2]
 800c1ae:	b2da      	uxtb	r2, r3
 800c1b0:	4b4c      	ldr	r3, [pc, #304]	@ (800c2e4 <USBD_SetConfig+0x148>)
 800c1b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c1b4:	4b4b      	ldr	r3, [pc, #300]	@ (800c2e4 <USBD_SetConfig+0x148>)
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d905      	bls.n	800c1c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c1bc:	6839      	ldr	r1, [r7, #0]
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 f96c 	bl	800c49c <USBD_CtlError>
    return USBD_FAIL;
 800c1c4:	2303      	movs	r3, #3
 800c1c6:	e088      	b.n	800c2da <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	2b02      	cmp	r3, #2
 800c1d2:	d002      	beq.n	800c1da <USBD_SetConfig+0x3e>
 800c1d4:	2b03      	cmp	r3, #3
 800c1d6:	d025      	beq.n	800c224 <USBD_SetConfig+0x88>
 800c1d8:	e071      	b.n	800c2be <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c1da:	4b42      	ldr	r3, [pc, #264]	@ (800c2e4 <USBD_SetConfig+0x148>)
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d01c      	beq.n	800c21c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c1e2:	4b40      	ldr	r3, [pc, #256]	@ (800c2e4 <USBD_SetConfig+0x148>)
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c1ec:	4b3d      	ldr	r3, [pc, #244]	@ (800c2e4 <USBD_SetConfig+0x148>)
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f7ff f992 	bl	800b51c <USBD_SetClassConfig>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c1fc:	7bfb      	ldrb	r3, [r7, #15]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d004      	beq.n	800c20c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c202:	6839      	ldr	r1, [r7, #0]
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 f949 	bl	800c49c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c20a:	e065      	b.n	800c2d8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f000 fa10 	bl	800c632 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2203      	movs	r2, #3
 800c216:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c21a:	e05d      	b.n	800c2d8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 fa08 	bl	800c632 <USBD_CtlSendStatus>
      break;
 800c222:	e059      	b.n	800c2d8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c224:	4b2f      	ldr	r3, [pc, #188]	@ (800c2e4 <USBD_SetConfig+0x148>)
 800c226:	781b      	ldrb	r3, [r3, #0]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d112      	bne.n	800c252 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2202      	movs	r2, #2
 800c230:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c234:	4b2b      	ldr	r3, [pc, #172]	@ (800c2e4 <USBD_SetConfig+0x148>)
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	461a      	mov	r2, r3
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c23e:	4b29      	ldr	r3, [pc, #164]	@ (800c2e4 <USBD_SetConfig+0x148>)
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	4619      	mov	r1, r3
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f7ff f985 	bl	800b554 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f000 f9f1 	bl	800c632 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c250:	e042      	b.n	800c2d8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c252:	4b24      	ldr	r3, [pc, #144]	@ (800c2e4 <USBD_SetConfig+0x148>)
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	461a      	mov	r2, r3
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d02a      	beq.n	800c2b6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	b2db      	uxtb	r3, r3
 800c266:	4619      	mov	r1, r3
 800c268:	6878      	ldr	r0, [r7, #4]
 800c26a:	f7ff f973 	bl	800b554 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c26e:	4b1d      	ldr	r3, [pc, #116]	@ (800c2e4 <USBD_SetConfig+0x148>)
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	461a      	mov	r2, r3
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c278:	4b1a      	ldr	r3, [pc, #104]	@ (800c2e4 <USBD_SetConfig+0x148>)
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	4619      	mov	r1, r3
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f7ff f94c 	bl	800b51c <USBD_SetClassConfig>
 800c284:	4603      	mov	r3, r0
 800c286:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c288:	7bfb      	ldrb	r3, [r7, #15]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d00f      	beq.n	800c2ae <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c28e:	6839      	ldr	r1, [r7, #0]
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f000 f903 	bl	800c49c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	b2db      	uxtb	r3, r3
 800c29c:	4619      	mov	r1, r3
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f7ff f958 	bl	800b554 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2202      	movs	r2, #2
 800c2a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c2ac:	e014      	b.n	800c2d8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 f9bf 	bl	800c632 <USBD_CtlSendStatus>
      break;
 800c2b4:	e010      	b.n	800c2d8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f000 f9bb 	bl	800c632 <USBD_CtlSendStatus>
      break;
 800c2bc:	e00c      	b.n	800c2d8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c2be:	6839      	ldr	r1, [r7, #0]
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 f8eb 	bl	800c49c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c2c6:	4b07      	ldr	r3, [pc, #28]	@ (800c2e4 <USBD_SetConfig+0x148>)
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f7ff f941 	bl	800b554 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c2d2:	2303      	movs	r3, #3
 800c2d4:	73fb      	strb	r3, [r7, #15]
      break;
 800c2d6:	bf00      	nop
  }

  return ret;
 800c2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3710      	adds	r7, #16
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	20000674 	.word	0x20000674

0800c2e8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b082      	sub	sp, #8
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	88db      	ldrh	r3, [r3, #6]
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d004      	beq.n	800c304 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c2fa:	6839      	ldr	r1, [r7, #0]
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 f8cd 	bl	800c49c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c302:	e023      	b.n	800c34c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c30a:	b2db      	uxtb	r3, r3
 800c30c:	2b02      	cmp	r3, #2
 800c30e:	dc02      	bgt.n	800c316 <USBD_GetConfig+0x2e>
 800c310:	2b00      	cmp	r3, #0
 800c312:	dc03      	bgt.n	800c31c <USBD_GetConfig+0x34>
 800c314:	e015      	b.n	800c342 <USBD_GetConfig+0x5a>
 800c316:	2b03      	cmp	r3, #3
 800c318:	d00b      	beq.n	800c332 <USBD_GetConfig+0x4a>
 800c31a:	e012      	b.n	800c342 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2200      	movs	r2, #0
 800c320:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	3308      	adds	r3, #8
 800c326:	2201      	movs	r2, #1
 800c328:	4619      	mov	r1, r3
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 f927 	bl	800c57e <USBD_CtlSendData>
        break;
 800c330:	e00c      	b.n	800c34c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	3304      	adds	r3, #4
 800c336:	2201      	movs	r2, #1
 800c338:	4619      	mov	r1, r3
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f000 f91f 	bl	800c57e <USBD_CtlSendData>
        break;
 800c340:	e004      	b.n	800c34c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c342:	6839      	ldr	r1, [r7, #0]
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 f8a9 	bl	800c49c <USBD_CtlError>
        break;
 800c34a:	bf00      	nop
}
 800c34c:	bf00      	nop
 800c34e:	3708      	adds	r7, #8
 800c350:	46bd      	mov	sp, r7
 800c352:	bd80      	pop	{r7, pc}

0800c354 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b082      	sub	sp, #8
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c364:	b2db      	uxtb	r3, r3
 800c366:	3b01      	subs	r3, #1
 800c368:	2b02      	cmp	r3, #2
 800c36a:	d81e      	bhi.n	800c3aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	88db      	ldrh	r3, [r3, #6]
 800c370:	2b02      	cmp	r3, #2
 800c372:	d004      	beq.n	800c37e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c374:	6839      	ldr	r1, [r7, #0]
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f000 f890 	bl	800c49c <USBD_CtlError>
        break;
 800c37c:	e01a      	b.n	800c3b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2201      	movs	r2, #1
 800c382:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d005      	beq.n	800c39a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	68db      	ldr	r3, [r3, #12]
 800c392:	f043 0202 	orr.w	r2, r3, #2
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	330c      	adds	r3, #12
 800c39e:	2202      	movs	r2, #2
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 f8eb 	bl	800c57e <USBD_CtlSendData>
      break;
 800c3a8:	e004      	b.n	800c3b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c3aa:	6839      	ldr	r1, [r7, #0]
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 f875 	bl	800c49c <USBD_CtlError>
      break;
 800c3b2:	bf00      	nop
  }
}
 800c3b4:	bf00      	nop
 800c3b6:	3708      	adds	r7, #8
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b082      	sub	sp, #8
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
 800c3c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	885b      	ldrh	r3, [r3, #2]
 800c3ca:	2b01      	cmp	r3, #1
 800c3cc:	d106      	bne.n	800c3dc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2201      	movs	r2, #1
 800c3d2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 f92b 	bl	800c632 <USBD_CtlSendStatus>
  }
}
 800c3dc:	bf00      	nop
 800c3de:	3708      	adds	r7, #8
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b082      	sub	sp, #8
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	3b01      	subs	r3, #1
 800c3f8:	2b02      	cmp	r3, #2
 800c3fa:	d80b      	bhi.n	800c414 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	885b      	ldrh	r3, [r3, #2]
 800c400:	2b01      	cmp	r3, #1
 800c402:	d10c      	bne.n	800c41e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2200      	movs	r2, #0
 800c408:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f000 f910 	bl	800c632 <USBD_CtlSendStatus>
      }
      break;
 800c412:	e004      	b.n	800c41e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c414:	6839      	ldr	r1, [r7, #0]
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 f840 	bl	800c49c <USBD_CtlError>
      break;
 800c41c:	e000      	b.n	800c420 <USBD_ClrFeature+0x3c>
      break;
 800c41e:	bf00      	nop
  }
}
 800c420:	bf00      	nop
 800c422:	3708      	adds	r7, #8
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}

0800c428 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b084      	sub	sp, #16
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	781a      	ldrb	r2, [r3, #0]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	3301      	adds	r3, #1
 800c442:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	781a      	ldrb	r2, [r3, #0]
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	3301      	adds	r3, #1
 800c450:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c452:	68f8      	ldr	r0, [r7, #12]
 800c454:	f7ff fa92 	bl	800b97c <SWAPBYTE>
 800c458:	4603      	mov	r3, r0
 800c45a:	461a      	mov	r2, r3
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	3301      	adds	r3, #1
 800c464:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	3301      	adds	r3, #1
 800c46a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c46c:	68f8      	ldr	r0, [r7, #12]
 800c46e:	f7ff fa85 	bl	800b97c <SWAPBYTE>
 800c472:	4603      	mov	r3, r0
 800c474:	461a      	mov	r2, r3
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	3301      	adds	r3, #1
 800c47e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	3301      	adds	r3, #1
 800c484:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c486:	68f8      	ldr	r0, [r7, #12]
 800c488:	f7ff fa78 	bl	800b97c <SWAPBYTE>
 800c48c:	4603      	mov	r3, r0
 800c48e:	461a      	mov	r2, r3
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	80da      	strh	r2, [r3, #6]
}
 800c494:	bf00      	nop
 800c496:	3710      	adds	r7, #16
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b082      	sub	sp, #8
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
 800c4a4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4a6:	2180      	movs	r1, #128	@ 0x80
 800c4a8:	6878      	ldr	r0, [r7, #4]
 800c4aa:	f000 fc9f 	bl	800cdec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c4ae:	2100      	movs	r1, #0
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f000 fc9b 	bl	800cdec <USBD_LL_StallEP>
}
 800c4b6:	bf00      	nop
 800c4b8:	3708      	adds	r7, #8
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bd80      	pop	{r7, pc}

0800c4be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c4be:	b580      	push	{r7, lr}
 800c4c0:	b086      	sub	sp, #24
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	60f8      	str	r0, [r7, #12]
 800c4c6:	60b9      	str	r1, [r7, #8]
 800c4c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d036      	beq.n	800c542 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c4d8:	6938      	ldr	r0, [r7, #16]
 800c4da:	f000 f836 	bl	800c54a <USBD_GetLen>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	b29b      	uxth	r3, r3
 800c4e4:	005b      	lsls	r3, r3, #1
 800c4e6:	b29a      	uxth	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c4ec:	7dfb      	ldrb	r3, [r7, #23]
 800c4ee:	68ba      	ldr	r2, [r7, #8]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	687a      	ldr	r2, [r7, #4]
 800c4f4:	7812      	ldrb	r2, [r2, #0]
 800c4f6:	701a      	strb	r2, [r3, #0]
  idx++;
 800c4f8:	7dfb      	ldrb	r3, [r7, #23]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c4fe:	7dfb      	ldrb	r3, [r7, #23]
 800c500:	68ba      	ldr	r2, [r7, #8]
 800c502:	4413      	add	r3, r2
 800c504:	2203      	movs	r2, #3
 800c506:	701a      	strb	r2, [r3, #0]
  idx++;
 800c508:	7dfb      	ldrb	r3, [r7, #23]
 800c50a:	3301      	adds	r3, #1
 800c50c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c50e:	e013      	b.n	800c538 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c510:	7dfb      	ldrb	r3, [r7, #23]
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	4413      	add	r3, r2
 800c516:	693a      	ldr	r2, [r7, #16]
 800c518:	7812      	ldrb	r2, [r2, #0]
 800c51a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c51c:	693b      	ldr	r3, [r7, #16]
 800c51e:	3301      	adds	r3, #1
 800c520:	613b      	str	r3, [r7, #16]
    idx++;
 800c522:	7dfb      	ldrb	r3, [r7, #23]
 800c524:	3301      	adds	r3, #1
 800c526:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c528:	7dfb      	ldrb	r3, [r7, #23]
 800c52a:	68ba      	ldr	r2, [r7, #8]
 800c52c:	4413      	add	r3, r2
 800c52e:	2200      	movs	r2, #0
 800c530:	701a      	strb	r2, [r3, #0]
    idx++;
 800c532:	7dfb      	ldrb	r3, [r7, #23]
 800c534:	3301      	adds	r3, #1
 800c536:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d1e7      	bne.n	800c510 <USBD_GetString+0x52>
 800c540:	e000      	b.n	800c544 <USBD_GetString+0x86>
    return;
 800c542:	bf00      	nop
  }
}
 800c544:	3718      	adds	r7, #24
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c54a:	b480      	push	{r7}
 800c54c:	b085      	sub	sp, #20
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c552:	2300      	movs	r3, #0
 800c554:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c55a:	e005      	b.n	800c568 <USBD_GetLen+0x1e>
  {
    len++;
 800c55c:	7bfb      	ldrb	r3, [r7, #15]
 800c55e:	3301      	adds	r3, #1
 800c560:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	3301      	adds	r3, #1
 800c566:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d1f5      	bne.n	800c55c <USBD_GetLen+0x12>
  }

  return len;
 800c570:	7bfb      	ldrb	r3, [r7, #15]
}
 800c572:	4618      	mov	r0, r3
 800c574:	3714      	adds	r7, #20
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr

0800c57e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c57e:	b580      	push	{r7, lr}
 800c580:	b084      	sub	sp, #16
 800c582:	af00      	add	r7, sp, #0
 800c584:	60f8      	str	r0, [r7, #12]
 800c586:	60b9      	str	r1, [r7, #8]
 800c588:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2202      	movs	r2, #2
 800c58e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	687a      	ldr	r2, [r7, #4]
 800c596:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	687a      	ldr	r2, [r7, #4]
 800c59c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	68ba      	ldr	r2, [r7, #8]
 800c5a2:	2100      	movs	r1, #0
 800c5a4:	68f8      	ldr	r0, [r7, #12]
 800c5a6:	f000 fcaa 	bl	800cefe <USBD_LL_Transmit>

  return USBD_OK;
 800c5aa:	2300      	movs	r3, #0
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3710      	adds	r7, #16
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	60f8      	str	r0, [r7, #12]
 800c5bc:	60b9      	str	r1, [r7, #8]
 800c5be:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	68ba      	ldr	r2, [r7, #8]
 800c5c4:	2100      	movs	r1, #0
 800c5c6:	68f8      	ldr	r0, [r7, #12]
 800c5c8:	f000 fc99 	bl	800cefe <USBD_LL_Transmit>

  return USBD_OK;
 800c5cc:	2300      	movs	r3, #0
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3710      	adds	r7, #16
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}

0800c5d6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c5d6:	b580      	push	{r7, lr}
 800c5d8:	b084      	sub	sp, #16
 800c5da:	af00      	add	r7, sp, #0
 800c5dc:	60f8      	str	r0, [r7, #12]
 800c5de:	60b9      	str	r1, [r7, #8]
 800c5e0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2203      	movs	r2, #3
 800c5e6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	68ba      	ldr	r2, [r7, #8]
 800c5fe:	2100      	movs	r1, #0
 800c600:	68f8      	ldr	r0, [r7, #12]
 800c602:	f000 fc9d 	bl	800cf40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c606:	2300      	movs	r3, #0
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b084      	sub	sp, #16
 800c614:	af00      	add	r7, sp, #0
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	60b9      	str	r1, [r7, #8]
 800c61a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	68ba      	ldr	r2, [r7, #8]
 800c620:	2100      	movs	r1, #0
 800c622:	68f8      	ldr	r0, [r7, #12]
 800c624:	f000 fc8c 	bl	800cf40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c628:	2300      	movs	r3, #0
}
 800c62a:	4618      	mov	r0, r3
 800c62c:	3710      	adds	r7, #16
 800c62e:	46bd      	mov	sp, r7
 800c630:	bd80      	pop	{r7, pc}

0800c632 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c632:	b580      	push	{r7, lr}
 800c634:	b082      	sub	sp, #8
 800c636:	af00      	add	r7, sp, #0
 800c638:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2204      	movs	r2, #4
 800c63e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c642:	2300      	movs	r3, #0
 800c644:	2200      	movs	r2, #0
 800c646:	2100      	movs	r1, #0
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 fc58 	bl	800cefe <USBD_LL_Transmit>

  return USBD_OK;
 800c64e:	2300      	movs	r3, #0
}
 800c650:	4618      	mov	r0, r3
 800c652:	3708      	adds	r7, #8
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2205      	movs	r2, #5
 800c664:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c668:	2300      	movs	r3, #0
 800c66a:	2200      	movs	r2, #0
 800c66c:	2100      	movs	r1, #0
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f000 fc66 	bl	800cf40 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c674:	2300      	movs	r3, #0
}
 800c676:	4618      	mov	r0, r3
 800c678:	3708      	adds	r7, #8
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
	...

0800c680 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c684:	2200      	movs	r2, #0
 800c686:	4912      	ldr	r1, [pc, #72]	@ (800c6d0 <MX_USB_Device_Init+0x50>)
 800c688:	4812      	ldr	r0, [pc, #72]	@ (800c6d4 <MX_USB_Device_Init+0x54>)
 800c68a:	f7fe fed9 	bl	800b440 <USBD_Init>
 800c68e:	4603      	mov	r3, r0
 800c690:	2b00      	cmp	r3, #0
 800c692:	d001      	beq.n	800c698 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c694:	f7f5 f908 	bl	80018a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c698:	490f      	ldr	r1, [pc, #60]	@ (800c6d8 <MX_USB_Device_Init+0x58>)
 800c69a:	480e      	ldr	r0, [pc, #56]	@ (800c6d4 <MX_USB_Device_Init+0x54>)
 800c69c:	f7fe ff00 	bl	800b4a0 <USBD_RegisterClass>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d001      	beq.n	800c6aa <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c6a6:	f7f5 f8ff 	bl	80018a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c6aa:	490c      	ldr	r1, [pc, #48]	@ (800c6dc <MX_USB_Device_Init+0x5c>)
 800c6ac:	4809      	ldr	r0, [pc, #36]	@ (800c6d4 <MX_USB_Device_Init+0x54>)
 800c6ae:	f7fe fe21 	bl	800b2f4 <USBD_CDC_RegisterInterface>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d001      	beq.n	800c6bc <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c6b8:	f7f5 f8f6 	bl	80018a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c6bc:	4805      	ldr	r0, [pc, #20]	@ (800c6d4 <MX_USB_Device_Init+0x54>)
 800c6be:	f7fe ff16 	bl	800b4ee <USBD_Start>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d001      	beq.n	800c6cc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c6c8:	f7f5 f8ee 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c6cc:	bf00      	nop
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	20000134 	.word	0x20000134
 800c6d4:	20000678 	.word	0x20000678
 800c6d8:	2000001c 	.word	0x2000001c
 800c6dc:	20000120 	.word	0x20000120

0800c6e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	4905      	ldr	r1, [pc, #20]	@ (800c6fc <CDC_Init_FS+0x1c>)
 800c6e8:	4805      	ldr	r0, [pc, #20]	@ (800c700 <CDC_Init_FS+0x20>)
 800c6ea:	f7fe fe18 	bl	800b31e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c6ee:	4905      	ldr	r1, [pc, #20]	@ (800c704 <CDC_Init_FS+0x24>)
 800c6f0:	4803      	ldr	r0, [pc, #12]	@ (800c700 <CDC_Init_FS+0x20>)
 800c6f2:	f7fe fe32 	bl	800b35a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c6f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	20001148 	.word	0x20001148
 800c700:	20000678 	.word	0x20000678
 800c704:	20000948 	.word	0x20000948

0800c708 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c708:	b480      	push	{r7}
 800c70a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c70c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c70e:	4618      	mov	r0, r3
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr

0800c718 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c718:	b480      	push	{r7}
 800c71a:	b083      	sub	sp, #12
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	4603      	mov	r3, r0
 800c720:	6039      	str	r1, [r7, #0]
 800c722:	71fb      	strb	r3, [r7, #7]
 800c724:	4613      	mov	r3, r2
 800c726:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c728:	79fb      	ldrb	r3, [r7, #7]
 800c72a:	2b23      	cmp	r3, #35	@ 0x23
 800c72c:	d84a      	bhi.n	800c7c4 <CDC_Control_FS+0xac>
 800c72e:	a201      	add	r2, pc, #4	@ (adr r2, 800c734 <CDC_Control_FS+0x1c>)
 800c730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c734:	0800c7c5 	.word	0x0800c7c5
 800c738:	0800c7c5 	.word	0x0800c7c5
 800c73c:	0800c7c5 	.word	0x0800c7c5
 800c740:	0800c7c5 	.word	0x0800c7c5
 800c744:	0800c7c5 	.word	0x0800c7c5
 800c748:	0800c7c5 	.word	0x0800c7c5
 800c74c:	0800c7c5 	.word	0x0800c7c5
 800c750:	0800c7c5 	.word	0x0800c7c5
 800c754:	0800c7c5 	.word	0x0800c7c5
 800c758:	0800c7c5 	.word	0x0800c7c5
 800c75c:	0800c7c5 	.word	0x0800c7c5
 800c760:	0800c7c5 	.word	0x0800c7c5
 800c764:	0800c7c5 	.word	0x0800c7c5
 800c768:	0800c7c5 	.word	0x0800c7c5
 800c76c:	0800c7c5 	.word	0x0800c7c5
 800c770:	0800c7c5 	.word	0x0800c7c5
 800c774:	0800c7c5 	.word	0x0800c7c5
 800c778:	0800c7c5 	.word	0x0800c7c5
 800c77c:	0800c7c5 	.word	0x0800c7c5
 800c780:	0800c7c5 	.word	0x0800c7c5
 800c784:	0800c7c5 	.word	0x0800c7c5
 800c788:	0800c7c5 	.word	0x0800c7c5
 800c78c:	0800c7c5 	.word	0x0800c7c5
 800c790:	0800c7c5 	.word	0x0800c7c5
 800c794:	0800c7c5 	.word	0x0800c7c5
 800c798:	0800c7c5 	.word	0x0800c7c5
 800c79c:	0800c7c5 	.word	0x0800c7c5
 800c7a0:	0800c7c5 	.word	0x0800c7c5
 800c7a4:	0800c7c5 	.word	0x0800c7c5
 800c7a8:	0800c7c5 	.word	0x0800c7c5
 800c7ac:	0800c7c5 	.word	0x0800c7c5
 800c7b0:	0800c7c5 	.word	0x0800c7c5
 800c7b4:	0800c7c5 	.word	0x0800c7c5
 800c7b8:	0800c7c5 	.word	0x0800c7c5
 800c7bc:	0800c7c5 	.word	0x0800c7c5
 800c7c0:	0800c7c5 	.word	0x0800c7c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c7c4:	bf00      	nop
  }

  return (USBD_OK);
 800c7c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	370c      	adds	r7, #12
 800c7cc:	46bd      	mov	sp, r7
 800c7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d2:	4770      	bx	lr

0800c7d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	6078      	str	r0, [r7, #4]
 800c7dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c7de:	6879      	ldr	r1, [r7, #4]
 800c7e0:	4809      	ldr	r0, [pc, #36]	@ (800c808 <CDC_Receive_FS+0x34>)
 800c7e2:	f7fe fdba 	bl	800b35a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c7e6:	4808      	ldr	r0, [pc, #32]	@ (800c808 <CDC_Receive_FS+0x34>)
 800c7e8:	f7fe fe00 	bl	800b3ec <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	73fb      	strb	r3, [r7, #15]
  memcpy (usbBuffer, Buf, len);
 800c7f2:	7bfb      	ldrb	r3, [r7, #15]
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	6879      	ldr	r1, [r7, #4]
 800c7f8:	4804      	ldr	r0, [pc, #16]	@ (800c80c <CDC_Receive_FS+0x38>)
 800c7fa:	f000 fc81 	bl	800d100 <memcpy>
  return (USBD_OK);
 800c7fe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c800:	4618      	mov	r0, r3
 800c802:	3710      	adds	r7, #16
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}
 800c808:	20000678 	.word	0x20000678
 800c80c:	2000061c 	.word	0x2000061c

0800c810 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b084      	sub	sp, #16
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	460b      	mov	r3, r1
 800c81a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c81c:	2300      	movs	r3, #0
 800c81e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c820:	4b0d      	ldr	r3, [pc, #52]	@ (800c858 <CDC_Transmit_FS+0x48>)
 800c822:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c826:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d001      	beq.n	800c836 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c832:	2301      	movs	r3, #1
 800c834:	e00b      	b.n	800c84e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c836:	887b      	ldrh	r3, [r7, #2]
 800c838:	461a      	mov	r2, r3
 800c83a:	6879      	ldr	r1, [r7, #4]
 800c83c:	4806      	ldr	r0, [pc, #24]	@ (800c858 <CDC_Transmit_FS+0x48>)
 800c83e:	f7fe fd6e 	bl	800b31e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c842:	4805      	ldr	r0, [pc, #20]	@ (800c858 <CDC_Transmit_FS+0x48>)
 800c844:	f7fe fda2 	bl	800b38c <USBD_CDC_TransmitPacket>
 800c848:	4603      	mov	r3, r0
 800c84a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c84c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3710      	adds	r7, #16
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	20000678 	.word	0x20000678

0800c85c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c85c:	b480      	push	{r7}
 800c85e:	b087      	sub	sp, #28
 800c860:	af00      	add	r7, sp, #0
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	60b9      	str	r1, [r7, #8]
 800c866:	4613      	mov	r3, r2
 800c868:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c86a:	2300      	movs	r3, #0
 800c86c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c86e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c872:	4618      	mov	r0, r3
 800c874:	371c      	adds	r7, #28
 800c876:	46bd      	mov	sp, r7
 800c878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87c:	4770      	bx	lr
	...

0800c880 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c880:	b480      	push	{r7}
 800c882:	b083      	sub	sp, #12
 800c884:	af00      	add	r7, sp, #0
 800c886:	4603      	mov	r3, r0
 800c888:	6039      	str	r1, [r7, #0]
 800c88a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	2212      	movs	r2, #18
 800c890:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800c892:	4b03      	ldr	r3, [pc, #12]	@ (800c8a0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800c894:	4618      	mov	r0, r3
 800c896:	370c      	adds	r7, #12
 800c898:	46bd      	mov	sp, r7
 800c89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89e:	4770      	bx	lr
 800c8a0:	20000154 	.word	0x20000154

0800c8a4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b083      	sub	sp, #12
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	6039      	str	r1, [r7, #0]
 800c8ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	2204      	movs	r2, #4
 800c8b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c8b6:	4b03      	ldr	r3, [pc, #12]	@ (800c8c4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	370c      	adds	r7, #12
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr
 800c8c4:	20000168 	.word	0x20000168

0800c8c8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	6039      	str	r1, [r7, #0]
 800c8d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c8d4:	79fb      	ldrb	r3, [r7, #7]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d105      	bne.n	800c8e6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c8da:	683a      	ldr	r2, [r7, #0]
 800c8dc:	4907      	ldr	r1, [pc, #28]	@ (800c8fc <USBD_CDC_ProductStrDescriptor+0x34>)
 800c8de:	4808      	ldr	r0, [pc, #32]	@ (800c900 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c8e0:	f7ff fded 	bl	800c4be <USBD_GetString>
 800c8e4:	e004      	b.n	800c8f0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c8e6:	683a      	ldr	r2, [r7, #0]
 800c8e8:	4904      	ldr	r1, [pc, #16]	@ (800c8fc <USBD_CDC_ProductStrDescriptor+0x34>)
 800c8ea:	4805      	ldr	r0, [pc, #20]	@ (800c900 <USBD_CDC_ProductStrDescriptor+0x38>)
 800c8ec:	f7ff fde7 	bl	800c4be <USBD_GetString>
  }
  return USBD_StrDesc;
 800c8f0:	4b02      	ldr	r3, [pc, #8]	@ (800c8fc <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3708      	adds	r7, #8
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}
 800c8fa:	bf00      	nop
 800c8fc:	20001948 	.word	0x20001948
 800c900:	0800d144 	.word	0x0800d144

0800c904 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b082      	sub	sp, #8
 800c908:	af00      	add	r7, sp, #0
 800c90a:	4603      	mov	r3, r0
 800c90c:	6039      	str	r1, [r7, #0]
 800c90e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c910:	683a      	ldr	r2, [r7, #0]
 800c912:	4904      	ldr	r1, [pc, #16]	@ (800c924 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800c914:	4804      	ldr	r0, [pc, #16]	@ (800c928 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800c916:	f7ff fdd2 	bl	800c4be <USBD_GetString>
  return USBD_StrDesc;
 800c91a:	4b02      	ldr	r3, [pc, #8]	@ (800c924 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3708      	adds	r7, #8
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}
 800c924:	20001948 	.word	0x20001948
 800c928:	0800d15c 	.word	0x0800d15c

0800c92c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b082      	sub	sp, #8
 800c930:	af00      	add	r7, sp, #0
 800c932:	4603      	mov	r3, r0
 800c934:	6039      	str	r1, [r7, #0]
 800c936:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	221a      	movs	r2, #26
 800c93c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c93e:	f000 f843 	bl	800c9c8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c942:	4b02      	ldr	r3, [pc, #8]	@ (800c94c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800c944:	4618      	mov	r0, r3
 800c946:	3708      	adds	r7, #8
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}
 800c94c:	2000016c 	.word	0x2000016c

0800c950 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b082      	sub	sp, #8
 800c954:	af00      	add	r7, sp, #0
 800c956:	4603      	mov	r3, r0
 800c958:	6039      	str	r1, [r7, #0]
 800c95a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c95c:	79fb      	ldrb	r3, [r7, #7]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d105      	bne.n	800c96e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c962:	683a      	ldr	r2, [r7, #0]
 800c964:	4907      	ldr	r1, [pc, #28]	@ (800c984 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c966:	4808      	ldr	r0, [pc, #32]	@ (800c988 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c968:	f7ff fda9 	bl	800c4be <USBD_GetString>
 800c96c:	e004      	b.n	800c978 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c96e:	683a      	ldr	r2, [r7, #0]
 800c970:	4904      	ldr	r1, [pc, #16]	@ (800c984 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c972:	4805      	ldr	r0, [pc, #20]	@ (800c988 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c974:	f7ff fda3 	bl	800c4be <USBD_GetString>
  }
  return USBD_StrDesc;
 800c978:	4b02      	ldr	r3, [pc, #8]	@ (800c984 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	3708      	adds	r7, #8
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	20001948 	.word	0x20001948
 800c988:	0800d170 	.word	0x0800d170

0800c98c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
 800c992:	4603      	mov	r3, r0
 800c994:	6039      	str	r1, [r7, #0]
 800c996:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c998:	79fb      	ldrb	r3, [r7, #7]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d105      	bne.n	800c9aa <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c99e:	683a      	ldr	r2, [r7, #0]
 800c9a0:	4907      	ldr	r1, [pc, #28]	@ (800c9c0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c9a2:	4808      	ldr	r0, [pc, #32]	@ (800c9c4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c9a4:	f7ff fd8b 	bl	800c4be <USBD_GetString>
 800c9a8:	e004      	b.n	800c9b4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c9aa:	683a      	ldr	r2, [r7, #0]
 800c9ac:	4904      	ldr	r1, [pc, #16]	@ (800c9c0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c9ae:	4805      	ldr	r0, [pc, #20]	@ (800c9c4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c9b0:	f7ff fd85 	bl	800c4be <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9b4:	4b02      	ldr	r3, [pc, #8]	@ (800c9c0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3708      	adds	r7, #8
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}
 800c9be:	bf00      	nop
 800c9c0:	20001948 	.word	0x20001948
 800c9c4:	0800d17c 	.word	0x0800d17c

0800c9c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c9ce:	4b0f      	ldr	r3, [pc, #60]	@ (800ca0c <Get_SerialNum+0x44>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c9d4:	4b0e      	ldr	r3, [pc, #56]	@ (800ca10 <Get_SerialNum+0x48>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c9da:	4b0e      	ldr	r3, [pc, #56]	@ (800ca14 <Get_SerialNum+0x4c>)
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c9e0:	68fa      	ldr	r2, [r7, #12]
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d009      	beq.n	800ca02 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c9ee:	2208      	movs	r2, #8
 800c9f0:	4909      	ldr	r1, [pc, #36]	@ (800ca18 <Get_SerialNum+0x50>)
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	f000 f814 	bl	800ca20 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c9f8:	2204      	movs	r2, #4
 800c9fa:	4908      	ldr	r1, [pc, #32]	@ (800ca1c <Get_SerialNum+0x54>)
 800c9fc:	68b8      	ldr	r0, [r7, #8]
 800c9fe:	f000 f80f 	bl	800ca20 <IntToUnicode>
  }
}
 800ca02:	bf00      	nop
 800ca04:	3710      	adds	r7, #16
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
 800ca0a:	bf00      	nop
 800ca0c:	1fff7590 	.word	0x1fff7590
 800ca10:	1fff7594 	.word	0x1fff7594
 800ca14:	1fff7598 	.word	0x1fff7598
 800ca18:	2000016e 	.word	0x2000016e
 800ca1c:	2000017e 	.word	0x2000017e

0800ca20 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b087      	sub	sp, #28
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	60b9      	str	r1, [r7, #8]
 800ca2a:	4613      	mov	r3, r2
 800ca2c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ca32:	2300      	movs	r3, #0
 800ca34:	75fb      	strb	r3, [r7, #23]
 800ca36:	e027      	b.n	800ca88 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	0f1b      	lsrs	r3, r3, #28
 800ca3c:	2b09      	cmp	r3, #9
 800ca3e:	d80b      	bhi.n	800ca58 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	0f1b      	lsrs	r3, r3, #28
 800ca44:	b2da      	uxtb	r2, r3
 800ca46:	7dfb      	ldrb	r3, [r7, #23]
 800ca48:	005b      	lsls	r3, r3, #1
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	440b      	add	r3, r1
 800ca50:	3230      	adds	r2, #48	@ 0x30
 800ca52:	b2d2      	uxtb	r2, r2
 800ca54:	701a      	strb	r2, [r3, #0]
 800ca56:	e00a      	b.n	800ca6e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	0f1b      	lsrs	r3, r3, #28
 800ca5c:	b2da      	uxtb	r2, r3
 800ca5e:	7dfb      	ldrb	r3, [r7, #23]
 800ca60:	005b      	lsls	r3, r3, #1
 800ca62:	4619      	mov	r1, r3
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	440b      	add	r3, r1
 800ca68:	3237      	adds	r2, #55	@ 0x37
 800ca6a:	b2d2      	uxtb	r2, r2
 800ca6c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	011b      	lsls	r3, r3, #4
 800ca72:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ca74:	7dfb      	ldrb	r3, [r7, #23]
 800ca76:	005b      	lsls	r3, r3, #1
 800ca78:	3301      	adds	r3, #1
 800ca7a:	68ba      	ldr	r2, [r7, #8]
 800ca7c:	4413      	add	r3, r2
 800ca7e:	2200      	movs	r2, #0
 800ca80:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ca82:	7dfb      	ldrb	r3, [r7, #23]
 800ca84:	3301      	adds	r3, #1
 800ca86:	75fb      	strb	r3, [r7, #23]
 800ca88:	7dfa      	ldrb	r2, [r7, #23]
 800ca8a:	79fb      	ldrb	r3, [r7, #7]
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	d3d3      	bcc.n	800ca38 <IntToUnicode+0x18>
  }
}
 800ca90:	bf00      	nop
 800ca92:	bf00      	nop
 800ca94:	371c      	adds	r7, #28
 800ca96:	46bd      	mov	sp, r7
 800ca98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9c:	4770      	bx	lr
	...

0800caa0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b098      	sub	sp, #96	@ 0x60
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800caa8:	f107 030c 	add.w	r3, r7, #12
 800caac:	2254      	movs	r2, #84	@ 0x54
 800caae:	2100      	movs	r1, #0
 800cab0:	4618      	mov	r0, r3
 800cab2:	f000 faf9 	bl	800d0a8 <memset>
  if(pcdHandle->Instance==USB)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	4a15      	ldr	r2, [pc, #84]	@ (800cb10 <HAL_PCD_MspInit+0x70>)
 800cabc:	4293      	cmp	r3, r2
 800cabe:	d123      	bne.n	800cb08 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cac0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cac4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800cac6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800caca:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800cacc:	f107 030c 	add.w	r3, r7, #12
 800cad0:	4618      	mov	r0, r3
 800cad2:	f7f8 ff31 	bl	8005938 <HAL_RCCEx_PeriphCLKConfig>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d001      	beq.n	800cae0 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800cadc:	f7f4 fee4 	bl	80018a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cae0:	4b0c      	ldr	r3, [pc, #48]	@ (800cb14 <HAL_PCD_MspInit+0x74>)
 800cae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cae4:	4a0b      	ldr	r2, [pc, #44]	@ (800cb14 <HAL_PCD_MspInit+0x74>)
 800cae6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800caea:	6593      	str	r3, [r2, #88]	@ 0x58
 800caec:	4b09      	ldr	r3, [pc, #36]	@ (800cb14 <HAL_PCD_MspInit+0x74>)
 800caee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800caf0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800caf4:	60bb      	str	r3, [r7, #8]
 800caf6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800caf8:	2200      	movs	r2, #0
 800cafa:	2100      	movs	r1, #0
 800cafc:	2014      	movs	r0, #20
 800cafe:	f7f5 fc8c 	bl	800241a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800cb02:	2014      	movs	r0, #20
 800cb04:	f7f5 fca3 	bl	800244e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cb08:	bf00      	nop
 800cb0a:	3760      	adds	r7, #96	@ 0x60
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	40005c00 	.word	0x40005c00
 800cb14:	40021000 	.word	0x40021000

0800cb18 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	4610      	mov	r0, r2
 800cb30:	f7fe fd28 	bl	800b584 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800cb34:	bf00      	nop
 800cb36:	3708      	adds	r7, #8
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b082      	sub	sp, #8
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
 800cb44:	460b      	mov	r3, r1
 800cb46:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800cb4e:	78fa      	ldrb	r2, [r7, #3]
 800cb50:	6879      	ldr	r1, [r7, #4]
 800cb52:	4613      	mov	r3, r2
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	4413      	add	r3, r2
 800cb58:	00db      	lsls	r3, r3, #3
 800cb5a:	440b      	add	r3, r1
 800cb5c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cb60:	681a      	ldr	r2, [r3, #0]
 800cb62:	78fb      	ldrb	r3, [r7, #3]
 800cb64:	4619      	mov	r1, r3
 800cb66:	f7fe fd62 	bl	800b62e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800cb6a:	bf00      	nop
 800cb6c:	3708      	adds	r7, #8
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}

0800cb72 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cb72:	b580      	push	{r7, lr}
 800cb74:	b082      	sub	sp, #8
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
 800cb7a:	460b      	mov	r3, r1
 800cb7c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800cb84:	78fa      	ldrb	r2, [r7, #3]
 800cb86:	6879      	ldr	r1, [r7, #4]
 800cb88:	4613      	mov	r3, r2
 800cb8a:	009b      	lsls	r3, r3, #2
 800cb8c:	4413      	add	r3, r2
 800cb8e:	00db      	lsls	r3, r3, #3
 800cb90:	440b      	add	r3, r1
 800cb92:	3324      	adds	r3, #36	@ 0x24
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	78fb      	ldrb	r3, [r7, #3]
 800cb98:	4619      	mov	r1, r3
 800cb9a:	f7fe fdab 	bl	800b6f4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800cb9e:	bf00      	nop
 800cba0:	3708      	adds	r7, #8
 800cba2:	46bd      	mov	sp, r7
 800cba4:	bd80      	pop	{r7, pc}

0800cba6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cba6:	b580      	push	{r7, lr}
 800cba8:	b082      	sub	sp, #8
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7fe febf 	bl	800b938 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800cbba:	bf00      	nop
 800cbbc:	3708      	adds	r7, #8
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}

0800cbc2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b084      	sub	sp, #16
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cbca:	2301      	movs	r3, #1
 800cbcc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	795b      	ldrb	r3, [r3, #5]
 800cbd2:	2b02      	cmp	r3, #2
 800cbd4:	d001      	beq.n	800cbda <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cbd6:	f7f4 fe67 	bl	80018a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cbe0:	7bfa      	ldrb	r2, [r7, #15]
 800cbe2:	4611      	mov	r1, r2
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f7fe fe69 	bl	800b8bc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f7fe fe15 	bl	800b820 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800cbf6:	bf00      	nop
 800cbf8:	3710      	adds	r7, #16
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}
	...

0800cc00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cc0e:	4618      	mov	r0, r3
 800cc10:	f7fe fe64 	bl	800b8dc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	7a5b      	ldrb	r3, [r3, #9]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d005      	beq.n	800cc28 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc1c:	4b04      	ldr	r3, [pc, #16]	@ (800cc30 <HAL_PCD_SuspendCallback+0x30>)
 800cc1e:	691b      	ldr	r3, [r3, #16]
 800cc20:	4a03      	ldr	r2, [pc, #12]	@ (800cc30 <HAL_PCD_SuspendCallback+0x30>)
 800cc22:	f043 0306 	orr.w	r3, r3, #6
 800cc26:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800cc28:	bf00      	nop
 800cc2a:	3708      	adds	r7, #8
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	e000ed00 	.word	0xe000ed00

0800cc34 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b082      	sub	sp, #8
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	7a5b      	ldrb	r3, [r3, #9]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d007      	beq.n	800cc54 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc44:	4b08      	ldr	r3, [pc, #32]	@ (800cc68 <HAL_PCD_ResumeCallback+0x34>)
 800cc46:	691b      	ldr	r3, [r3, #16]
 800cc48:	4a07      	ldr	r2, [pc, #28]	@ (800cc68 <HAL_PCD_ResumeCallback+0x34>)
 800cc4a:	f023 0306 	bic.w	r3, r3, #6
 800cc4e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800cc50:	f000 f9f8 	bl	800d044 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7fe fe54 	bl	800b908 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800cc60:	bf00      	nop
 800cc62:	3708      	adds	r7, #8
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	e000ed00 	.word	0xe000ed00

0800cc6c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800cc74:	4a2b      	ldr	r2, [pc, #172]	@ (800cd24 <USBD_LL_Init+0xb8>)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	4a29      	ldr	r2, [pc, #164]	@ (800cd24 <USBD_LL_Init+0xb8>)
 800cc80:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800cc84:	4b27      	ldr	r3, [pc, #156]	@ (800cd24 <USBD_LL_Init+0xb8>)
 800cc86:	4a28      	ldr	r2, [pc, #160]	@ (800cd28 <USBD_LL_Init+0xbc>)
 800cc88:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cc8a:	4b26      	ldr	r3, [pc, #152]	@ (800cd24 <USBD_LL_Init+0xb8>)
 800cc8c:	2208      	movs	r2, #8
 800cc8e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cc90:	4b24      	ldr	r3, [pc, #144]	@ (800cd24 <USBD_LL_Init+0xb8>)
 800cc92:	2202      	movs	r2, #2
 800cc94:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cc96:	4b23      	ldr	r3, [pc, #140]	@ (800cd24 <USBD_LL_Init+0xb8>)
 800cc98:	2202      	movs	r2, #2
 800cc9a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800cc9c:	4b21      	ldr	r3, [pc, #132]	@ (800cd24 <USBD_LL_Init+0xb8>)
 800cc9e:	2200      	movs	r2, #0
 800cca0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cca2:	4b20      	ldr	r3, [pc, #128]	@ (800cd24 <USBD_LL_Init+0xb8>)
 800cca4:	2200      	movs	r2, #0
 800cca6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cca8:	4b1e      	ldr	r3, [pc, #120]	@ (800cd24 <USBD_LL_Init+0xb8>)
 800ccaa:	2200      	movs	r2, #0
 800ccac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800ccae:	4b1d      	ldr	r3, [pc, #116]	@ (800cd24 <USBD_LL_Init+0xb8>)
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800ccb4:	481b      	ldr	r0, [pc, #108]	@ (800cd24 <USBD_LL_Init+0xb8>)
 800ccb6:	f7f6 fb2c 	bl	8003312 <HAL_PCD_Init>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d001      	beq.n	800ccc4 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800ccc0:	f7f4 fdf2 	bl	80018a8 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ccca:	2318      	movs	r3, #24
 800cccc:	2200      	movs	r2, #0
 800ccce:	2100      	movs	r1, #0
 800ccd0:	f7f7 ffe7 	bl	8004ca2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ccda:	2358      	movs	r3, #88	@ 0x58
 800ccdc:	2200      	movs	r2, #0
 800ccde:	2180      	movs	r1, #128	@ 0x80
 800cce0:	f7f7 ffdf 	bl	8004ca2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ccea:	23c0      	movs	r3, #192	@ 0xc0
 800ccec:	2200      	movs	r2, #0
 800ccee:	2181      	movs	r1, #129	@ 0x81
 800ccf0:	f7f7 ffd7 	bl	8004ca2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ccfa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800ccfe:	2200      	movs	r2, #0
 800cd00:	2101      	movs	r1, #1
 800cd02:	f7f7 ffce 	bl	8004ca2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cd0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cd10:	2200      	movs	r2, #0
 800cd12:	2182      	movs	r1, #130	@ 0x82
 800cd14:	f7f7 ffc5 	bl	8004ca2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cd18:	2300      	movs	r3, #0
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3708      	adds	r7, #8
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	20001b48 	.word	0x20001b48
 800cd28:	40005c00 	.word	0x40005c00

0800cd2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd34:	2300      	movs	r3, #0
 800cd36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cd42:	4618      	mov	r0, r3
 800cd44:	f7f6 fbb3 	bl	80034ae <HAL_PCD_Start>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd4c:	7bfb      	ldrb	r3, [r7, #15]
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f000 f97e 	bl	800d050 <USBD_Get_USB_Status>
 800cd54:	4603      	mov	r3, r0
 800cd56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd58:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3710      	adds	r7, #16
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b084      	sub	sp, #16
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
 800cd6a:	4608      	mov	r0, r1
 800cd6c:	4611      	mov	r1, r2
 800cd6e:	461a      	mov	r2, r3
 800cd70:	4603      	mov	r3, r0
 800cd72:	70fb      	strb	r3, [r7, #3]
 800cd74:	460b      	mov	r3, r1
 800cd76:	70bb      	strb	r3, [r7, #2]
 800cd78:	4613      	mov	r3, r2
 800cd7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd80:	2300      	movs	r3, #0
 800cd82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cd8a:	78bb      	ldrb	r3, [r7, #2]
 800cd8c:	883a      	ldrh	r2, [r7, #0]
 800cd8e:	78f9      	ldrb	r1, [r7, #3]
 800cd90:	f7f6 fcfa 	bl	8003788 <HAL_PCD_EP_Open>
 800cd94:	4603      	mov	r3, r0
 800cd96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd98:	7bfb      	ldrb	r3, [r7, #15]
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f000 f958 	bl	800d050 <USBD_Get_USB_Status>
 800cda0:	4603      	mov	r3, r0
 800cda2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cda4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3710      	adds	r7, #16
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdae:	b580      	push	{r7, lr}
 800cdb0:	b084      	sub	sp, #16
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cdc8:	78fa      	ldrb	r2, [r7, #3]
 800cdca:	4611      	mov	r1, r2
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f7f6 fd3a 	bl	8003846 <HAL_PCD_EP_Close>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdd6:	7bfb      	ldrb	r3, [r7, #15]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f000 f939 	bl	800d050 <USBD_Get_USB_Status>
 800cdde:	4603      	mov	r3, r0
 800cde0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cde2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3710      	adds	r7, #16
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b084      	sub	sp, #16
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
 800cdf4:	460b      	mov	r3, r1
 800cdf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ce06:	78fa      	ldrb	r2, [r7, #3]
 800ce08:	4611      	mov	r1, r2
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7f6 fde3 	bl	80039d6 <HAL_PCD_EP_SetStall>
 800ce10:	4603      	mov	r3, r0
 800ce12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce14:	7bfb      	ldrb	r3, [r7, #15]
 800ce16:	4618      	mov	r0, r3
 800ce18:	f000 f91a 	bl	800d050 <USBD_Get_USB_Status>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce20:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3710      	adds	r7, #16
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce2a:	b580      	push	{r7, lr}
 800ce2c:	b084      	sub	sp, #16
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]
 800ce32:	460b      	mov	r3, r1
 800ce34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce36:	2300      	movs	r3, #0
 800ce38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ce44:	78fa      	ldrb	r2, [r7, #3]
 800ce46:	4611      	mov	r1, r2
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f7f6 fe16 	bl	8003a7a <HAL_PCD_EP_ClrStall>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce52:	7bfb      	ldrb	r3, [r7, #15]
 800ce54:	4618      	mov	r0, r3
 800ce56:	f000 f8fb 	bl	800d050 <USBD_Get_USB_Status>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3710      	adds	r7, #16
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b085      	sub	sp, #20
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	460b      	mov	r3, r1
 800ce72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ce7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ce7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	da0b      	bge.n	800ce9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ce84:	78fb      	ldrb	r3, [r7, #3]
 800ce86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ce8a:	68f9      	ldr	r1, [r7, #12]
 800ce8c:	4613      	mov	r3, r2
 800ce8e:	009b      	lsls	r3, r3, #2
 800ce90:	4413      	add	r3, r2
 800ce92:	00db      	lsls	r3, r3, #3
 800ce94:	440b      	add	r3, r1
 800ce96:	3312      	adds	r3, #18
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	e00b      	b.n	800ceb4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ce9c:	78fb      	ldrb	r3, [r7, #3]
 800ce9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cea2:	68f9      	ldr	r1, [r7, #12]
 800cea4:	4613      	mov	r3, r2
 800cea6:	009b      	lsls	r3, r3, #2
 800cea8:	4413      	add	r3, r2
 800ceaa:	00db      	lsls	r3, r3, #3
 800ceac:	440b      	add	r3, r1
 800ceae:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800ceb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3714      	adds	r7, #20
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	460b      	mov	r3, r1
 800ceca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cecc:	2300      	movs	r3, #0
 800cece:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ced0:	2300      	movs	r3, #0
 800ced2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ceda:	78fa      	ldrb	r2, [r7, #3]
 800cedc:	4611      	mov	r1, r2
 800cede:	4618      	mov	r0, r3
 800cee0:	f7f6 fc2e 	bl	8003740 <HAL_PCD_SetAddress>
 800cee4:	4603      	mov	r3, r0
 800cee6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cee8:	7bfb      	ldrb	r3, [r7, #15]
 800ceea:	4618      	mov	r0, r3
 800ceec:	f000 f8b0 	bl	800d050 <USBD_Get_USB_Status>
 800cef0:	4603      	mov	r3, r0
 800cef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cef4:	7bbb      	ldrb	r3, [r7, #14]
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3710      	adds	r7, #16
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cefe:	b580      	push	{r7, lr}
 800cf00:	b086      	sub	sp, #24
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	60f8      	str	r0, [r7, #12]
 800cf06:	607a      	str	r2, [r7, #4]
 800cf08:	603b      	str	r3, [r7, #0]
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf0e:	2300      	movs	r3, #0
 800cf10:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf12:	2300      	movs	r3, #0
 800cf14:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cf1c:	7af9      	ldrb	r1, [r7, #11]
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	f7f6 fd21 	bl	8003968 <HAL_PCD_EP_Transmit>
 800cf26:	4603      	mov	r3, r0
 800cf28:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf2a:	7dfb      	ldrb	r3, [r7, #23]
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f000 f88f 	bl	800d050 <USBD_Get_USB_Status>
 800cf32:	4603      	mov	r3, r0
 800cf34:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cf36:	7dbb      	ldrb	r3, [r7, #22]
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3718      	adds	r7, #24
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b086      	sub	sp, #24
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	607a      	str	r2, [r7, #4]
 800cf4a:	603b      	str	r3, [r7, #0]
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf50:	2300      	movs	r3, #0
 800cf52:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf54:	2300      	movs	r3, #0
 800cf56:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800cf5e:	7af9      	ldrb	r1, [r7, #11]
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	f7f6 fcb7 	bl	80038d6 <HAL_PCD_EP_Receive>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf6c:	7dfb      	ldrb	r3, [r7, #23]
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f000 f86e 	bl	800d050 <USBD_Get_USB_Status>
 800cf74:	4603      	mov	r3, r0
 800cf76:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cf78:	7dbb      	ldrb	r3, [r7, #22]
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3718      	adds	r7, #24
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}

0800cf82 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cf82:	b580      	push	{r7, lr}
 800cf84:	b082      	sub	sp, #8
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	6078      	str	r0, [r7, #4]
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800cf94:	78fa      	ldrb	r2, [r7, #3]
 800cf96:	4611      	mov	r1, r2
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f7f6 fccd 	bl	8003938 <HAL_PCD_EP_GetRxCount>
 800cf9e:	4603      	mov	r3, r0
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	3708      	adds	r7, #8
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bd80      	pop	{r7, pc}

0800cfa8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800cfb4:	78fb      	ldrb	r3, [r7, #3]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d002      	beq.n	800cfc0 <HAL_PCDEx_LPM_Callback+0x18>
 800cfba:	2b01      	cmp	r3, #1
 800cfbc:	d013      	beq.n	800cfe6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800cfbe:	e023      	b.n	800d008 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	7a5b      	ldrb	r3, [r3, #9]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d007      	beq.n	800cfd8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cfc8:	f000 f83c 	bl	800d044 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cfcc:	4b10      	ldr	r3, [pc, #64]	@ (800d010 <HAL_PCDEx_LPM_Callback+0x68>)
 800cfce:	691b      	ldr	r3, [r3, #16]
 800cfd0:	4a0f      	ldr	r2, [pc, #60]	@ (800d010 <HAL_PCDEx_LPM_Callback+0x68>)
 800cfd2:	f023 0306 	bic.w	r3, r3, #6
 800cfd6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7fe fc92 	bl	800b908 <USBD_LL_Resume>
    break;
 800cfe4:	e010      	b.n	800d008 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cfec:	4618      	mov	r0, r3
 800cfee:	f7fe fc75 	bl	800b8dc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	7a5b      	ldrb	r3, [r3, #9]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d005      	beq.n	800d006 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cffa:	4b05      	ldr	r3, [pc, #20]	@ (800d010 <HAL_PCDEx_LPM_Callback+0x68>)
 800cffc:	691b      	ldr	r3, [r3, #16]
 800cffe:	4a04      	ldr	r2, [pc, #16]	@ (800d010 <HAL_PCDEx_LPM_Callback+0x68>)
 800d000:	f043 0306 	orr.w	r3, r3, #6
 800d004:	6113      	str	r3, [r2, #16]
    break;
 800d006:	bf00      	nop
}
 800d008:	bf00      	nop
 800d00a:	3708      	adds	r7, #8
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}
 800d010:	e000ed00 	.word	0xe000ed00

0800d014 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d01c:	4b03      	ldr	r3, [pc, #12]	@ (800d02c <USBD_static_malloc+0x18>)
}
 800d01e:	4618      	mov	r0, r3
 800d020:	370c      	adds	r7, #12
 800d022:	46bd      	mov	sp, r7
 800d024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d028:	4770      	bx	lr
 800d02a:	bf00      	nop
 800d02c:	20001e24 	.word	0x20001e24

0800d030 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d030:	b480      	push	{r7}
 800d032:	b083      	sub	sp, #12
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]

}
 800d038:	bf00      	nop
 800d03a:	370c      	adds	r7, #12
 800d03c:	46bd      	mov	sp, r7
 800d03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d042:	4770      	bx	lr

0800d044 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d048:	f7f3 fcb0 	bl	80009ac <SystemClock_Config>
}
 800d04c:	bf00      	nop
 800d04e:	bd80      	pop	{r7, pc}

0800d050 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d050:	b480      	push	{r7}
 800d052:	b085      	sub	sp, #20
 800d054:	af00      	add	r7, sp, #0
 800d056:	4603      	mov	r3, r0
 800d058:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d05a:	2300      	movs	r3, #0
 800d05c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d05e:	79fb      	ldrb	r3, [r7, #7]
 800d060:	2b03      	cmp	r3, #3
 800d062:	d817      	bhi.n	800d094 <USBD_Get_USB_Status+0x44>
 800d064:	a201      	add	r2, pc, #4	@ (adr r2, 800d06c <USBD_Get_USB_Status+0x1c>)
 800d066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d06a:	bf00      	nop
 800d06c:	0800d07d 	.word	0x0800d07d
 800d070:	0800d083 	.word	0x0800d083
 800d074:	0800d089 	.word	0x0800d089
 800d078:	0800d08f 	.word	0x0800d08f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d07c:	2300      	movs	r3, #0
 800d07e:	73fb      	strb	r3, [r7, #15]
    break;
 800d080:	e00b      	b.n	800d09a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d082:	2303      	movs	r3, #3
 800d084:	73fb      	strb	r3, [r7, #15]
    break;
 800d086:	e008      	b.n	800d09a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d088:	2301      	movs	r3, #1
 800d08a:	73fb      	strb	r3, [r7, #15]
    break;
 800d08c:	e005      	b.n	800d09a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d08e:	2303      	movs	r3, #3
 800d090:	73fb      	strb	r3, [r7, #15]
    break;
 800d092:	e002      	b.n	800d09a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d094:	2303      	movs	r3, #3
 800d096:	73fb      	strb	r3, [r7, #15]
    break;
 800d098:	bf00      	nop
  }
  return usb_status;
 800d09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3714      	adds	r7, #20
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr

0800d0a8 <memset>:
 800d0a8:	4402      	add	r2, r0
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	4293      	cmp	r3, r2
 800d0ae:	d100      	bne.n	800d0b2 <memset+0xa>
 800d0b0:	4770      	bx	lr
 800d0b2:	f803 1b01 	strb.w	r1, [r3], #1
 800d0b6:	e7f9      	b.n	800d0ac <memset+0x4>

0800d0b8 <__libc_init_array>:
 800d0b8:	b570      	push	{r4, r5, r6, lr}
 800d0ba:	4d0d      	ldr	r5, [pc, #52]	@ (800d0f0 <__libc_init_array+0x38>)
 800d0bc:	4c0d      	ldr	r4, [pc, #52]	@ (800d0f4 <__libc_init_array+0x3c>)
 800d0be:	1b64      	subs	r4, r4, r5
 800d0c0:	10a4      	asrs	r4, r4, #2
 800d0c2:	2600      	movs	r6, #0
 800d0c4:	42a6      	cmp	r6, r4
 800d0c6:	d109      	bne.n	800d0dc <__libc_init_array+0x24>
 800d0c8:	4d0b      	ldr	r5, [pc, #44]	@ (800d0f8 <__libc_init_array+0x40>)
 800d0ca:	4c0c      	ldr	r4, [pc, #48]	@ (800d0fc <__libc_init_array+0x44>)
 800d0cc:	f000 f826 	bl	800d11c <_init>
 800d0d0:	1b64      	subs	r4, r4, r5
 800d0d2:	10a4      	asrs	r4, r4, #2
 800d0d4:	2600      	movs	r6, #0
 800d0d6:	42a6      	cmp	r6, r4
 800d0d8:	d105      	bne.n	800d0e6 <__libc_init_array+0x2e>
 800d0da:	bd70      	pop	{r4, r5, r6, pc}
 800d0dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0e0:	4798      	blx	r3
 800d0e2:	3601      	adds	r6, #1
 800d0e4:	e7ee      	b.n	800d0c4 <__libc_init_array+0xc>
 800d0e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0ea:	4798      	blx	r3
 800d0ec:	3601      	adds	r6, #1
 800d0ee:	e7f2      	b.n	800d0d6 <__libc_init_array+0x1e>
 800d0f0:	0800d1d4 	.word	0x0800d1d4
 800d0f4:	0800d1d4 	.word	0x0800d1d4
 800d0f8:	0800d1d4 	.word	0x0800d1d4
 800d0fc:	0800d1d8 	.word	0x0800d1d8

0800d100 <memcpy>:
 800d100:	440a      	add	r2, r1
 800d102:	4291      	cmp	r1, r2
 800d104:	f100 33ff 	add.w	r3, r0, #4294967295
 800d108:	d100      	bne.n	800d10c <memcpy+0xc>
 800d10a:	4770      	bx	lr
 800d10c:	b510      	push	{r4, lr}
 800d10e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d112:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d116:	4291      	cmp	r1, r2
 800d118:	d1f9      	bne.n	800d10e <memcpy+0xe>
 800d11a:	bd10      	pop	{r4, pc}

0800d11c <_init>:
 800d11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d11e:	bf00      	nop
 800d120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d122:	bc08      	pop	{r3}
 800d124:	469e      	mov	lr, r3
 800d126:	4770      	bx	lr

0800d128 <_fini>:
 800d128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d12a:	bf00      	nop
 800d12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d12e:	bc08      	pop	{r3}
 800d130:	469e      	mov	lr, r3
 800d132:	4770      	bx	lr
