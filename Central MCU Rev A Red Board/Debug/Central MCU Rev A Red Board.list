
Central MCU Rev A Red Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba70  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800bc48  0800bc48  0000cc48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bce0  0800bce0  0000d194  2**0
                  CONTENTS
  4 .ARM          00000008  0800bce0  0800bce0  0000cce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bce8  0800bce8  0000d194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bce8  0800bce8  0000cce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bcec  0800bcec  0000ccec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000194  20000000  0800bcf0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e60  20000194  0800be84  0000d194  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ff4  0800be84  0000dff4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d194  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ccbc  00000000  00000000  0000d1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eb2  00000000  00000000  00029e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  0002dd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011f5  00000000  00000000  0002f470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029299  00000000  00000000  00030665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d4ef  00000000  00000000  000598fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100b0e  00000000  00000000  00076ded  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001778fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061dc  00000000  00000000  00177940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0017db1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000194 	.word	0x20000194
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800bc30 	.word	0x0800bc30

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000198 	.word	0x20000198
 8000214:	0800bc30 	.word	0x0800bc30

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f001 fd76 	bl	8001ffe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 fa61 	bl	80009d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f001 f80b 	bl	8001530 <MX_GPIO_Init>
  MX_TIM1_Init();
 800051a:	f000 faa7 	bl	8000a6c <MX_TIM1_Init>
  MX_TIM2_Init();
 800051e:	f000 fb39 	bl	8000b94 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000522:	f000 fb91 	bl	8000c48 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000526:	f000 fbe9 	bl	8000cfc <MX_TIM4_Init>
  MX_TIM5_Init();
 800052a:	f000 fc41 	bl	8000db0 <MX_TIM5_Init>
  MX_TIM8_Init();
 800052e:	f000 fd11 	bl	8000f54 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000532:	f000 fda3 	bl	800107c <MX_TIM15_Init>
  MX_TIM16_Init();
 8000536:	f000 fe27 	bl	8001188 <MX_TIM16_Init>
  MX_TIM17_Init();
 800053a:	f000 fe9f 	bl	800127c <MX_TIM17_Init>
  MX_TIM20_Init();
 800053e:	f000 ff17 	bl	8001370 <MX_TIM20_Init>
  MX_USB_Device_Init();
 8000542:	f00a fe27 	bl	800b194 <MX_USB_Device_Init>
  MX_USART1_UART_Init();
 8000546:	f000 ffa7 	bl	8001498 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800054a:	f000 fc8b 	bl	8000e64 <MX_TIM6_Init>
  MX_TIM7_Init();
 800054e:	f000 fcc9 	bl	8000ee4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_SET);
 8000552:	2201      	movs	r2, #1
 8000554:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000558:	487f      	ldr	r0, [pc, #508]	@ (8000758 <main+0x250>)
 800055a:	f002 f94d 	bl	80027f8 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim6);
 800055e:	487f      	ldr	r0, [pc, #508]	@ (800075c <main+0x254>)
 8000560:	f004 ff02 	bl	8005368 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000564:	2100      	movs	r1, #0
 8000566:	487e      	ldr	r0, [pc, #504]	@ (8000760 <main+0x258>)
 8000568:	f004 fffc 	bl	8005564 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800056c:	2100      	movs	r1, #0
 800056e:	487d      	ldr	r0, [pc, #500]	@ (8000764 <main+0x25c>)
 8000570:	f004 fff8 	bl	8005564 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000574:	2100      	movs	r1, #0
 8000576:	487c      	ldr	r0, [pc, #496]	@ (8000768 <main+0x260>)
 8000578:	f004 fff4 	bl	8005564 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800057c:	2100      	movs	r1, #0
 800057e:	487b      	ldr	r0, [pc, #492]	@ (800076c <main+0x264>)
 8000580:	f004 fff0 	bl	8005564 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8000584:	2100      	movs	r1, #0
 8000586:	487a      	ldr	r0, [pc, #488]	@ (8000770 <main+0x268>)
 8000588:	f004 ffec 	bl	8005564 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800058c:	2100      	movs	r1, #0
 800058e:	4879      	ldr	r0, [pc, #484]	@ (8000774 <main+0x26c>)
 8000590:	f004 ffe8 	bl	8005564 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 8000594:	2100      	movs	r1, #0
 8000596:	4878      	ldr	r0, [pc, #480]	@ (8000778 <main+0x270>)
 8000598:	f004 ffe4 	bl	8005564 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800059c:	2100      	movs	r1, #0
 800059e:	4877      	ldr	r0, [pc, #476]	@ (800077c <main+0x274>)
 80005a0:	f004 ffe0 	bl	8005564 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80005a4:	2100      	movs	r1, #0
 80005a6:	4876      	ldr	r0, [pc, #472]	@ (8000780 <main+0x278>)
 80005a8:	f004 ffdc 	bl	8005564 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim20, TIM_CHANNEL_1);
 80005ac:	2100      	movs	r1, #0
 80005ae:	4875      	ldr	r0, [pc, #468]	@ (8000784 <main+0x27c>)
 80005b0:	f004 ffd8 	bl	8005564 <HAL_TIM_PWM_Start>

  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 35999); // motor 0
 80005b4:	4b6a      	ldr	r3, [pc, #424]	@ (8000760 <main+0x258>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80005bc:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 35999);// motor 1
 80005be:	4b69      	ldr	r3, [pc, #420]	@ (8000764 <main+0x25c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80005c6:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 35999);// motor 2
 80005c8:	4b67      	ldr	r3, [pc, #412]	@ (8000768 <main+0x260>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80005d0:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 35999);// motor 3
 80005d2:	4b66      	ldr	r3, [pc, #408]	@ (800076c <main+0x264>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80005da:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 35999);// motor 4
 80005dc:	4b64      	ldr	r3, [pc, #400]	@ (8000770 <main+0x268>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80005e4:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 35999); //grabber pwm, grabber isn't planned at this time
 80005e6:	4b63      	ldr	r3, [pc, #396]	@ (8000774 <main+0x26c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80005ee:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 35999);// motor 5
 80005f0:	4b61      	ldr	r3, [pc, #388]	@ (8000778 <main+0x270>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80005f8:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 35999);// motor 6
 80005fa:	4b60      	ldr	r3, [pc, #384]	@ (800077c <main+0x274>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8000602:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, 35999);// motor 7
 8000604:	4b5e      	ldr	r3, [pc, #376]	@ (8000780 <main+0x278>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 800060c:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim20, TIM_CHANNEL_1, 35999);// torpedo pwm, torpedo hasn't been planned yet
 800060e:	4b5d      	ldr	r3, [pc, #372]	@ (8000784 <main+0x27c>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8000616:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_Delay(3000); // delay for 3 seconds since the ESC's need to calibrate themselves
 8000618:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800061c:	f001 fd60 	bl	80020e0 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  GPIO_PinState usbPresent = HAL_GPIO_ReadPin(GPIOC, VBUS_DETECT_Pin);
 8000620:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000624:	484c      	ldr	r0, [pc, #304]	@ (8000758 <main+0x250>)
 8000626:	f002 f8cf 	bl	80027c8 <HAL_GPIO_ReadPin>
 800062a:	4603      	mov	r3, r0
 800062c:	71bb      	strb	r3, [r7, #6]

	  if (usbPresent){
 800062e:	79bb      	ldrb	r3, [r7, #6]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d00d      	beq.n	8000650 <main+0x148>
		  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin, GPIO_PIN_RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800063a:	4847      	ldr	r0, [pc, #284]	@ (8000758 <main+0x250>)
 800063c:	f002 f8dc 	bl	80027f8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, D__PU_Pin, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000646:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800064a:	f002 f8d5 	bl	80027f8 <HAL_GPIO_WritePin>
 800064e:	e00c      	b.n	800066a <main+0x162>
	  }
	  else {
		  HAL_GPIO_WritePin(GPIOA, D__PU_Pin, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000656:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800065a:	f002 f8cd 	bl	80027f8 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000664:	483c      	ldr	r0, [pc, #240]	@ (8000758 <main+0x250>)
 8000666:	f002 f8c7 	bl	80027f8 <HAL_GPIO_WritePin>
	  }
	    CDC_Transmit_FS((uint8_t *)usb_tx_buffer, sizeof(usb_tx_buffer) - 1);
 800066a:	210d      	movs	r1, #13
 800066c:	4846      	ldr	r0, [pc, #280]	@ (8000788 <main+0x280>)
 800066e:	f00a fe59 	bl	800b324 <CDC_Transmit_FS>
	  HAL_Delay(400);
	  HAL_GPIO_WritePin(GPIOC, LED_RED_Pin, GPIO_PIN_SET);
	  HAL_Delay(400);
	  */

	  if (okayToRunMotorsYet == 1){
 8000672:	4b46      	ldr	r3, [pc, #280]	@ (800078c <main+0x284>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b01      	cmp	r3, #1
 8000678:	d12f      	bne.n	80006da <main+0x1d2>
	  Set_TIM_Compare(&htim1, usbBuffer[0]);
 800067a:	4b45      	ldr	r3, [pc, #276]	@ (8000790 <main+0x288>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4619      	mov	r1, r3
 8000680:	4837      	ldr	r0, [pc, #220]	@ (8000760 <main+0x258>)
 8000682:	f001 f8a7 	bl	80017d4 <Set_TIM_Compare>
	  Set_TIM_Compare(&htim2, usbBuffer[1]);
 8000686:	4b42      	ldr	r3, [pc, #264]	@ (8000790 <main+0x288>)
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	4619      	mov	r1, r3
 800068c:	4835      	ldr	r0, [pc, #212]	@ (8000764 <main+0x25c>)
 800068e:	f001 f8a1 	bl	80017d4 <Set_TIM_Compare>
	  Set_TIM_Compare(&htim3, usbBuffer[2]);
 8000692:	4b3f      	ldr	r3, [pc, #252]	@ (8000790 <main+0x288>)
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	4619      	mov	r1, r3
 8000698:	4833      	ldr	r0, [pc, #204]	@ (8000768 <main+0x260>)
 800069a:	f001 f89b 	bl	80017d4 <Set_TIM_Compare>
	  Set_TIM_Compare(&htim4, usbBuffer[3]);
 800069e:	4b3c      	ldr	r3, [pc, #240]	@ (8000790 <main+0x288>)
 80006a0:	68db      	ldr	r3, [r3, #12]
 80006a2:	4619      	mov	r1, r3
 80006a4:	4831      	ldr	r0, [pc, #196]	@ (800076c <main+0x264>)
 80006a6:	f001 f895 	bl	80017d4 <Set_TIM_Compare>
	  Set_TIM_Compare(&htim5, usbBuffer[4]);
 80006aa:	4b39      	ldr	r3, [pc, #228]	@ (8000790 <main+0x288>)
 80006ac:	691b      	ldr	r3, [r3, #16]
 80006ae:	4619      	mov	r1, r3
 80006b0:	482f      	ldr	r0, [pc, #188]	@ (8000770 <main+0x268>)
 80006b2:	f001 f88f 	bl	80017d4 <Set_TIM_Compare>
	  Set_TIM_Compare(&htim15, usbBuffer[5]);
 80006b6:	4b36      	ldr	r3, [pc, #216]	@ (8000790 <main+0x288>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4619      	mov	r1, r3
 80006bc:	482e      	ldr	r0, [pc, #184]	@ (8000778 <main+0x270>)
 80006be:	f001 f889 	bl	80017d4 <Set_TIM_Compare>
	  Set_TIM_Compare(&htim16, usbBuffer[6]);
 80006c2:	4b33      	ldr	r3, [pc, #204]	@ (8000790 <main+0x288>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	4619      	mov	r1, r3
 80006c8:	482c      	ldr	r0, [pc, #176]	@ (800077c <main+0x274>)
 80006ca:	f001 f883 	bl	80017d4 <Set_TIM_Compare>
	  Set_TIM_Compare(&htim17, usbBuffer[7]);
 80006ce:	4b30      	ldr	r3, [pc, #192]	@ (8000790 <main+0x288>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	4619      	mov	r1, r3
 80006d4:	482a      	ldr	r0, [pc, #168]	@ (8000780 <main+0x278>)
 80006d6:	f001 f87d 	bl	80017d4 <Set_TIM_Compare>
	  }

	  if (usbBuffer[8] !=0){ // if the kill value isn't zero then set the internal kill pin high
 80006da:	4b2d      	ldr	r3, [pc, #180]	@ (8000790 <main+0x288>)
 80006dc:	6a1b      	ldr	r3, [r3, #32]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d00c      	beq.n	80006fc <main+0x1f4>
		  HAL_GPIO_WritePin(GPIOC, INT_KILL_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80006e8:	481b      	ldr	r0, [pc, #108]	@ (8000758 <main+0x250>)
 80006ea:	f002 f885 	bl	80027f8 <HAL_GPIO_WritePin>
		  intKillState = 1;
 80006ee:	4b29      	ldr	r3, [pc, #164]	@ (8000794 <main+0x28c>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	701a      	strb	r2, [r3, #0]
		  prevIntKillState = 1;
 80006f4:	4b28      	ldr	r3, [pc, #160]	@ (8000798 <main+0x290>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]
 80006fa:	e008      	b.n	800070e <main+0x206>
	  }

	  else {
		  HAL_GPIO_WritePin(GPIOC, INT_KILL_Pin, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000702:	4815      	ldr	r0, [pc, #84]	@ (8000758 <main+0x250>)
 8000704:	f002 f878 	bl	80027f8 <HAL_GPIO_WritePin>
		  intKillState = 0;
 8000708:	4b22      	ldr	r3, [pc, #136]	@ (8000794 <main+0x28c>)
 800070a:	2200      	movs	r2, #0
 800070c:	701a      	strb	r2, [r3, #0]
	  }

	  if ((usbBuffer[9] == 1) || (powerDown == 1)){ // if the button or usb packet triggers power down then set power off pin high
 800070e:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <main+0x288>)
 8000710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000712:	2b01      	cmp	r3, #1
 8000714:	d003      	beq.n	800071e <main+0x216>
 8000716:	4b21      	ldr	r3, [pc, #132]	@ (800079c <main+0x294>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d105      	bne.n	800072a <main+0x222>
		  HAL_GPIO_WritePin(GPIOC, POWER_OFF_Pin, GPIO_PIN_SET);
 800071e:	2201      	movs	r2, #1
 8000720:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000724:	480c      	ldr	r0, [pc, #48]	@ (8000758 <main+0x250>)
 8000726:	f002 f867 	bl	80027f8 <HAL_GPIO_WritePin>
	  }

	  extKillState = HAL_GPIO_ReadPin(EXT_KILL_GPIO_Port, EXT_KILL_Pin);
 800072a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800072e:	481c      	ldr	r0, [pc, #112]	@ (80007a0 <main+0x298>)
 8000730:	f002 f84a 	bl	80027c8 <HAL_GPIO_ReadPin>
 8000734:	4603      	mov	r3, r0
 8000736:	461a      	mov	r2, r3
 8000738:	4b1a      	ldr	r3, [pc, #104]	@ (80007a4 <main+0x29c>)
 800073a:	701a      	strb	r2, [r3, #0]

	  if  ((extKillState == 1) && (prevExtKillState == 0)){
 800073c:	4b19      	ldr	r3, [pc, #100]	@ (80007a4 <main+0x29c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d13e      	bne.n	80007c2 <main+0x2ba>
 8000744:	4b18      	ldr	r3, [pc, #96]	@ (80007a8 <main+0x2a0>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d13a      	bne.n	80007c2 <main+0x2ba>
		  prevExtKillState = 1;
 800074c:	4b16      	ldr	r3, [pc, #88]	@ (80007a8 <main+0x2a0>)
 800074e:	2201      	movs	r2, #1
 8000750:	701a      	strb	r2, [r3, #0]

		  // if the ext kill state is high then set the motor values to zero
		  //so that hopefully the motors don't immediately spin after kill magnet is replaced.

		  for (uint8_t i = 0; i < 8; i++) {
 8000752:	2300      	movs	r3, #0
 8000754:	71fb      	strb	r3, [r7, #7]
 8000756:	e031      	b.n	80007bc <main+0x2b4>
 8000758:	48000800 	.word	0x48000800
 800075c:	2000032c 	.word	0x2000032c
 8000760:	200001b0 	.word	0x200001b0
 8000764:	200001fc 	.word	0x200001fc
 8000768:	20000248 	.word	0x20000248
 800076c:	20000294 	.word	0x20000294
 8000770:	200002e0 	.word	0x200002e0
 8000774:	200003c4 	.word	0x200003c4
 8000778:	20000410 	.word	0x20000410
 800077c:	2000045c 	.word	0x2000045c
 8000780:	200004a8 	.word	0x200004a8
 8000784:	200004f4 	.word	0x200004f4
 8000788:	20000000 	.word	0x20000000
 800078c:	2000000e 	.word	0x2000000e
 8000790:	200005d4 	.word	0x200005d4
 8000794:	20000614 	.word	0x20000614
 8000798:	20000617 	.word	0x20000617
 800079c:	2000061b 	.word	0x2000061b
 80007a0:	48000400 	.word	0x48000400
 80007a4:	20000615 	.word	0x20000615
 80007a8:	20000616 	.word	0x20000616
		      usbBuffer[i] = 0;
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	4a6f      	ldr	r2, [pc, #444]	@ (800096c <main+0x464>)
 80007b0:	2100      	movs	r1, #0
 80007b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  for (uint8_t i = 0; i < 8; i++) {
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	3301      	adds	r3, #1
 80007ba:	71fb      	strb	r3, [r7, #7]
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	2b07      	cmp	r3, #7
 80007c0:	d9f4      	bls.n	80007ac <main+0x2a4>
		  }
		  // fixme send usb data telling computer the sub is supposed to be killed so that the motors don't continue running after un-killing
	  }

	  if (((prevExtKillState == 1) && (extKillState == 0) && (intKillState == 0)) || ((intKillState == 0) && (prevIntKillState == 1) && (extKillState == 0))){
 80007c2:	4b6b      	ldr	r3, [pc, #428]	@ (8000970 <main+0x468>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d107      	bne.n	80007da <main+0x2d2>
 80007ca:	4b6a      	ldr	r3, [pc, #424]	@ (8000974 <main+0x46c>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d103      	bne.n	80007da <main+0x2d2>
 80007d2:	4b69      	ldr	r3, [pc, #420]	@ (8000978 <main+0x470>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d00b      	beq.n	80007f2 <main+0x2ea>
 80007da:	4b67      	ldr	r3, [pc, #412]	@ (8000978 <main+0x470>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d144      	bne.n	800086c <main+0x364>
 80007e2:	4b66      	ldr	r3, [pc, #408]	@ (800097c <main+0x474>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d140      	bne.n	800086c <main+0x364>
 80007ea:	4b62      	ldr	r3, [pc, #392]	@ (8000974 <main+0x46c>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d13c      	bne.n	800086c <main+0x364>
		  	  // if we were killed before and now we aren't and neither of the kills are triggered anymore then calibrate the ESC's
		  prevExtKillState = 0;
 80007f2:	4b5f      	ldr	r3, [pc, #380]	@ (8000970 <main+0x468>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]
		  prevIntKillState = 0;
 80007f8:	4b60      	ldr	r3, [pc, #384]	@ (800097c <main+0x474>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
		  okayToRunMotorsYet = 0;
 80007fe:	4b60      	ldr	r3, [pc, #384]	@ (8000980 <main+0x478>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]

		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 35999); // set all motors to 1500uS so they can be calibrated after being re-powered
 8000804:	4b5f      	ldr	r3, [pc, #380]	@ (8000984 <main+0x47c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 800080c:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 35999);
 800080e:	4b5e      	ldr	r3, [pc, #376]	@ (8000988 <main+0x480>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8000816:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 35999);
 8000818:	4b5c      	ldr	r3, [pc, #368]	@ (800098c <main+0x484>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8000820:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 35999);
 8000822:	4b5b      	ldr	r3, [pc, #364]	@ (8000990 <main+0x488>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 800082a:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_1, 35999);
 800082c:	4b59      	ldr	r3, [pc, #356]	@ (8000994 <main+0x48c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8000834:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 35999);
 8000836:	4b58      	ldr	r3, [pc, #352]	@ (8000998 <main+0x490>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 800083e:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, 35999);
 8000840:	4b56      	ldr	r3, [pc, #344]	@ (800099c <main+0x494>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8000848:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, 35999);
 800084a:	4b55      	ldr	r3, [pc, #340]	@ (80009a0 <main+0x498>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8000852:	635a      	str	r2, [r3, #52]	@ 0x34

	  	  	__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 8000854:	4b53      	ldr	r3, [pc, #332]	@ (80009a4 <main+0x49c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f06f 0201 	mvn.w	r2, #1
 800085c:	611a      	str	r2, [r3, #16]
	    	  __HAL_TIM_SET_COUNTER(&htim7, 0);
 800085e:	4b51      	ldr	r3, [pc, #324]	@ (80009a4 <main+0x49c>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	@ 0x24
	  	    HAL_TIM_Base_Start_IT(&htim7); // start 3 second timer to calibrate ESC's
 8000866:	484f      	ldr	r0, [pc, #316]	@ (80009a4 <main+0x49c>)
 8000868:	f004 fd7e 	bl	8005368 <HAL_TIM_Base_Start_IT>

	    CDC_Transmit_FS((uint8_t *)ascii_str, sizeof(ascii_str) - 1);

*/

	      GPIO_PinState buttonState = HAL_GPIO_ReadPin(GPIOC, BUTTON_IN_Pin); // read the button status
 800086c:	2180      	movs	r1, #128	@ 0x80
 800086e:	484e      	ldr	r0, [pc, #312]	@ (80009a8 <main+0x4a0>)
 8000870:	f001 ffaa 	bl	80027c8 <HAL_GPIO_ReadPin>
 8000874:	4603      	mov	r3, r0
 8000876:	717b      	strb	r3, [r7, #5]

	      if (buttonState == GPIO_PIN_RESET && (buttonPushedAlready == 0)) // if the button gets pulled low (pushed) and it wasn't pulled low on the previous cycle
 8000878:	797b      	ldrb	r3, [r7, #5]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d142      	bne.n	8000904 <main+0x3fc>
 800087e:	4b4b      	ldr	r3, [pc, #300]	@ (80009ac <main+0x4a4>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d13e      	bne.n	8000904 <main+0x3fc>
	  {
	    	  wentLowTime = HAL_GetTick();
 8000886:	f001 fc1f 	bl	80020c8 <HAL_GetTick>
 800088a:	4603      	mov	r3, r0
 800088c:	b2da      	uxtb	r2, r3
 800088e:	4b48      	ldr	r3, [pc, #288]	@ (80009b0 <main+0x4a8>)
 8000890:	701a      	strb	r2, [r3, #0]
	    	  lockColor = 1; // lock the current led color so that we can blink it repeatedly
 8000892:	4b48      	ldr	r3, [pc, #288]	@ (80009b4 <main+0x4ac>)
 8000894:	2201      	movs	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
	    	  buttonPushedAlready = 1; // this lets us know the button it already pushed so it doesn't get stuck if the button is held down
 8000898:	4b44      	ldr	r3, [pc, #272]	@ (80009ac <main+0x4a4>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]

	    	  if (color == 'G'){ // if the red led is on, the 'G' is confusing but this is what the color variable gets set to when the red led is on
 800089e:	4b46      	ldr	r3, [pc, #280]	@ (80009b8 <main+0x4b0>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b47      	cmp	r3, #71	@ 0x47
 80008a4:	d10c      	bne.n	80008c0 <main+0x3b8>
	    		  /*we will use red to turn the sub off.
	    		   * The red led will flash slowly and the user will have to push it a
	    		   * second time in order to avoid accidentally powering the sub off
	    		   */

	    		  __HAL_TIM_SET_AUTORELOAD(&htim6, 7500); // give a longer period for the red led
 80008a6:	4b45      	ldr	r3, [pc, #276]	@ (80009bc <main+0x4b4>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 80008ae:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008b0:	4b42      	ldr	r3, [pc, #264]	@ (80009bc <main+0x4b4>)
 80008b2:	f641 524c 	movw	r2, #7500	@ 0x1d4c
 80008b6:	60da      	str	r2, [r3, #12]
	    		  checkRedMode = 1; // enter checkRedMode (we check for the second button push)
 80008b8:	4b41      	ldr	r3, [pc, #260]	@ (80009c0 <main+0x4b8>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	701a      	strb	r2, [r3, #0]
 80008be:	e019      	b.n	80008f4 <main+0x3ec>
	    	  }
	    	  else {

	    		  if (color == 'B'){ // happens when the actual led is green
 80008c0:	4b3d      	ldr	r3, [pc, #244]	@ (80009b8 <main+0x4b0>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2b42      	cmp	r3, #66	@ 0x42
 80008c6:	d104      	bne.n	80008d2 <main+0x3ca>

		    		  CDC_Transmit_FS((uint8_t *)"Green\r\n", 7);
 80008c8:	2107      	movs	r1, #7
 80008ca:	483e      	ldr	r0, [pc, #248]	@ (80009c4 <main+0x4bc>)
 80008cc:	f00a fd2a 	bl	800b324 <CDC_Transmit_FS>
 80008d0:	e007      	b.n	80008e2 <main+0x3da>
		    		  // fix me transmit something over USB so software can know we want to enter autonomous mode or whatever
	    		  }
	    		  else if (color == 'R'){ // happens when the actual led is Blue
 80008d2:	4b39      	ldr	r3, [pc, #228]	@ (80009b8 <main+0x4b0>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b52      	cmp	r3, #82	@ 0x52
 80008d8:	d103      	bne.n	80008e2 <main+0x3da>
		    		  CDC_Transmit_FS((uint8_t *)"Blue\r\n", 6);
 80008da:	2106      	movs	r1, #6
 80008dc:	483a      	ldr	r0, [pc, #232]	@ (80009c8 <main+0x4c0>)
 80008de:	f00a fd21 	bl	800b324 <CDC_Transmit_FS>
		    		  // fix me transmit something over USB so software can know we want to enter autonomous mode or whatever
	    		  }
	    	  __HAL_TIM_SET_AUTORELOAD(&htim6, 2000); // for non red colors we blink the leds faster
 80008e2:	4b36      	ldr	r3, [pc, #216]	@ (80009bc <main+0x4b4>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80008ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008ec:	4b33      	ldr	r3, [pc, #204]	@ (80009bc <main+0x4b4>)
 80008ee:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80008f2:	60da      	str	r2, [r3, #12]
	    	  }
	    	  __HAL_TIM_SET_COUNTER(&htim6, __HAL_TIM_GET_AUTORELOAD(&htim6) - 1); // force the previous timer to overflow, otherwise the led might stay on for a bit before the blink starts
 80008f4:	4b31      	ldr	r3, [pc, #196]	@ (80009bc <main+0x4b4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008fa:	4b30      	ldr	r3, [pc, #192]	@ (80009bc <main+0x4b4>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	3a01      	subs	r2, #1
 8000900:	625a      	str	r2, [r3, #36]	@ 0x24
 8000902:	e017      	b.n	8000934 <main+0x42c>
	  }

	      else if ((buttonPushedAlready == 1) && (buttonState == GPIO_PIN_SET) && ((HAL_GetTick() - wentLowTime) > 200)){
 8000904:	4b29      	ldr	r3, [pc, #164]	@ (80009ac <main+0x4a4>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d113      	bne.n	8000934 <main+0x42c>
 800090c:	797b      	ldrb	r3, [r7, #5]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d110      	bne.n	8000934 <main+0x42c>
 8000912:	f001 fbd9 	bl	80020c8 <HAL_GetTick>
 8000916:	4603      	mov	r3, r0
 8000918:	4a25      	ldr	r2, [pc, #148]	@ (80009b0 <main+0x4a8>)
 800091a:	7812      	ldrb	r2, [r2, #0]
 800091c:	1a9b      	subs	r3, r3, r2
 800091e:	2bc8      	cmp	r3, #200	@ 0xc8
 8000920:	d908      	bls.n	8000934 <main+0x42c>
	    	  wentHighTime = HAL_GetTick();
 8000922:	f001 fbd1 	bl	80020c8 <HAL_GetTick>
 8000926:	4603      	mov	r3, r0
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4b28      	ldr	r3, [pc, #160]	@ (80009cc <main+0x4c4>)
 800092c:	701a      	strb	r2, [r3, #0]
	    	  buttonReleased = 1; // we know the button was released
 800092e:	4b28      	ldr	r3, [pc, #160]	@ (80009d0 <main+0x4c8>)
 8000930:	2201      	movs	r2, #1
 8000932:	701a      	strb	r2, [r3, #0]
	      }

	      if ((checkRedMode == 1) && (buttonReleased == 1) && (buttonState == GPIO_PIN_RESET) && ((HAL_GetTick() - wentHighTime) > 200)){
 8000934:	4b22      	ldr	r3, [pc, #136]	@ (80009c0 <main+0x4b8>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b01      	cmp	r3, #1
 800093a:	f47f ae71 	bne.w	8000620 <main+0x118>
 800093e:	4b24      	ldr	r3, [pc, #144]	@ (80009d0 <main+0x4c8>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b01      	cmp	r3, #1
 8000944:	f47f ae6c 	bne.w	8000620 <main+0x118>
 8000948:	797b      	ldrb	r3, [r7, #5]
 800094a:	2b00      	cmp	r3, #0
 800094c:	f47f ae68 	bne.w	8000620 <main+0x118>
 8000950:	f001 fbba 	bl	80020c8 <HAL_GetTick>
 8000954:	4603      	mov	r3, r0
 8000956:	4a1d      	ldr	r2, [pc, #116]	@ (80009cc <main+0x4c4>)
 8000958:	7812      	ldrb	r2, [r2, #0]
 800095a:	1a9b      	subs	r3, r3, r2
 800095c:	2bc8      	cmp	r3, #200	@ 0xc8
 800095e:	f67f ae5f 	bls.w	8000620 <main+0x118>
	    	  powerDown = 1; // power down if the red led is flashing and gets pressed a second time
 8000962:	4b1c      	ldr	r3, [pc, #112]	@ (80009d4 <main+0x4cc>)
 8000964:	2201      	movs	r2, #1
 8000966:	701a      	strb	r2, [r3, #0]
  {
 8000968:	e65a      	b.n	8000620 <main+0x118>
 800096a:	bf00      	nop
 800096c:	200005d4 	.word	0x200005d4
 8000970:	20000616 	.word	0x20000616
 8000974:	20000615 	.word	0x20000615
 8000978:	20000614 	.word	0x20000614
 800097c:	20000617 	.word	0x20000617
 8000980:	2000000e 	.word	0x2000000e
 8000984:	200001b0 	.word	0x200001b0
 8000988:	200001fc 	.word	0x200001fc
 800098c:	20000248 	.word	0x20000248
 8000990:	20000294 	.word	0x20000294
 8000994:	200002e0 	.word	0x200002e0
 8000998:	20000410 	.word	0x20000410
 800099c:	2000045c 	.word	0x2000045c
 80009a0:	200004a8 	.word	0x200004a8
 80009a4:	20000378 	.word	0x20000378
 80009a8:	48000800 	.word	0x48000800
 80009ac:	20000619 	.word	0x20000619
 80009b0:	2000061d 	.word	0x2000061d
 80009b4:	20000618 	.word	0x20000618
 80009b8:	2000000f 	.word	0x2000000f
 80009bc:	2000032c 	.word	0x2000032c
 80009c0:	2000061c 	.word	0x2000061c
 80009c4:	0800bc48 	.word	0x0800bc48
 80009c8:	0800bc50 	.word	0x0800bc50
 80009cc:	2000061e 	.word	0x2000061e
 80009d0:	2000061a 	.word	0x2000061a
 80009d4:	2000061b 	.word	0x2000061b

080009d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b094      	sub	sp, #80	@ 0x50
 80009dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009de:	f107 0318 	add.w	r3, r7, #24
 80009e2:	2238      	movs	r2, #56	@ 0x38
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f00b f8e8 	bl	800bbbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
 80009f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009fa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80009fe:	f003 fc2f 	bl	8004260 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a02:	2301      	movs	r3, #1
 8000a04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a10:	2303      	movs	r3, #3
 8000a12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000a14:	2301      	movs	r3, #1
 8000a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000a18:	230c      	movs	r3, #12
 8000a1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000a20:	2304      	movs	r3, #4
 8000a22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV8;
 8000a24:	2308      	movs	r3, #8
 8000a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a28:	f107 0318 	add.w	r3, r7, #24
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f003 fccb 	bl	80043c8 <HAL_RCC_OscConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000a38:	f000 ff0c 	bl	8001854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a40:	2303      	movs	r3, #3
 8000a42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f003 ffc9 	bl	80049ec <HAL_RCC_ClockConfig>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a60:	f000 fef8 	bl	8001854 <Error_Handler>
  }
}
 8000a64:	bf00      	nop
 8000a66:	3750      	adds	r7, #80	@ 0x50
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b098      	sub	sp, #96	@ 0x60
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a72:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a7e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a82:	2200      	movs	r2, #0
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	605a      	str	r2, [r3, #4]
 8000a88:	609a      	str	r2, [r3, #8]
 8000a8a:	60da      	str	r2, [r3, #12]
 8000a8c:	611a      	str	r2, [r3, #16]
 8000a8e:	615a      	str	r2, [r3, #20]
 8000a90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	2234      	movs	r2, #52	@ 0x34
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f00b f88f 	bl	800bbbc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a9e:	4b3b      	ldr	r3, [pc, #236]	@ (8000b8c <MX_TIM1_Init+0x120>)
 8000aa0:	4a3b      	ldr	r2, [pc, #236]	@ (8000b90 <MX_TIM1_Init+0x124>)
 8000aa2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000aa4:	4b39      	ldr	r3, [pc, #228]	@ (8000b8c <MX_TIM1_Init+0x120>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aaa:	4b38      	ldr	r3, [pc, #224]	@ (8000b8c <MX_TIM1_Init+0x120>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ab0:	4b36      	ldr	r3, [pc, #216]	@ (8000b8c <MX_TIM1_Init+0x120>)
 8000ab2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ab6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab8:	4b34      	ldr	r3, [pc, #208]	@ (8000b8c <MX_TIM1_Init+0x120>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000abe:	4b33      	ldr	r3, [pc, #204]	@ (8000b8c <MX_TIM1_Init+0x120>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ac4:	4b31      	ldr	r3, [pc, #196]	@ (8000b8c <MX_TIM1_Init+0x120>)
 8000ac6:	2280      	movs	r2, #128	@ 0x80
 8000ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000aca:	4830      	ldr	r0, [pc, #192]	@ (8000b8c <MX_TIM1_Init+0x120>)
 8000acc:	f004 fcf3 	bl	80054b6 <HAL_TIM_PWM_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000ad6:	f000 febd 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ada:	2300      	movs	r3, #0
 8000adc:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ae6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000aea:	4619      	mov	r1, r3
 8000aec:	4827      	ldr	r0, [pc, #156]	@ (8000b8c <MX_TIM1_Init+0x120>)
 8000aee:	f005 fcdb 	bl	80064a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000af8:	f000 feac 	bl	8001854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000afc:	2360      	movs	r3, #96	@ 0x60
 8000afe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b04:	2300      	movs	r3, #0
 8000b06:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b10:	2300      	movs	r3, #0
 8000b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b14:	2300      	movs	r3, #0
 8000b16:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b18:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	4619      	mov	r1, r3
 8000b20:	481a      	ldr	r0, [pc, #104]	@ (8000b8c <MX_TIM1_Init+0x120>)
 8000b22:	f004 ff81 	bl	8005a28 <HAL_TIM_PWM_ConfigChannel>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b2c:	f000 fe92 	bl	8001854 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b48:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b60:	2300      	movs	r3, #0
 8000b62:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b68:	1d3b      	adds	r3, r7, #4
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4807      	ldr	r0, [pc, #28]	@ (8000b8c <MX_TIM1_Init+0x120>)
 8000b6e:	f005 fd31 	bl	80065d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000b78:	f000 fe6c 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b7c:	4803      	ldr	r0, [pc, #12]	@ (8000b8c <MX_TIM1_Init+0x120>)
 8000b7e:	f000 ffa7 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 8000b82:	bf00      	nop
 8000b84:	3760      	adds	r7, #96	@ 0x60
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200001b0 	.word	0x200001b0
 8000b90:	40012c00 	.word	0x40012c00

08000b94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	@ 0x28
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
 8000bb4:	615a      	str	r2, [r3, #20]
 8000bb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bb8:	4b22      	ldr	r3, [pc, #136]	@ (8000c44 <MX_TIM2_Init+0xb0>)
 8000bba:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bbe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bc0:	4b20      	ldr	r3, [pc, #128]	@ (8000c44 <MX_TIM2_Init+0xb0>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c44 <MX_TIM2_Init+0xb0>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c44 <MX_TIM2_Init+0xb0>)
 8000bce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bd4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c44 <MX_TIM2_Init+0xb0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bda:	4b1a      	ldr	r3, [pc, #104]	@ (8000c44 <MX_TIM2_Init+0xb0>)
 8000bdc:	2280      	movs	r2, #128	@ 0x80
 8000bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000be0:	4818      	ldr	r0, [pc, #96]	@ (8000c44 <MX_TIM2_Init+0xb0>)
 8000be2:	f004 fc68 	bl	80054b6 <HAL_TIM_PWM_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000bec:	f000 fe32 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4811      	ldr	r0, [pc, #68]	@ (8000c44 <MX_TIM2_Init+0xb0>)
 8000c00:	f005 fc52 	bl	80064a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000c0a:	f000 fe23 	bl	8001854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c0e:	2360      	movs	r3, #96	@ 0x60
 8000c10:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c1e:	463b      	mov	r3, r7
 8000c20:	2200      	movs	r2, #0
 8000c22:	4619      	mov	r1, r3
 8000c24:	4807      	ldr	r0, [pc, #28]	@ (8000c44 <MX_TIM2_Init+0xb0>)
 8000c26:	f004 feff 	bl	8005a28 <HAL_TIM_PWM_ConfigChannel>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000c30:	f000 fe10 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c34:	4803      	ldr	r0, [pc, #12]	@ (8000c44 <MX_TIM2_Init+0xb0>)
 8000c36:	f000 ff4b 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 8000c3a:	bf00      	nop
 8000c3c:	3728      	adds	r7, #40	@ 0x28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200001fc 	.word	0x200001fc

08000c48 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	@ 0x28
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
 8000c68:	615a      	str	r2, [r3, #20]
 8000c6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c6c:	4b21      	ldr	r3, [pc, #132]	@ (8000cf4 <MX_TIM3_Init+0xac>)
 8000c6e:	4a22      	ldr	r2, [pc, #136]	@ (8000cf8 <MX_TIM3_Init+0xb0>)
 8000c70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c72:	4b20      	ldr	r3, [pc, #128]	@ (8000cf4 <MX_TIM3_Init+0xac>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c78:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf4 <MX_TIM3_Init+0xac>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf4 <MX_TIM3_Init+0xac>)
 8000c80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c86:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf4 <MX_TIM3_Init+0xac>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c8c:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <MX_TIM3_Init+0xac>)
 8000c8e:	2280      	movs	r2, #128	@ 0x80
 8000c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c92:	4818      	ldr	r0, [pc, #96]	@ (8000cf4 <MX_TIM3_Init+0xac>)
 8000c94:	f004 fc0f 	bl	80054b6 <HAL_TIM_PWM_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000c9e:	f000 fdd9 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4810      	ldr	r0, [pc, #64]	@ (8000cf4 <MX_TIM3_Init+0xac>)
 8000cb2:	f005 fbf9 	bl	80064a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000cbc:	f000 fdca 	bl	8001854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc0:	2360      	movs	r3, #96	@ 0x60
 8000cc2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4807      	ldr	r0, [pc, #28]	@ (8000cf4 <MX_TIM3_Init+0xac>)
 8000cd8:	f004 fea6 	bl	8005a28 <HAL_TIM_PWM_ConfigChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000ce2:	f000 fdb7 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ce6:	4803      	ldr	r0, [pc, #12]	@ (8000cf4 <MX_TIM3_Init+0xac>)
 8000ce8:	f000 fef2 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 8000cec:	bf00      	nop
 8000cee:	3728      	adds	r7, #40	@ 0x28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20000248 	.word	0x20000248
 8000cf8:	40000400 	.word	0x40000400

08000cfc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	@ 0x28
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d02:	f107 031c 	add.w	r3, r7, #28
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d0e:	463b      	mov	r3, r7
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
 8000d1c:	615a      	str	r2, [r3, #20]
 8000d1e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d20:	4b21      	ldr	r3, [pc, #132]	@ (8000da8 <MX_TIM4_Init+0xac>)
 8000d22:	4a22      	ldr	r2, [pc, #136]	@ (8000dac <MX_TIM4_Init+0xb0>)
 8000d24:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d26:	4b20      	ldr	r3, [pc, #128]	@ (8000da8 <MX_TIM4_Init+0xac>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000da8 <MX_TIM4_Init+0xac>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d32:	4b1d      	ldr	r3, [pc, #116]	@ (8000da8 <MX_TIM4_Init+0xac>)
 8000d34:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d38:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000da8 <MX_TIM4_Init+0xac>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d40:	4b19      	ldr	r3, [pc, #100]	@ (8000da8 <MX_TIM4_Init+0xac>)
 8000d42:	2280      	movs	r2, #128	@ 0x80
 8000d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d46:	4818      	ldr	r0, [pc, #96]	@ (8000da8 <MX_TIM4_Init+0xac>)
 8000d48:	f004 fbb5 	bl	80054b6 <HAL_TIM_PWM_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000d52:	f000 fd7f 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	4619      	mov	r1, r3
 8000d64:	4810      	ldr	r0, [pc, #64]	@ (8000da8 <MX_TIM4_Init+0xac>)
 8000d66:	f005 fb9f 	bl	80064a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000d70:	f000 fd70 	bl	8001854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d74:	2360      	movs	r3, #96	@ 0x60
 8000d76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4807      	ldr	r0, [pc, #28]	@ (8000da8 <MX_TIM4_Init+0xac>)
 8000d8c:	f004 fe4c 	bl	8005a28 <HAL_TIM_PWM_ConfigChannel>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000d96:	f000 fd5d 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000d9a:	4803      	ldr	r0, [pc, #12]	@ (8000da8 <MX_TIM4_Init+0xac>)
 8000d9c:	f000 fe98 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 8000da0:	bf00      	nop
 8000da2:	3728      	adds	r7, #40	@ 0x28
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000294 	.word	0x20000294
 8000dac:	40000800 	.word	0x40000800

08000db0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	@ 0x28
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]
 8000dc0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
 8000dd0:	615a      	str	r2, [r3, #20]
 8000dd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000dd4:	4b21      	ldr	r3, [pc, #132]	@ (8000e5c <MX_TIM5_Init+0xac>)
 8000dd6:	4a22      	ldr	r2, [pc, #136]	@ (8000e60 <MX_TIM5_Init+0xb0>)
 8000dd8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000dda:	4b20      	ldr	r3, [pc, #128]	@ (8000e5c <MX_TIM5_Init+0xac>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e5c <MX_TIM5_Init+0xac>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8000de6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e5c <MX_TIM5_Init+0xac>)
 8000de8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000dec:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dee:	4b1b      	ldr	r3, [pc, #108]	@ (8000e5c <MX_TIM5_Init+0xac>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000df4:	4b19      	ldr	r3, [pc, #100]	@ (8000e5c <MX_TIM5_Init+0xac>)
 8000df6:	2280      	movs	r2, #128	@ 0x80
 8000df8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000dfa:	4818      	ldr	r0, [pc, #96]	@ (8000e5c <MX_TIM5_Init+0xac>)
 8000dfc:	f004 fb5b 	bl	80054b6 <HAL_TIM_PWM_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8000e06:	f000 fd25 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4619      	mov	r1, r3
 8000e18:	4810      	ldr	r0, [pc, #64]	@ (8000e5c <MX_TIM5_Init+0xac>)
 8000e1a:	f005 fb45 	bl	80064a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8000e24:	f000 fd16 	bl	8001854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e28:	2360      	movs	r3, #96	@ 0x60
 8000e2a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e38:	463b      	mov	r3, r7
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4807      	ldr	r0, [pc, #28]	@ (8000e5c <MX_TIM5_Init+0xac>)
 8000e40:	f004 fdf2 	bl	8005a28 <HAL_TIM_PWM_ConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8000e4a:	f000 fd03 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000e4e:	4803      	ldr	r0, [pc, #12]	@ (8000e5c <MX_TIM5_Init+0xac>)
 8000e50:	f000 fe3e 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 8000e54:	bf00      	nop
 8000e56:	3728      	adds	r7, #40	@ 0x28
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	200002e0 	.word	0x200002e0
 8000e60:	40000c00 	.word	0x40000c00

08000e64 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e74:	4b19      	ldr	r3, [pc, #100]	@ (8000edc <MX_TIM6_Init+0x78>)
 8000e76:	4a1a      	ldr	r2, [pc, #104]	@ (8000ee0 <MX_TIM6_Init+0x7c>)
 8000e78:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 900;
 8000e7a:	4b18      	ldr	r3, [pc, #96]	@ (8000edc <MX_TIM6_Init+0x78>)
 8000e7c:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8000e80:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e82:	4b16      	ldr	r3, [pc, #88]	@ (8000edc <MX_TIM6_Init+0x78>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000e88:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <MX_TIM6_Init+0x78>)
 8000e8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e8e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <MX_TIM6_Init+0x78>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e96:	4811      	ldr	r0, [pc, #68]	@ (8000edc <MX_TIM6_Init+0x78>)
 8000e98:	f004 fa0e 	bl	80052b8 <HAL_TIM_Base_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000ea2:	f000 fcd7 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480a      	ldr	r0, [pc, #40]	@ (8000edc <MX_TIM6_Init+0x78>)
 8000eb4:	f005 faf8 	bl	80064a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000ebe:	f000 fcc9 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  // Enable the TIM6 interrupt

  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2036      	movs	r0, #54	@ 0x36
 8000ec8:	f001 fa07 	bl	80022da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ecc:	2036      	movs	r0, #54	@ 0x36
 8000ece:	f001 fa1e 	bl	800230e <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM6_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000032c 	.word	0x2000032c
 8000ee0:	40001000 	.word	0x40001000

08000ee4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000ef4:	4b15      	ldr	r3, [pc, #84]	@ (8000f4c <MX_TIM7_Init+0x68>)
 8000ef6:	4a16      	ldr	r2, [pc, #88]	@ (8000f50 <MX_TIM7_Init+0x6c>)
 8000ef8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 850;
 8000efa:	4b14      	ldr	r3, [pc, #80]	@ (8000f4c <MX_TIM7_Init+0x68>)
 8000efc:	f240 3252 	movw	r2, #850	@ 0x352
 8000f00:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f02:	4b12      	ldr	r3, [pc, #72]	@ (8000f4c <MX_TIM7_Init+0x68>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000f08:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <MX_TIM7_Init+0x68>)
 8000f0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f0e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f10:	4b0e      	ldr	r3, [pc, #56]	@ (8000f4c <MX_TIM7_Init+0x68>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000f16:	480d      	ldr	r0, [pc, #52]	@ (8000f4c <MX_TIM7_Init+0x68>)
 8000f18:	f004 f9ce 	bl	80052b8 <HAL_TIM_Base_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000f22:	f000 fc97 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	4806      	ldr	r0, [pc, #24]	@ (8000f4c <MX_TIM7_Init+0x68>)
 8000f34:	f005 fab8 	bl	80064a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8000f3e:	f000 fc89 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000378 	.word	0x20000378
 8000f50:	40001400 	.word	0x40001400

08000f54 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b098      	sub	sp, #96	@ 0x60
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f66:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]
 8000f76:	615a      	str	r2, [r3, #20]
 8000f78:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f7a:	1d3b      	adds	r3, r7, #4
 8000f7c:	2234      	movs	r2, #52	@ 0x34
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f00a fe1b 	bl	800bbbc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f86:	4b3b      	ldr	r3, [pc, #236]	@ (8001074 <MX_TIM8_Init+0x120>)
 8000f88:	4a3b      	ldr	r2, [pc, #236]	@ (8001078 <MX_TIM8_Init+0x124>)
 8000f8a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000f8c:	4b39      	ldr	r3, [pc, #228]	@ (8001074 <MX_TIM8_Init+0x120>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f92:	4b38      	ldr	r3, [pc, #224]	@ (8001074 <MX_TIM8_Init+0x120>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000f98:	4b36      	ldr	r3, [pc, #216]	@ (8001074 <MX_TIM8_Init+0x120>)
 8000f9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f9e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa0:	4b34      	ldr	r3, [pc, #208]	@ (8001074 <MX_TIM8_Init+0x120>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000fa6:	4b33      	ldr	r3, [pc, #204]	@ (8001074 <MX_TIM8_Init+0x120>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fac:	4b31      	ldr	r3, [pc, #196]	@ (8001074 <MX_TIM8_Init+0x120>)
 8000fae:	2280      	movs	r2, #128	@ 0x80
 8000fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000fb2:	4830      	ldr	r0, [pc, #192]	@ (8001074 <MX_TIM8_Init+0x120>)
 8000fb4:	f004 fa7f 	bl	80054b6 <HAL_TIM_PWM_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000fbe:	f000 fc49 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000fce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4827      	ldr	r0, [pc, #156]	@ (8001074 <MX_TIM8_Init+0x120>)
 8000fd6:	f005 fa67 	bl	80064a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000fe0:	f000 fc38 	bl	8001854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe4:	2360      	movs	r3, #96	@ 0x60
 8000fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fec:	2300      	movs	r3, #0
 8000fee:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001000:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001004:	2200      	movs	r2, #0
 8001006:	4619      	mov	r1, r3
 8001008:	481a      	ldr	r0, [pc, #104]	@ (8001074 <MX_TIM8_Init+0x120>)
 800100a:	f004 fd0d 	bl	8005a28 <HAL_TIM_PWM_ConfigChannel>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001014:	f000 fc1e 	bl	8001854 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800102c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001030:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800103e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001042:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001048:	2300      	movs	r3, #0
 800104a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	4619      	mov	r1, r3
 8001054:	4807      	ldr	r0, [pc, #28]	@ (8001074 <MX_TIM8_Init+0x120>)
 8001056:	f005 fabd 	bl	80065d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001060:	f000 fbf8 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001064:	4803      	ldr	r0, [pc, #12]	@ (8001074 <MX_TIM8_Init+0x120>)
 8001066:	f000 fd33 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 800106a:	bf00      	nop
 800106c:	3760      	adds	r7, #96	@ 0x60
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200003c4 	.word	0x200003c4
 8001078:	40013400 	.word	0x40013400

0800107c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b098      	sub	sp, #96	@ 0x60
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001082:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]
 800109e:	615a      	str	r2, [r3, #20]
 80010a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2234      	movs	r2, #52	@ 0x34
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f00a fd87 	bl	800bbbc <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80010ae:	4b34      	ldr	r3, [pc, #208]	@ (8001180 <MX_TIM15_Init+0x104>)
 80010b0:	4a34      	ldr	r2, [pc, #208]	@ (8001184 <MX_TIM15_Init+0x108>)
 80010b2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 80010b4:	4b32      	ldr	r3, [pc, #200]	@ (8001180 <MX_TIM15_Init+0x104>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ba:	4b31      	ldr	r3, [pc, #196]	@ (8001180 <MX_TIM15_Init+0x104>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80010c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001180 <MX_TIM15_Init+0x104>)
 80010c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80010c6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001180 <MX_TIM15_Init+0x104>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80010ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001180 <MX_TIM15_Init+0x104>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001180 <MX_TIM15_Init+0x104>)
 80010d6:	2280      	movs	r2, #128	@ 0x80
 80010d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80010da:	4829      	ldr	r0, [pc, #164]	@ (8001180 <MX_TIM15_Init+0x104>)
 80010dc:	f004 f9eb 	bl	80054b6 <HAL_TIM_PWM_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80010e6:	f000 fbb5 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ea:	2300      	movs	r3, #0
 80010ec:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80010f2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010f6:	4619      	mov	r1, r3
 80010f8:	4821      	ldr	r0, [pc, #132]	@ (8001180 <MX_TIM15_Init+0x104>)
 80010fa:	f005 f9d5 	bl	80064a8 <HAL_TIMEx_MasterConfigSynchronization>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8001104:	f000 fba6 	bl	8001854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001108:	2360      	movs	r3, #96	@ 0x60
 800110a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001110:	2300      	movs	r3, #0
 8001112:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001114:	2300      	movs	r3, #0
 8001116:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800111c:	2300      	movs	r3, #0
 800111e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001120:	2300      	movs	r3, #0
 8001122:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001124:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001128:	2200      	movs	r2, #0
 800112a:	4619      	mov	r1, r3
 800112c:	4814      	ldr	r0, [pc, #80]	@ (8001180 <MX_TIM15_Init+0x104>)
 800112e:	f004 fc7b 	bl	8005a28 <HAL_TIM_PWM_ConfigChannel>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001138:	f000 fb8c 	bl	8001854 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001150:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001154:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	4619      	mov	r1, r3
 8001162:	4807      	ldr	r0, [pc, #28]	@ (8001180 <MX_TIM15_Init+0x104>)
 8001164:	f005 fa36 	bl	80065d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 800116e:	f000 fb71 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001172:	4803      	ldr	r0, [pc, #12]	@ (8001180 <MX_TIM15_Init+0x104>)
 8001174:	f000 fcac 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 8001178:	bf00      	nop
 800117a:	3760      	adds	r7, #96	@ 0x60
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000410 	.word	0x20000410
 8001184:	40014000 	.word	0x40014000

08001188 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b094      	sub	sp, #80	@ 0x50
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800118e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]
 800119e:	615a      	str	r2, [r3, #20]
 80011a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011a2:	463b      	mov	r3, r7
 80011a4:	2234      	movs	r2, #52	@ 0x34
 80011a6:	2100      	movs	r1, #0
 80011a8:	4618      	mov	r0, r3
 80011aa:	f00a fd07 	bl	800bbbc <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80011ae:	4b31      	ldr	r3, [pc, #196]	@ (8001274 <MX_TIM16_Init+0xec>)
 80011b0:	4a31      	ldr	r2, [pc, #196]	@ (8001278 <MX_TIM16_Init+0xf0>)
 80011b2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80011b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001274 <MX_TIM16_Init+0xec>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ba:	4b2e      	ldr	r3, [pc, #184]	@ (8001274 <MX_TIM16_Init+0xec>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80011c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001274 <MX_TIM16_Init+0xec>)
 80011c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011c6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001274 <MX_TIM16_Init+0xec>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80011ce:	4b29      	ldr	r3, [pc, #164]	@ (8001274 <MX_TIM16_Init+0xec>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011d4:	4b27      	ldr	r3, [pc, #156]	@ (8001274 <MX_TIM16_Init+0xec>)
 80011d6:	2280      	movs	r2, #128	@ 0x80
 80011d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80011da:	4826      	ldr	r0, [pc, #152]	@ (8001274 <MX_TIM16_Init+0xec>)
 80011dc:	f004 f86c 	bl	80052b8 <HAL_TIM_Base_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80011e6:	f000 fb35 	bl	8001854 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80011ea:	4822      	ldr	r0, [pc, #136]	@ (8001274 <MX_TIM16_Init+0xec>)
 80011ec:	f004 f963 	bl	80054b6 <HAL_TIM_PWM_Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80011f6:	f000 fb2d 	bl	8001854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011fa:	2360      	movs	r3, #96	@ 0x60
 80011fc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001202:	2300      	movs	r3, #0
 8001204:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001206:	2300      	movs	r3, #0
 8001208:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800120e:	2300      	movs	r3, #0
 8001210:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001216:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800121a:	2200      	movs	r2, #0
 800121c:	4619      	mov	r1, r3
 800121e:	4815      	ldr	r0, [pc, #84]	@ (8001274 <MX_TIM16_Init+0xec>)
 8001220:	f004 fc02 	bl	8005a28 <HAL_TIM_PWM_ConfigChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800122a:	f000 fb13 	bl	8001854 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001236:	2300      	movs	r3, #0
 8001238:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001242:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001246:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	4619      	mov	r1, r3
 8001254:	4807      	ldr	r0, [pc, #28]	@ (8001274 <MX_TIM16_Init+0xec>)
 8001256:	f005 f9bd 	bl	80065d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001260:	f000 faf8 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001264:	4803      	ldr	r0, [pc, #12]	@ (8001274 <MX_TIM16_Init+0xec>)
 8001266:	f000 fc33 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 800126a:	bf00      	nop
 800126c:	3750      	adds	r7, #80	@ 0x50
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000045c 	.word	0x2000045c
 8001278:	40014400 	.word	0x40014400

0800127c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b094      	sub	sp, #80	@ 0x50
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001282:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]
 8001292:	615a      	str	r2, [r3, #20]
 8001294:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001296:	463b      	mov	r3, r7
 8001298:	2234      	movs	r2, #52	@ 0x34
 800129a:	2100      	movs	r1, #0
 800129c:	4618      	mov	r0, r3
 800129e:	f00a fc8d 	bl	800bbbc <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80012a2:	4b31      	ldr	r3, [pc, #196]	@ (8001368 <MX_TIM17_Init+0xec>)
 80012a4:	4a31      	ldr	r2, [pc, #196]	@ (800136c <MX_TIM17_Init+0xf0>)
 80012a6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 80012a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001368 <MX_TIM17_Init+0xec>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001368 <MX_TIM17_Init+0xec>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 80012b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001368 <MX_TIM17_Init+0xec>)
 80012b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012ba:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012bc:	4b2a      	ldr	r3, [pc, #168]	@ (8001368 <MX_TIM17_Init+0xec>)
 80012be:	2200      	movs	r2, #0
 80012c0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80012c2:	4b29      	ldr	r3, [pc, #164]	@ (8001368 <MX_TIM17_Init+0xec>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012c8:	4b27      	ldr	r3, [pc, #156]	@ (8001368 <MX_TIM17_Init+0xec>)
 80012ca:	2280      	movs	r2, #128	@ 0x80
 80012cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80012ce:	4826      	ldr	r0, [pc, #152]	@ (8001368 <MX_TIM17_Init+0xec>)
 80012d0:	f003 fff2 	bl	80052b8 <HAL_TIM_Base_Init>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80012da:	f000 fabb 	bl	8001854 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80012de:	4822      	ldr	r0, [pc, #136]	@ (8001368 <MX_TIM17_Init+0xec>)
 80012e0:	f004 f8e9 	bl	80054b6 <HAL_TIM_PWM_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80012ea:	f000 fab3 	bl	8001854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ee:	2360      	movs	r3, #96	@ 0x60
 80012f0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012f6:	2300      	movs	r3, #0
 80012f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012fa:	2300      	movs	r3, #0
 80012fc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012fe:	2300      	movs	r3, #0
 8001300:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800130a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800130e:	2200      	movs	r2, #0
 8001310:	4619      	mov	r1, r3
 8001312:	4815      	ldr	r0, [pc, #84]	@ (8001368 <MX_TIM17_Init+0xec>)
 8001314:	f004 fb88 	bl	8005a28 <HAL_TIM_PWM_ConfigChannel>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800131e:	f000 fa99 	bl	8001854 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001336:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800133a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001344:	463b      	mov	r3, r7
 8001346:	4619      	mov	r1, r3
 8001348:	4807      	ldr	r0, [pc, #28]	@ (8001368 <MX_TIM17_Init+0xec>)
 800134a:	f005 f943 	bl	80065d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001354:	f000 fa7e 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001358:	4803      	ldr	r0, [pc, #12]	@ (8001368 <MX_TIM17_Init+0xec>)
 800135a:	f000 fbb9 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 800135e:	bf00      	nop
 8001360:	3750      	adds	r7, #80	@ 0x50
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200004a8 	.word	0x200004a8
 800136c:	40014800 	.word	0x40014800

08001370 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b098      	sub	sp, #96	@ 0x60
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001376:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001382:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]
 800138c:	609a      	str	r2, [r3, #8]
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	611a      	str	r2, [r3, #16]
 8001392:	615a      	str	r2, [r3, #20]
 8001394:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2234      	movs	r2, #52	@ 0x34
 800139a:	2100      	movs	r1, #0
 800139c:	4618      	mov	r0, r3
 800139e:	f00a fc0d 	bl	800bbbc <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 80013a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001490 <MX_TIM20_Init+0x120>)
 80013a4:	4a3b      	ldr	r2, [pc, #236]	@ (8001494 <MX_TIM20_Init+0x124>)
 80013a6:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 80013a8:	4b39      	ldr	r3, [pc, #228]	@ (8001490 <MX_TIM20_Init+0x120>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ae:	4b38      	ldr	r3, [pc, #224]	@ (8001490 <MX_TIM20_Init+0x120>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 80013b4:	4b36      	ldr	r3, [pc, #216]	@ (8001490 <MX_TIM20_Init+0x120>)
 80013b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013ba:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013bc:	4b34      	ldr	r3, [pc, #208]	@ (8001490 <MX_TIM20_Init+0x120>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 80013c2:	4b33      	ldr	r3, [pc, #204]	@ (8001490 <MX_TIM20_Init+0x120>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013c8:	4b31      	ldr	r3, [pc, #196]	@ (8001490 <MX_TIM20_Init+0x120>)
 80013ca:	2280      	movs	r2, #128	@ 0x80
 80013cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 80013ce:	4830      	ldr	r0, [pc, #192]	@ (8001490 <MX_TIM20_Init+0x120>)
 80013d0:	f004 f871 	bl	80054b6 <HAL_TIM_PWM_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM20_Init+0x6e>
  {
    Error_Handler();
 80013da:	f000 fa3b 	bl	8001854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013e2:	2300      	movs	r3, #0
 80013e4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e6:	2300      	movs	r3, #0
 80013e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 80013ea:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013ee:	4619      	mov	r1, r3
 80013f0:	4827      	ldr	r0, [pc, #156]	@ (8001490 <MX_TIM20_Init+0x120>)
 80013f2:	f005 f859 	bl	80064a8 <HAL_TIMEx_MasterConfigSynchronization>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM20_Init+0x90>
  {
    Error_Handler();
 80013fc:	f000 fa2a 	bl	8001854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001400:	2360      	movs	r3, #96	@ 0x60
 8001402:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001408:	2300      	movs	r3, #0
 800140a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800140c:	2300      	movs	r3, #0
 800140e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001410:	2300      	movs	r3, #0
 8001412:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001414:	2300      	movs	r3, #0
 8001416:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001418:	2300      	movs	r3, #0
 800141a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800141c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001420:	2200      	movs	r2, #0
 8001422:	4619      	mov	r1, r3
 8001424:	481a      	ldr	r0, [pc, #104]	@ (8001490 <MX_TIM20_Init+0x120>)
 8001426:	f004 faff 	bl	8005a28 <HAL_TIM_PWM_ConfigChannel>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM20_Init+0xc4>
  {
    Error_Handler();
 8001430:	f000 fa10 	bl	8001854 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001434:	2300      	movs	r3, #0
 8001436:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001448:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800144c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800145a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800145e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001464:	2300      	movs	r3, #0
 8001466:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	4619      	mov	r1, r3
 8001470:	4807      	ldr	r0, [pc, #28]	@ (8001490 <MX_TIM20_Init+0x120>)
 8001472:	f005 f8af 	bl	80065d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM20_Init+0x110>
  {
    Error_Handler();
 800147c:	f000 f9ea 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8001480:	4803      	ldr	r0, [pc, #12]	@ (8001490 <MX_TIM20_Init+0x120>)
 8001482:	f000 fb25 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 8001486:	bf00      	nop
 8001488:	3760      	adds	r7, #96	@ 0x60
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	200004f4 	.word	0x200004f4
 8001494:	40015000 	.word	0x40015000

08001498 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800149c:	4b22      	ldr	r3, [pc, #136]	@ (8001528 <MX_USART1_UART_Init+0x90>)
 800149e:	4a23      	ldr	r2, [pc, #140]	@ (800152c <MX_USART1_UART_Init+0x94>)
 80014a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014a2:	4b21      	ldr	r3, [pc, #132]	@ (8001528 <MX_USART1_UART_Init+0x90>)
 80014a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001528 <MX_USART1_UART_Init+0x90>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001528 <MX_USART1_UART_Init+0x90>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001528 <MX_USART1_UART_Init+0x90>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001528 <MX_USART1_UART_Init+0x90>)
 80014be:	220c      	movs	r2, #12
 80014c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c2:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <MX_USART1_UART_Init+0x90>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c8:	4b17      	ldr	r3, [pc, #92]	@ (8001528 <MX_USART1_UART_Init+0x90>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ce:	4b16      	ldr	r3, [pc, #88]	@ (8001528 <MX_USART1_UART_Init+0x90>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014d4:	4b14      	ldr	r3, [pc, #80]	@ (8001528 <MX_USART1_UART_Init+0x90>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014da:	4b13      	ldr	r3, [pc, #76]	@ (8001528 <MX_USART1_UART_Init+0x90>)
 80014dc:	2200      	movs	r2, #0
 80014de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014e0:	4811      	ldr	r0, [pc, #68]	@ (8001528 <MX_USART1_UART_Init+0x90>)
 80014e2:	f005 f951 	bl	8006788 <HAL_UART_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014ec:	f000 f9b2 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014f0:	2100      	movs	r1, #0
 80014f2:	480d      	ldr	r0, [pc, #52]	@ (8001528 <MX_USART1_UART_Init+0x90>)
 80014f4:	f006 faa9 	bl	8007a4a <HAL_UARTEx_SetTxFifoThreshold>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014fe:	f000 f9a9 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001502:	2100      	movs	r1, #0
 8001504:	4808      	ldr	r0, [pc, #32]	@ (8001528 <MX_USART1_UART_Init+0x90>)
 8001506:	f006 fade 	bl	8007ac6 <HAL_UARTEx_SetRxFifoThreshold>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001510:	f000 f9a0 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001514:	4804      	ldr	r0, [pc, #16]	@ (8001528 <MX_USART1_UART_Init+0x90>)
 8001516:	f006 fa5f 	bl	80079d8 <HAL_UARTEx_DisableFifoMode>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001520:	f000 f998 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	bd80      	pop	{r7, pc}
 8001528:	20000540 	.word	0x20000540
 800152c:	40013800 	.word	0x40013800

08001530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	@ 0x28
 8001534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	4b4d      	ldr	r3, [pc, #308]	@ (800167c <MX_GPIO_Init+0x14c>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800154a:	4a4c      	ldr	r2, [pc, #304]	@ (800167c <MX_GPIO_Init+0x14c>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001552:	4b4a      	ldr	r3, [pc, #296]	@ (800167c <MX_GPIO_Init+0x14c>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800155e:	4b47      	ldr	r3, [pc, #284]	@ (800167c <MX_GPIO_Init+0x14c>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001562:	4a46      	ldr	r2, [pc, #280]	@ (800167c <MX_GPIO_Init+0x14c>)
 8001564:	f043 0320 	orr.w	r3, r3, #32
 8001568:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800156a:	4b44      	ldr	r3, [pc, #272]	@ (800167c <MX_GPIO_Init+0x14c>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800156e:	f003 0320 	and.w	r3, r3, #32
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001576:	4b41      	ldr	r3, [pc, #260]	@ (800167c <MX_GPIO_Init+0x14c>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800157a:	4a40      	ldr	r2, [pc, #256]	@ (800167c <MX_GPIO_Init+0x14c>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001582:	4b3e      	ldr	r3, [pc, #248]	@ (800167c <MX_GPIO_Init+0x14c>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	4b3b      	ldr	r3, [pc, #236]	@ (800167c <MX_GPIO_Init+0x14c>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001592:	4a3a      	ldr	r2, [pc, #232]	@ (800167c <MX_GPIO_Init+0x14c>)
 8001594:	f043 0302 	orr.w	r3, r3, #2
 8001598:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159a:	4b38      	ldr	r3, [pc, #224]	@ (800167c <MX_GPIO_Init+0x14c>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin|POWER_OFF_Pin
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 4169 	mov.w	r1, #59648	@ 0xe900
 80015ac:	4834      	ldr	r0, [pc, #208]	@ (8001680 <MX_GPIO_Init+0x150>)
 80015ae:	f001 f923 	bl	80027f8 <HAL_GPIO_WritePin>
                          |INT_KILL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUZZER_Pin|D__PU_Pin, GPIO_PIN_RESET);
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80015b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015bc:	f001 f91c 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED_Pin|GREEN_Pin|BLUE_Pin, GPIO_PIN_RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80015c6:	482f      	ldr	r0, [pc, #188]	@ (8001684 <MX_GPIO_Init+0x154>)
 80015c8:	f001 f916 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_BLUE_Pin LED_GREEN_Pin LED_RED_Pin POWER_OFF_Pin
                           INT_KILL_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_GREEN_Pin|LED_RED_Pin|POWER_OFF_Pin
 80015cc:	f44f 4369 	mov.w	r3, #59648	@ 0xe900
 80015d0:	617b      	str	r3, [r7, #20]
                          |INT_KILL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d2:	2301      	movs	r3, #1
 80015d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015da:	2300      	movs	r3, #0
 80015dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	4826      	ldr	r0, [pc, #152]	@ (8001680 <MX_GPIO_Init+0x150>)
 80015e6:	f000 ff6d 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin D__PU_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|D__PU_Pin;
 80015ea:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 80015ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001606:	f000 ff5d 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_KILL_Pin */
  GPIO_InitStruct.Pin = EXT_KILL_Pin;
 800160a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800160e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001610:	2300      	movs	r3, #0
 8001612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001614:	2302      	movs	r3, #2
 8001616:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXT_KILL_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	4819      	ldr	r0, [pc, #100]	@ (8001684 <MX_GPIO_Init+0x154>)
 8001620:	f000 ff50 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_Pin GREEN_Pin BLUE_Pin */
  GPIO_InitStruct.Pin = RED_Pin|GREEN_Pin|BLUE_Pin;
 8001624:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162a:	2301      	movs	r3, #1
 800162c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	4811      	ldr	r0, [pc, #68]	@ (8001684 <MX_GPIO_Init+0x154>)
 800163e:	f000 ff41 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_IN_Pin */
  GPIO_InitStruct.Pin = BUTTON_IN_Pin;
 8001642:	2380      	movs	r3, #128	@ 0x80
 8001644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001646:	2300      	movs	r3, #0
 8001648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800164a:	2301      	movs	r3, #1
 800164c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_IN_GPIO_Port, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	480a      	ldr	r0, [pc, #40]	@ (8001680 <MX_GPIO_Init+0x150>)
 8001656:	f000 ff35 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_DETECT_Pin */
  GPIO_InitStruct.Pin = VBUS_DETECT_Pin;
 800165a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800165e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001660:	2300      	movs	r3, #0
 8001662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001664:	2302      	movs	r3, #2
 8001666:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VBUS_DETECT_GPIO_Port, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	4804      	ldr	r0, [pc, #16]	@ (8001680 <MX_GPIO_Init+0x150>)
 8001670:	f000 ff28 	bl	80024c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	@ 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40021000 	.word	0x40021000
 8001680:	48000800 	.word	0x48000800
 8001684:	48000400 	.word	0x48000400

08001688 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ // this interrupt gets called when a timer overflows
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM7){
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a44      	ldr	r2, [pc, #272]	@ (80017a8 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d106      	bne.n	80016a8 <HAL_TIM_PeriodElapsedCallback+0x20>
		okayToRunMotorsYet = 1;
 800169a:	4b44      	ldr	r3, [pc, #272]	@ (80017ac <HAL_TIM_PeriodElapsedCallback+0x124>)
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim7);
 80016a0:	4843      	ldr	r0, [pc, #268]	@ (80017b0 <HAL_TIM_PeriodElapsedCallback+0x128>)
 80016a2:	f003 fed9 	bl	8005458 <HAL_TIM_Base_Stop_IT>

    }
    }
	}

}
 80016a6:	e07b      	b.n	80017a0 <HAL_TIM_PeriodElapsedCallback+0x118>
	else if (htim->Instance == TIM6) { // check if the timer 6 was the one that overflowed
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a41      	ldr	r2, [pc, #260]	@ (80017b4 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d176      	bne.n	80017a0 <HAL_TIM_PeriodElapsedCallback+0x118>
if (lockColor == 0){ // if the button hasn't been pushed then go ahead and change to the next color
 80016b2:	4b41      	ldr	r3, [pc, #260]	@ (80017b8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d12f      	bne.n	800171a <HAL_TIM_PeriodElapsedCallback+0x92>
	HAL_GPIO_WritePin(GPIOB, RED_Pin|GREEN_Pin|BLUE_Pin, GPIO_PIN_RESET); // turn off the previous led
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 80016c0:	483e      	ldr	r0, [pc, #248]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x134>)
 80016c2:	f001 f899 	bl	80027f8 <HAL_GPIO_WritePin>
    if (color == 'R'){ // 'R' stands for red
 80016c6:	4b3e      	ldr	r3, [pc, #248]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b52      	cmp	r3, #82	@ 0x52
 80016cc:	d109      	bne.n	80016e2 <HAL_TIM_PeriodElapsedCallback+0x5a>
    	  HAL_GPIO_WritePin(GPIOB, RED_Pin, GPIO_PIN_SET); // turn on red led
 80016ce:	2201      	movs	r2, #1
 80016d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016d4:	4839      	ldr	r0, [pc, #228]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x134>)
 80016d6:	f001 f88f 	bl	80027f8 <HAL_GPIO_WritePin>
    	  color = 'G'; // next color is green
 80016da:	4b39      	ldr	r3, [pc, #228]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80016dc:	2247      	movs	r2, #71	@ 0x47
 80016de:	701a      	strb	r2, [r3, #0]
}
 80016e0:	e05e      	b.n	80017a0 <HAL_TIM_PeriodElapsedCallback+0x118>
    else if (color == 'G'){ // 'G' stands for green
 80016e2:	4b37      	ldr	r3, [pc, #220]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b47      	cmp	r3, #71	@ 0x47
 80016e8:	d109      	bne.n	80016fe <HAL_TIM_PeriodElapsedCallback+0x76>
    	  HAL_GPIO_WritePin(GPIOB, GREEN_Pin, GPIO_PIN_SET); // turn on green led
 80016ea:	2201      	movs	r2, #1
 80016ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016f0:	4832      	ldr	r0, [pc, #200]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x134>)
 80016f2:	f001 f881 	bl	80027f8 <HAL_GPIO_WritePin>
    	  color = 'B'; // next color is blue
 80016f6:	4b32      	ldr	r3, [pc, #200]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80016f8:	2242      	movs	r2, #66	@ 0x42
 80016fa:	701a      	strb	r2, [r3, #0]
}
 80016fc:	e050      	b.n	80017a0 <HAL_TIM_PeriodElapsedCallback+0x118>
    else if (color == 'B'){ // 'B' stands for blue
 80016fe:	4b30      	ldr	r3, [pc, #192]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b42      	cmp	r3, #66	@ 0x42
 8001704:	d14c      	bne.n	80017a0 <HAL_TIM_PeriodElapsedCallback+0x118>
    	  HAL_GPIO_WritePin(GPIOB, BLUE_Pin, GPIO_PIN_SET); // turn on blue led
 8001706:	2201      	movs	r2, #1
 8001708:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800170c:	482b      	ldr	r0, [pc, #172]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x134>)
 800170e:	f001 f873 	bl	80027f8 <HAL_GPIO_WritePin>
    	  color = 'R'; // next color is blue
 8001712:	4b2b      	ldr	r3, [pc, #172]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001714:	2252      	movs	r2, #82	@ 0x52
 8001716:	701a      	strb	r2, [r3, #0]
}
 8001718:	e042      	b.n	80017a0 <HAL_TIM_PeriodElapsedCallback+0x118>
    lockColor ++;
 800171a:	4b27      	ldr	r3, [pc, #156]	@ (80017b8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	3301      	adds	r3, #1
 8001720:	b2da      	uxtb	r2, r3
 8001722:	4b25      	ldr	r3, [pc, #148]	@ (80017b8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001724:	701a      	strb	r2, [r3, #0]
    if (color == 'G'){
 8001726:	4b26      	ldr	r3, [pc, #152]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b47      	cmp	r3, #71	@ 0x47
 800172c:	d105      	bne.n	800173a <HAL_TIM_PeriodElapsedCallback+0xb2>
    HAL_GPIO_TogglePin(GPIOB,  RED_Pin);
 800172e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001732:	4822      	ldr	r0, [pc, #136]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001734:	f001 f878 	bl	8002828 <HAL_GPIO_TogglePin>
 8001738:	e012      	b.n	8001760 <HAL_TIM_PeriodElapsedCallback+0xd8>
    else if (color == 'B'){
 800173a:	4b21      	ldr	r3, [pc, #132]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b42      	cmp	r3, #66	@ 0x42
 8001740:	d105      	bne.n	800174e <HAL_TIM_PeriodElapsedCallback+0xc6>
    HAL_GPIO_TogglePin(GPIOB,  GREEN_Pin);
 8001742:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001746:	481d      	ldr	r0, [pc, #116]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001748:	f001 f86e 	bl	8002828 <HAL_GPIO_TogglePin>
 800174c:	e008      	b.n	8001760 <HAL_TIM_PeriodElapsedCallback+0xd8>
    else if (color == 'R'){
 800174e:	4b1c      	ldr	r3, [pc, #112]	@ (80017c0 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b52      	cmp	r3, #82	@ 0x52
 8001754:	d104      	bne.n	8001760 <HAL_TIM_PeriodElapsedCallback+0xd8>
    HAL_GPIO_TogglePin(GPIOB,  BLUE_Pin);
 8001756:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800175a:	4818      	ldr	r0, [pc, #96]	@ (80017bc <HAL_TIM_PeriodElapsedCallback+0x134>)
 800175c:	f001 f864 	bl	8002828 <HAL_GPIO_TogglePin>
    if (lockColor == 20){ // toggle whatever led was pressed this many times
 8001760:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b14      	cmp	r3, #20
 8001766:	d11b      	bne.n	80017a0 <HAL_TIM_PeriodElapsedCallback+0x118>
    	lockColor = 0; // reset lock color so that we can change to the next color
 8001768:	4b13      	ldr	r3, [pc, #76]	@ (80017b8 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800176a:	2200      	movs	r2, #0
 800176c:	701a      	strb	r2, [r3, #0]
    	checkRedMode = 0; // exit checkRedMode
 800176e:	4b15      	ldr	r3, [pc, #84]	@ (80017c4 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
    	buttonPushedAlready = 0; // reset this so that we can accept a new button input
 8001774:	4b14      	ldr	r3, [pc, #80]	@ (80017c8 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
    	buttonReleased = 0;
 800177a:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <HAL_TIM_PeriodElapsedCallback+0x144>)
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
    	__HAL_TIM_SET_AUTORELOAD(&htim6, 65535); // set the timer period to something slower
 8001780:	4b13      	ldr	r3, [pc, #76]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001788:	62da      	str	r2, [r3, #44]	@ 0x2c
 800178a:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800178c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001790:	60da      	str	r2, [r3, #12]
    	__HAL_TIM_SET_COUNTER(&htim6, __HAL_TIM_GET_AUTORELOAD(&htim6) - 1); // force the timer to overflow so we don't have to wait for the previous led blink to finish
 8001792:	4b0f      	ldr	r3, [pc, #60]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001798:	4b0d      	ldr	r3, [pc, #52]	@ (80017d0 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3a01      	subs	r2, #1
 800179e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40001400 	.word	0x40001400
 80017ac:	2000000e 	.word	0x2000000e
 80017b0:	20000378 	.word	0x20000378
 80017b4:	40001000 	.word	0x40001000
 80017b8:	20000618 	.word	0x20000618
 80017bc:	48000400 	.word	0x48000400
 80017c0:	2000000f 	.word	0x2000000f
 80017c4:	2000061c 	.word	0x2000061c
 80017c8:	20000619 	.word	0x20000619
 80017cc:	2000061a 	.word	0x2000061a
 80017d0:	2000032c 	.word	0x2000032c

080017d4 <Set_TIM_Compare>:


void Set_TIM_Compare(TIM_HandleTypeDef *htim, int32_t receivedVal)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
#define maxVal 8500
    if ((receivedVal == 0) || (intKillState == 1) || (extKillState == 1) || (receivedVal > maxVal) || (receivedVal < -maxVal))
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d010      	beq.n	8001806 <Set_TIM_Compare+0x32>
 80017e4:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <Set_TIM_Compare+0x74>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d00c      	beq.n	8001806 <Set_TIM_Compare+0x32>
 80017ec:	4b17      	ldr	r3, [pc, #92]	@ (800184c <Set_TIM_Compare+0x78>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d008      	beq.n	8001806 <Set_TIM_Compare+0x32>
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	f242 1234 	movw	r2, #8500	@ 0x2134
 80017fa:	4293      	cmp	r3, r2
 80017fc:	dc03      	bgt.n	8001806 <Set_TIM_Compare+0x32>
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	4a13      	ldr	r2, [pc, #76]	@ (8001850 <Set_TIM_Compare+0x7c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	da05      	bge.n	8001812 <Set_TIM_Compare+0x3e>
    {
        __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, 35999);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 800180e:	635a      	str	r2, [r3, #52]	@ 0x34
    else if (receivedVal < 0)
    {
        __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, 35999 - 750 + receivedVal);
    }

}
 8001810:	e014      	b.n	800183c <Set_TIM_Compare+0x68>
    else if (receivedVal > 0)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	dd07      	ble.n	8001828 <Set_TIM_Compare+0x54>
        __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, 35999 + 750 + receivedVal);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	f503 430f 	add.w	r3, r3, #36608	@ 0x8f00
 800181e:	338d      	adds	r3, #141	@ 0x8d
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	6353      	str	r3, [r2, #52]	@ 0x34
}
 8001826:	e009      	b.n	800183c <Set_TIM_Compare+0x68>
    else if (receivedVal < 0)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	da06      	bge.n	800183c <Set_TIM_Compare+0x68>
        __HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, 35999 - 750 + receivedVal);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	f503 4309 	add.w	r3, r3, #35072	@ 0x8900
 8001834:	33b1      	adds	r3, #177	@ 0xb1
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6812      	ldr	r2, [r2, #0]
 800183a:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	20000614 	.word	0x20000614
 800184c:	20000615 	.word	0x20000615
 8001850:	ffffdecc 	.word	0xffffdecc

08001854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001858:	b672      	cpsid	i
}
 800185a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <Error_Handler+0x8>

08001860 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	4b0f      	ldr	r3, [pc, #60]	@ (80018a4 <HAL_MspInit+0x44>)
 8001868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800186a:	4a0e      	ldr	r2, [pc, #56]	@ (80018a4 <HAL_MspInit+0x44>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6613      	str	r3, [r2, #96]	@ 0x60
 8001872:	4b0c      	ldr	r3, [pc, #48]	@ (80018a4 <HAL_MspInit+0x44>)
 8001874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	4b09      	ldr	r3, [pc, #36]	@ (80018a4 <HAL_MspInit+0x44>)
 8001880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001882:	4a08      	ldr	r2, [pc, #32]	@ (80018a4 <HAL_MspInit+0x44>)
 8001884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001888:	6593      	str	r3, [r2, #88]	@ 0x58
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <HAL_MspInit+0x44>)
 800188c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800188e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001896:	f002 fd87 	bl	80043a8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40021000 	.word	0x40021000

080018a8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b08b      	sub	sp, #44	@ 0x2c
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a49      	ldr	r2, [pc, #292]	@ (80019dc <HAL_TIM_PWM_MspInit+0x134>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d10c      	bne.n	80018d4 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ba:	4b49      	ldr	r3, [pc, #292]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 80018bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018be:	4a48      	ldr	r2, [pc, #288]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 80018c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80018c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80018c6:	4b46      	ldr	r3, [pc, #280]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 80018c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80018d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 80018d2:	e07c      	b.n	80019ce <HAL_TIM_PWM_MspInit+0x126>
  else if(htim_pwm->Instance==TIM2)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018dc:	d10c      	bne.n	80018f8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018de:	4b40      	ldr	r3, [pc, #256]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 80018e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e2:	4a3f      	ldr	r2, [pc, #252]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80018ea:	4b3d      	ldr	r3, [pc, #244]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 80018ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	623b      	str	r3, [r7, #32]
 80018f4:	6a3b      	ldr	r3, [r7, #32]
}
 80018f6:	e06a      	b.n	80019ce <HAL_TIM_PWM_MspInit+0x126>
  else if(htim_pwm->Instance==TIM3)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a39      	ldr	r2, [pc, #228]	@ (80019e4 <HAL_TIM_PWM_MspInit+0x13c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d10c      	bne.n	800191c <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001902:	4b37      	ldr	r3, [pc, #220]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 8001904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001906:	4a36      	ldr	r2, [pc, #216]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	6593      	str	r3, [r2, #88]	@ 0x58
 800190e:	4b34      	ldr	r3, [pc, #208]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 8001910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	61fb      	str	r3, [r7, #28]
 8001918:	69fb      	ldr	r3, [r7, #28]
}
 800191a:	e058      	b.n	80019ce <HAL_TIM_PWM_MspInit+0x126>
  else if(htim_pwm->Instance==TIM4)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a31      	ldr	r2, [pc, #196]	@ (80019e8 <HAL_TIM_PWM_MspInit+0x140>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d10c      	bne.n	8001940 <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001926:	4b2e      	ldr	r3, [pc, #184]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 8001928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800192a:	4a2d      	ldr	r2, [pc, #180]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 800192c:	f043 0304 	orr.w	r3, r3, #4
 8001930:	6593      	str	r3, [r2, #88]	@ 0x58
 8001932:	4b2b      	ldr	r3, [pc, #172]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	61bb      	str	r3, [r7, #24]
 800193c:	69bb      	ldr	r3, [r7, #24]
}
 800193e:	e046      	b.n	80019ce <HAL_TIM_PWM_MspInit+0x126>
  else if(htim_pwm->Instance==TIM5)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a29      	ldr	r2, [pc, #164]	@ (80019ec <HAL_TIM_PWM_MspInit+0x144>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d10c      	bne.n	8001964 <HAL_TIM_PWM_MspInit+0xbc>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800194a:	4b25      	ldr	r3, [pc, #148]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194e:	4a24      	ldr	r2, [pc, #144]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 8001950:	f043 0308 	orr.w	r3, r3, #8
 8001954:	6593      	str	r3, [r2, #88]	@ 0x58
 8001956:	4b22      	ldr	r3, [pc, #136]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 8001958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195a:	f003 0308 	and.w	r3, r3, #8
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	697b      	ldr	r3, [r7, #20]
}
 8001962:	e034      	b.n	80019ce <HAL_TIM_PWM_MspInit+0x126>
  else if(htim_pwm->Instance==TIM8)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a21      	ldr	r2, [pc, #132]	@ (80019f0 <HAL_TIM_PWM_MspInit+0x148>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d10c      	bne.n	8001988 <HAL_TIM_PWM_MspInit+0xe0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800196e:	4b1c      	ldr	r3, [pc, #112]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 8001970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001972:	4a1b      	ldr	r2, [pc, #108]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 8001974:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001978:	6613      	str	r3, [r2, #96]	@ 0x60
 800197a:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 800197c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800197e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]
}
 8001986:	e022      	b.n	80019ce <HAL_TIM_PWM_MspInit+0x126>
  else if(htim_pwm->Instance==TIM15)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a19      	ldr	r2, [pc, #100]	@ (80019f4 <HAL_TIM_PWM_MspInit+0x14c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d10c      	bne.n	80019ac <HAL_TIM_PWM_MspInit+0x104>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001992:	4b13      	ldr	r3, [pc, #76]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 8001994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001996:	4a12      	ldr	r2, [pc, #72]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 8001998:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800199c:	6613      	str	r3, [r2, #96]	@ 0x60
 800199e:	4b10      	ldr	r3, [pc, #64]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 80019a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
}
 80019aa:	e010      	b.n	80019ce <HAL_TIM_PWM_MspInit+0x126>
  else if(htim_pwm->Instance==TIM20)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a11      	ldr	r2, [pc, #68]	@ (80019f8 <HAL_TIM_PWM_MspInit+0x150>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d10b      	bne.n	80019ce <HAL_TIM_PWM_MspInit+0x126>
    __HAL_RCC_TIM20_CLK_ENABLE();
 80019b6:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 80019b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ba:	4a09      	ldr	r2, [pc, #36]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 80019bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80019c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80019c2:	4b07      	ldr	r3, [pc, #28]	@ (80019e0 <HAL_TIM_PWM_MspInit+0x138>)
 80019c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
}
 80019ce:	bf00      	nop
 80019d0:	372c      	adds	r7, #44	@ 0x2c
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40012c00 	.word	0x40012c00
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40000400 	.word	0x40000400
 80019e8:	40000800 	.word	0x40000800
 80019ec:	40000c00 	.word	0x40000c00
 80019f0:	40013400 	.word	0x40013400
 80019f4:	40014000 	.word	0x40014000
 80019f8:	40015000 	.word	0x40015000

080019fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a2c      	ldr	r2, [pc, #176]	@ (8001abc <HAL_TIM_Base_MspInit+0xc0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d114      	bne.n	8001a38 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xc4>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a12:	4a2b      	ldr	r2, [pc, #172]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xc4>)
 8001a14:	f043 0310 	orr.w	r3, r3, #16
 8001a18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a1a:	4b29      	ldr	r3, [pc, #164]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xc4>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1e:	f003 0310 	and.w	r3, r3, #16
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2036      	movs	r0, #54	@ 0x36
 8001a2c:	f000 fc55 	bl	80022da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a30:	2036      	movs	r0, #54	@ 0x36
 8001a32:	f000 fc6c 	bl	800230e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001a36:	e03c      	b.n	8001ab2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a21      	ldr	r2, [pc, #132]	@ (8001ac4 <HAL_TIM_Base_MspInit+0xc8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d114      	bne.n	8001a6c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001a42:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xc4>)
 8001a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a46:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xc4>)
 8001a48:	f043 0320 	orr.w	r3, r3, #32
 8001a4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xc4>)
 8001a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a52:	f003 0320 	and.w	r3, r3, #32
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 1, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	2037      	movs	r0, #55	@ 0x37
 8001a60:	f000 fc3b 	bl	80022da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001a64:	2037      	movs	r0, #55	@ 0x37
 8001a66:	f000 fc52 	bl	800230e <HAL_NVIC_EnableIRQ>
}
 8001a6a:	e022      	b.n	8001ab2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a15      	ldr	r2, [pc, #84]	@ (8001ac8 <HAL_TIM_Base_MspInit+0xcc>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d10c      	bne.n	8001a90 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001a76:	4b12      	ldr	r3, [pc, #72]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xc4>)
 8001a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a7a:	4a11      	ldr	r2, [pc, #68]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xc4>)
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a80:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a82:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xc4>)
 8001a84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
}
 8001a8e:	e010      	b.n	8001ab2 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM17)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0d      	ldr	r2, [pc, #52]	@ (8001acc <HAL_TIM_Base_MspInit+0xd0>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d10b      	bne.n	8001ab2 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001a9a:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xc4>)
 8001a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a9e:	4a08      	ldr	r2, [pc, #32]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xc4>)
 8001aa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aa4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aa6:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_TIM_Base_MspInit+0xc4>)
 8001aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
}
 8001ab2:	bf00      	nop
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40001000 	.word	0x40001000
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40001400 	.word	0x40001400
 8001ac8:	40014400 	.word	0x40014400
 8001acc:	40014800 	.word	0x40014800

08001ad0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b092      	sub	sp, #72	@ 0x48
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a9a      	ldr	r2, [pc, #616]	@ (8001d58 <HAL_TIM_MspPostInit+0x288>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d11c      	bne.n	8001b2c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af2:	4b9a      	ldr	r3, [pc, #616]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af6:	4a99      	ldr	r2, [pc, #612]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001af8:	f043 0304 	orr.w	r3, r3, #4
 8001afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001afe:	4b97      	ldr	r3, [pc, #604]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b02:	f003 0304 	and.w	r3, r3, #4
 8001b06:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b22:	4619      	mov	r1, r3
 8001b24:	488e      	ldr	r0, [pc, #568]	@ (8001d60 <HAL_TIM_MspPostInit+0x290>)
 8001b26:	f000 fccd 	bl	80024c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8001b2a:	e14c      	b.n	8001dc6 <HAL_TIM_MspPostInit+0x2f6>
  else if(htim->Instance==TIM2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b34:	d11d      	bne.n	8001b72 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	4b89      	ldr	r3, [pc, #548]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b3a:	4a88      	ldr	r2, [pc, #544]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b42:	4b86      	ldr	r3, [pc, #536]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b46:	f003 0301 	and.w	r3, r3, #1
 8001b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b4e:	2320      	movs	r3, #32
 8001b50:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b62:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001b66:	4619      	mov	r1, r3
 8001b68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b6c:	f000 fcaa 	bl	80024c4 <HAL_GPIO_Init>
}
 8001b70:	e129      	b.n	8001dc6 <HAL_TIM_MspPostInit+0x2f6>
  else if(htim->Instance==TIM3)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a7b      	ldr	r2, [pc, #492]	@ (8001d64 <HAL_TIM_MspPostInit+0x294>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d11d      	bne.n	8001bb8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7c:	4b77      	ldr	r3, [pc, #476]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b80:	4a76      	ldr	r2, [pc, #472]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b88:	4b74      	ldr	r3, [pc, #464]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b94:	2340      	movs	r3, #64	@ 0x40
 8001b96:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001bac:	4619      	mov	r1, r3
 8001bae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bb2:	f000 fc87 	bl	80024c4 <HAL_GPIO_Init>
}
 8001bb6:	e106      	b.n	8001dc6 <HAL_TIM_MspPostInit+0x2f6>
  else if(htim->Instance==TIM4)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a6a      	ldr	r2, [pc, #424]	@ (8001d68 <HAL_TIM_MspPostInit+0x298>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d11c      	bne.n	8001bfc <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc2:	4b66      	ldr	r3, [pc, #408]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc6:	4a65      	ldr	r2, [pc, #404]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bce:	4b63      	ldr	r3, [pc, #396]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bda:	2340      	movs	r3, #64	@ 0x40
 8001bdc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2300      	movs	r3, #0
 8001be8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001bea:	2302      	movs	r3, #2
 8001bec:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bee:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	485d      	ldr	r0, [pc, #372]	@ (8001d6c <HAL_TIM_MspPostInit+0x29c>)
 8001bf6:	f000 fc65 	bl	80024c4 <HAL_GPIO_Init>
}
 8001bfa:	e0e4      	b.n	8001dc6 <HAL_TIM_MspPostInit+0x2f6>
  else if(htim->Instance==TIM5)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a5b      	ldr	r2, [pc, #364]	@ (8001d70 <HAL_TIM_MspPostInit+0x2a0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d11d      	bne.n	8001c42 <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c06:	4b55      	ldr	r3, [pc, #340]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0a:	4a54      	ldr	r2, [pc, #336]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c12:	4b52      	ldr	r3, [pc, #328]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	623b      	str	r3, [r7, #32]
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c32:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c36:	4619      	mov	r1, r3
 8001c38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c3c:	f000 fc42 	bl	80024c4 <HAL_GPIO_Init>
}
 8001c40:	e0c1      	b.n	8001dc6 <HAL_TIM_MspPostInit+0x2f6>
  else if(htim->Instance==TIM8)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a4b      	ldr	r2, [pc, #300]	@ (8001d74 <HAL_TIM_MspPostInit+0x2a4>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d11c      	bne.n	8001c86 <HAL_TIM_MspPostInit+0x1b6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4c:	4b43      	ldr	r3, [pc, #268]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001c4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c50:	4a42      	ldr	r2, [pc, #264]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001c52:	f043 0304 	orr.w	r3, r3, #4
 8001c56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c58:	4b40      	ldr	r3, [pc, #256]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	61fb      	str	r3, [r7, #28]
 8001c62:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c64:	2340      	movs	r3, #64	@ 0x40
 8001c66:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c70:	2300      	movs	r3, #0
 8001c72:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001c74:	2304      	movs	r3, #4
 8001c76:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c78:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4838      	ldr	r0, [pc, #224]	@ (8001d60 <HAL_TIM_MspPostInit+0x290>)
 8001c80:	f000 fc20 	bl	80024c4 <HAL_GPIO_Init>
}
 8001c84:	e09f      	b.n	8001dc6 <HAL_TIM_MspPostInit+0x2f6>
  else if(htim->Instance==TIM15)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a3b      	ldr	r2, [pc, #236]	@ (8001d78 <HAL_TIM_MspPostInit+0x2a8>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d11d      	bne.n	8001ccc <HAL_TIM_MspPostInit+0x1fc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c90:	4b32      	ldr	r3, [pc, #200]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c94:	4a31      	ldr	r2, [pc, #196]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c9c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	61bb      	str	r3, [r7, #24]
 8001ca6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ca8:	2304      	movs	r3, #4
 8001caa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001cb8:	2309      	movs	r3, #9
 8001cba:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cc6:	f000 fbfd 	bl	80024c4 <HAL_GPIO_Init>
}
 8001cca:	e07c      	b.n	8001dc6 <HAL_TIM_MspPostInit+0x2f6>
  else if(htim->Instance==TIM16)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a2a      	ldr	r2, [pc, #168]	@ (8001d7c <HAL_TIM_MspPostInit+0x2ac>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d11c      	bne.n	8001d10 <HAL_TIM_MspPostInit+0x240>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd6:	4b21      	ldr	r3, [pc, #132]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cda:	4a20      	ldr	r2, [pc, #128]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001cee:	2310      	movs	r3, #16
 8001cf0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d02:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d06:	4619      	mov	r1, r3
 8001d08:	4818      	ldr	r0, [pc, #96]	@ (8001d6c <HAL_TIM_MspPostInit+0x29c>)
 8001d0a:	f000 fbdb 	bl	80024c4 <HAL_GPIO_Init>
}
 8001d0e:	e05a      	b.n	8001dc6 <HAL_TIM_MspPostInit+0x2f6>
  else if(htim->Instance==TIM17)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a1a      	ldr	r2, [pc, #104]	@ (8001d80 <HAL_TIM_MspPostInit+0x2b0>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d134      	bne.n	8001d84 <HAL_TIM_MspPostInit+0x2b4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1e:	4a0f      	ldr	r2, [pc, #60]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d26:	4b0d      	ldr	r3, [pc, #52]	@ (8001d5c <HAL_TIM_MspPostInit+0x28c>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d32:	2380      	movs	r3, #128	@ 0x80
 8001d34:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001d42:	2301      	movs	r3, #1
 8001d44:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d46:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d50:	f000 fbb8 	bl	80024c4 <HAL_GPIO_Init>
}
 8001d54:	e037      	b.n	8001dc6 <HAL_TIM_MspPostInit+0x2f6>
 8001d56:	bf00      	nop
 8001d58:	40012c00 	.word	0x40012c00
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	48000800 	.word	0x48000800
 8001d64:	40000400 	.word	0x40000400
 8001d68:	40000800 	.word	0x40000800
 8001d6c:	48000400 	.word	0x48000400
 8001d70:	40000c00 	.word	0x40000c00
 8001d74:	40013400 	.word	0x40013400
 8001d78:	40014000 	.word	0x40014000
 8001d7c:	40014400 	.word	0x40014400
 8001d80:	40014800 	.word	0x40014800
  else if(htim->Instance==TIM20)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a11      	ldr	r2, [pc, #68]	@ (8001dd0 <HAL_TIM_MspPostInit+0x300>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d11b      	bne.n	8001dc6 <HAL_TIM_MspPostInit+0x2f6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <HAL_TIM_MspPostInit+0x304>)
 8001d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d92:	4a10      	ldr	r2, [pc, #64]	@ (8001dd4 <HAL_TIM_MspPostInit+0x304>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <HAL_TIM_MspPostInit+0x304>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001da6:	2304      	movs	r3, #4
 8001da8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM20;
 8001db6:	2303      	movs	r3, #3
 8001db8:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4805      	ldr	r0, [pc, #20]	@ (8001dd8 <HAL_TIM_MspPostInit+0x308>)
 8001dc2:	f000 fb7f 	bl	80024c4 <HAL_GPIO_Init>
}
 8001dc6:	bf00      	nop
 8001dc8:	3748      	adds	r7, #72	@ 0x48
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40015000 	.word	0x40015000
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	48000400 	.word	0x48000400

08001ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b0a0      	sub	sp, #128	@ 0x80
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001df4:	f107 0318 	add.w	r3, r7, #24
 8001df8:	2254      	movs	r2, #84	@ 0x54
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f009 fedd 	bl	800bbbc <memset>
  if(huart->Instance==USART1)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a31      	ldr	r2, [pc, #196]	@ (8001ecc <HAL_UART_MspInit+0xf0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d15b      	bne.n	8001ec4 <HAL_UART_MspInit+0xe8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e14:	f107 0318 	add.w	r3, r7, #24
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f002 ffff 	bl	8004e1c <HAL_RCCEx_PeriphCLKConfig>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e24:	f7ff fd16 	bl	8001854 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e28:	4b29      	ldr	r3, [pc, #164]	@ (8001ed0 <HAL_UART_MspInit+0xf4>)
 8001e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e2c:	4a28      	ldr	r2, [pc, #160]	@ (8001ed0 <HAL_UART_MspInit+0xf4>)
 8001e2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e32:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e34:	4b26      	ldr	r3, [pc, #152]	@ (8001ed0 <HAL_UART_MspInit+0xf4>)
 8001e36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e40:	4b23      	ldr	r3, [pc, #140]	@ (8001ed0 <HAL_UART_MspInit+0xf4>)
 8001e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e44:	4a22      	ldr	r2, [pc, #136]	@ (8001ed0 <HAL_UART_MspInit+0xf4>)
 8001e46:	f043 0304 	orr.w	r3, r3, #4
 8001e4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e4c:	4b20      	ldr	r3, [pc, #128]	@ (8001ed0 <HAL_UART_MspInit+0xf4>)
 8001e4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e58:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed0 <HAL_UART_MspInit+0xf4>)
 8001e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e5c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ed0 <HAL_UART_MspInit+0xf4>)
 8001e5e:	f043 0301 	orr.w	r3, r3, #1
 8001e62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed0 <HAL_UART_MspInit+0xf4>)
 8001e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC5     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e70:	2320      	movs	r3, #32
 8001e72:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e74:	2302      	movs	r3, #2
 8001e76:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e80:	2307      	movs	r3, #7
 8001e82:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e84:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4812      	ldr	r0, [pc, #72]	@ (8001ed4 <HAL_UART_MspInit+0xf8>)
 8001e8c:	f000 fb1a 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e94:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ea2:	2307      	movs	r3, #7
 8001ea4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ea6:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001eaa:	4619      	mov	r1, r3
 8001eac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001eb0:	f000 fb08 	bl	80024c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2102      	movs	r1, #2
 8001eb8:	2025      	movs	r0, #37	@ 0x25
 8001eba:	f000 fa0e 	bl	80022da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ebe:	2025      	movs	r0, #37	@ 0x25
 8001ec0:	f000 fa25 	bl	800230e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ec4:	bf00      	nop
 8001ec6:	3780      	adds	r7, #128	@ 0x80
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40013800 	.word	0x40013800
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	48000800 	.word	0x48000800

08001ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <NMI_Handler+0x4>

08001ee0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <HardFault_Handler+0x4>

08001ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eec:	bf00      	nop
 8001eee:	e7fd      	b.n	8001eec <MemManage_Handler+0x4>

08001ef0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <BusFault_Handler+0x4>

08001ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001efc:	bf00      	nop
 8001efe:	e7fd      	b.n	8001efc <UsageFault_Handler+0x4>

08001f00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f2a:	b580      	push	{r7, lr}
 8001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f2e:	f000 f8b9 	bl	80020a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001f3c:	4802      	ldr	r0, [pc, #8]	@ (8001f48 <USB_LP_IRQHandler+0x10>)
 8001f3e:	f000 fd7d 	bl	8002a3c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20001af8 	.word	0x20001af8

08001f4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f50:	4802      	ldr	r0, [pc, #8]	@ (8001f5c <USART1_IRQHandler+0x10>)
 8001f52:	f004 fc69 	bl	8006828 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	20000540 	.word	0x20000540

08001f60 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001f64:	4802      	ldr	r0, [pc, #8]	@ (8001f70 <TIM6_DAC_IRQHandler+0x10>)
 8001f66:	f003 fc0f 	bl	8005788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	2000032c 	.word	0x2000032c

08001f74 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001f78:	4802      	ldr	r0, [pc, #8]	@ (8001f84 <TIM7_DAC_IRQHandler+0x10>)
 8001f7a:	f003 fc05 	bl	8005788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000378 	.word	0x20000378

08001f88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f8c:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <SystemInit+0x20>)
 8001f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f92:	4a05      	ldr	r2, [pc, #20]	@ (8001fa8 <SystemInit+0x20>)
 8001f94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fac:	480d      	ldr	r0, [pc, #52]	@ (8001fe4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fb0:	f7ff ffea 	bl	8001f88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fb4:	480c      	ldr	r0, [pc, #48]	@ (8001fe8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fb6:	490d      	ldr	r1, [pc, #52]	@ (8001fec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ff0 <LoopForever+0xe>)
  movs r3, #0
 8001fba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001fbc:	e002      	b.n	8001fc4 <LoopCopyDataInit>

08001fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc2:	3304      	adds	r3, #4

08001fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc8:	d3f9      	bcc.n	8001fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fca:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fcc:	4c0a      	ldr	r4, [pc, #40]	@ (8001ff8 <LoopForever+0x16>)
  movs r3, #0
 8001fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd0:	e001      	b.n	8001fd6 <LoopFillZerobss>

08001fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd4:	3204      	adds	r2, #4

08001fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd8:	d3fb      	bcc.n	8001fd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fda:	f009 fdf7 	bl	800bbcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fde:	f7fe fa93 	bl	8000508 <main>

08001fe2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fe2:	e7fe      	b.n	8001fe2 <LoopForever>
  ldr   r0, =_estack
 8001fe4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fec:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8001ff0:	0800bcf0 	.word	0x0800bcf0
  ldr r2, =_sbss
 8001ff4:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8001ff8:	20001ff4 	.word	0x20001ff4

08001ffc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ffc:	e7fe      	b.n	8001ffc <ADC1_2_IRQHandler>

08001ffe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002008:	2003      	movs	r0, #3
 800200a:	f000 f95b 	bl	80022c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800200e:	200f      	movs	r0, #15
 8002010:	f000 f80e 	bl	8002030 <HAL_InitTick>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d002      	beq.n	8002020 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	71fb      	strb	r3, [r7, #7]
 800201e:	e001      	b.n	8002024 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002020:	f7ff fc1e 	bl	8001860 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002024:	79fb      	ldrb	r3, [r7, #7]

}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800203c:	4b16      	ldr	r3, [pc, #88]	@ (8002098 <HAL_InitTick+0x68>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d022      	beq.n	800208a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002044:	4b15      	ldr	r3, [pc, #84]	@ (800209c <HAL_InitTick+0x6c>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b13      	ldr	r3, [pc, #76]	@ (8002098 <HAL_InitTick+0x68>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002050:	fbb1 f3f3 	udiv	r3, r1, r3
 8002054:	fbb2 f3f3 	udiv	r3, r2, r3
 8002058:	4618      	mov	r0, r3
 800205a:	f000 f966 	bl	800232a <HAL_SYSTICK_Config>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10f      	bne.n	8002084 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b0f      	cmp	r3, #15
 8002068:	d809      	bhi.n	800207e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800206a:	2200      	movs	r2, #0
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	f04f 30ff 	mov.w	r0, #4294967295
 8002072:	f000 f932 	bl	80022da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002076:	4a0a      	ldr	r2, [pc, #40]	@ (80020a0 <HAL_InitTick+0x70>)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	e007      	b.n	800208e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	73fb      	strb	r3, [r7, #15]
 8002082:	e004      	b.n	800208e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
 8002088:	e001      	b.n	800208e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800208e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000018 	.word	0x20000018
 800209c:	20000010 	.word	0x20000010
 80020a0:	20000014 	.word	0x20000014

080020a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a8:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <HAL_IncTick+0x1c>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	4b05      	ldr	r3, [pc, #20]	@ (80020c4 <HAL_IncTick+0x20>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4413      	add	r3, r2
 80020b2:	4a03      	ldr	r2, [pc, #12]	@ (80020c0 <HAL_IncTick+0x1c>)
 80020b4:	6013      	str	r3, [r2, #0]
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	20000620 	.word	0x20000620
 80020c4:	20000018 	.word	0x20000018

080020c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return uwTick;
 80020cc:	4b03      	ldr	r3, [pc, #12]	@ (80020dc <HAL_GetTick+0x14>)
 80020ce:	681b      	ldr	r3, [r3, #0]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	20000620 	.word	0x20000620

080020e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff ffee 	bl	80020c8 <HAL_GetTick>
 80020ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f8:	d004      	beq.n	8002104 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80020fa:	4b09      	ldr	r3, [pc, #36]	@ (8002120 <HAL_Delay+0x40>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4413      	add	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002104:	bf00      	nop
 8002106:	f7ff ffdf 	bl	80020c8 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	429a      	cmp	r2, r3
 8002114:	d8f7      	bhi.n	8002106 <HAL_Delay+0x26>
  {
  }
}
 8002116:	bf00      	nop
 8002118:	bf00      	nop
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000018 	.word	0x20000018

08002124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002134:	4b0c      	ldr	r3, [pc, #48]	@ (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800214c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002156:	4a04      	ldr	r2, [pc, #16]	@ (8002168 <__NVIC_SetPriorityGrouping+0x44>)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	60d3      	str	r3, [r2, #12]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002170:	4b04      	ldr	r3, [pc, #16]	@ (8002184 <__NVIC_GetPriorityGrouping+0x18>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	f003 0307 	and.w	r3, r3, #7
}
 800217a:	4618      	mov	r0, r3
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	2b00      	cmp	r3, #0
 8002198:	db0b      	blt.n	80021b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	4907      	ldr	r1, [pc, #28]	@ (80021c0 <__NVIC_EnableIRQ+0x38>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	2001      	movs	r0, #1
 80021aa:	fa00 f202 	lsl.w	r2, r0, r2
 80021ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000e100 	.word	0xe000e100

080021c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	6039      	str	r1, [r7, #0]
 80021ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	db0a      	blt.n	80021ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	490c      	ldr	r1, [pc, #48]	@ (8002210 <__NVIC_SetPriority+0x4c>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	0112      	lsls	r2, r2, #4
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	440b      	add	r3, r1
 80021e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021ec:	e00a      	b.n	8002204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	b2da      	uxtb	r2, r3
 80021f2:	4908      	ldr	r1, [pc, #32]	@ (8002214 <__NVIC_SetPriority+0x50>)
 80021f4:	79fb      	ldrb	r3, [r7, #7]
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	3b04      	subs	r3, #4
 80021fc:	0112      	lsls	r2, r2, #4
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	440b      	add	r3, r1
 8002202:	761a      	strb	r2, [r3, #24]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000e100 	.word	0xe000e100
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002218:	b480      	push	{r7}
 800221a:	b089      	sub	sp, #36	@ 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f1c3 0307 	rsb	r3, r3, #7
 8002232:	2b04      	cmp	r3, #4
 8002234:	bf28      	it	cs
 8002236:	2304      	movcs	r3, #4
 8002238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3304      	adds	r3, #4
 800223e:	2b06      	cmp	r3, #6
 8002240:	d902      	bls.n	8002248 <NVIC_EncodePriority+0x30>
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	3b03      	subs	r3, #3
 8002246:	e000      	b.n	800224a <NVIC_EncodePriority+0x32>
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224c:	f04f 32ff 	mov.w	r2, #4294967295
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43da      	mvns	r2, r3
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	401a      	ands	r2, r3
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002260:	f04f 31ff 	mov.w	r1, #4294967295
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	fa01 f303 	lsl.w	r3, r1, r3
 800226a:	43d9      	mvns	r1, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	4313      	orrs	r3, r2
         );
}
 8002272:	4618      	mov	r0, r3
 8002274:	3724      	adds	r7, #36	@ 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002290:	d301      	bcc.n	8002296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002292:	2301      	movs	r3, #1
 8002294:	e00f      	b.n	80022b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002296:	4a0a      	ldr	r2, [pc, #40]	@ (80022c0 <SysTick_Config+0x40>)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800229e:	210f      	movs	r1, #15
 80022a0:	f04f 30ff 	mov.w	r0, #4294967295
 80022a4:	f7ff ff8e 	bl	80021c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022a8:	4b05      	ldr	r3, [pc, #20]	@ (80022c0 <SysTick_Config+0x40>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ae:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <SysTick_Config+0x40>)
 80022b0:	2207      	movs	r2, #7
 80022b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	e000e010 	.word	0xe000e010

080022c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff ff29 	bl	8002124 <__NVIC_SetPriorityGrouping>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022e8:	f7ff ff40 	bl	800216c <__NVIC_GetPriorityGrouping>
 80022ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	6978      	ldr	r0, [r7, #20]
 80022f4:	f7ff ff90 	bl	8002218 <NVIC_EncodePriority>
 80022f8:	4602      	mov	r2, r0
 80022fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022fe:	4611      	mov	r1, r2
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff5f 	bl	80021c4 <__NVIC_SetPriority>
}
 8002306:	bf00      	nop
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	4603      	mov	r3, r0
 8002316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231c:	4618      	mov	r0, r3
 800231e:	f7ff ff33 	bl	8002188 <__NVIC_EnableIRQ>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff ffa4 	bl	8002280 <SysTick_Config>
 8002338:	4603      	mov	r3, r0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002354:	b2db      	uxtb	r3, r3
 8002356:	2b02      	cmp	r3, #2
 8002358:	d005      	beq.n	8002366 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2204      	movs	r2, #4
 800235e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	73fb      	strb	r3, [r7, #15]
 8002364:	e037      	b.n	80023d6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 020e 	bic.w	r2, r2, #14
 8002374:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002380:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002384:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0201 	bic.w	r2, r2, #1
 8002394:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239a:	f003 021f 	and.w	r2, r3, #31
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a2:	2101      	movs	r1, #1
 80023a4:	fa01 f202 	lsl.w	r2, r1, r2
 80023a8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80023b2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00c      	beq.n	80023d6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023c6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023ca:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80023d4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80023e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d00d      	beq.n	8002428 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2204      	movs	r2, #4
 8002410:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
 8002426:	e047      	b.n	80024b8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f022 020e 	bic.w	r2, r2, #14
 8002436:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002452:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002456:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245c:	f003 021f 	and.w	r2, r3, #31
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002464:	2101      	movs	r1, #1
 8002466:	fa01 f202 	lsl.w	r2, r1, r2
 800246a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002474:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00c      	beq.n	8002498 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002488:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800248c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002496:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	4798      	blx	r3
    }
  }
  return status;
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80024d2:	e15a      	b.n	800278a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	2101      	movs	r1, #1
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	4013      	ands	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 814c 	beq.w	8002784 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d005      	beq.n	8002504 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002500:	2b02      	cmp	r3, #2
 8002502:	d130      	bne.n	8002566 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	2203      	movs	r2, #3
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4013      	ands	r3, r2
 800251a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	68da      	ldr	r2, [r3, #12]
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800253a:	2201      	movs	r2, #1
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43db      	mvns	r3, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	091b      	lsrs	r3, r3, #4
 8002550:	f003 0201 	and.w	r2, r3, #1
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	693a      	ldr	r2, [r7, #16]
 8002564:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b03      	cmp	r3, #3
 8002570:	d017      	beq.n	80025a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	2203      	movs	r2, #3
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4013      	ands	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d123      	bne.n	80025f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	08da      	lsrs	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3208      	adds	r2, #8
 80025b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f003 0307 	and.w	r3, r3, #7
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	220f      	movs	r2, #15
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4013      	ands	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	691a      	ldr	r2, [r3, #16]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	08da      	lsrs	r2, r3, #3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3208      	adds	r2, #8
 80025f0:	6939      	ldr	r1, [r7, #16]
 80025f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	005b      	lsls	r3, r3, #1
 8002600:	2203      	movs	r2, #3
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4013      	ands	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 0203 	and.w	r2, r3, #3
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80a6 	beq.w	8002784 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002638:	4b5b      	ldr	r3, [pc, #364]	@ (80027a8 <HAL_GPIO_Init+0x2e4>)
 800263a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800263c:	4a5a      	ldr	r2, [pc, #360]	@ (80027a8 <HAL_GPIO_Init+0x2e4>)
 800263e:	f043 0301 	orr.w	r3, r3, #1
 8002642:	6613      	str	r3, [r2, #96]	@ 0x60
 8002644:	4b58      	ldr	r3, [pc, #352]	@ (80027a8 <HAL_GPIO_Init+0x2e4>)
 8002646:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002650:	4a56      	ldr	r2, [pc, #344]	@ (80027ac <HAL_GPIO_Init+0x2e8>)
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	089b      	lsrs	r3, r3, #2
 8002656:	3302      	adds	r3, #2
 8002658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f003 0303 	and.w	r3, r3, #3
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	220f      	movs	r2, #15
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800267a:	d01f      	beq.n	80026bc <HAL_GPIO_Init+0x1f8>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	4a4c      	ldr	r2, [pc, #304]	@ (80027b0 <HAL_GPIO_Init+0x2ec>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d019      	beq.n	80026b8 <HAL_GPIO_Init+0x1f4>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	4a4b      	ldr	r2, [pc, #300]	@ (80027b4 <HAL_GPIO_Init+0x2f0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d013      	beq.n	80026b4 <HAL_GPIO_Init+0x1f0>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a4a      	ldr	r2, [pc, #296]	@ (80027b8 <HAL_GPIO_Init+0x2f4>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d00d      	beq.n	80026b0 <HAL_GPIO_Init+0x1ec>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a49      	ldr	r2, [pc, #292]	@ (80027bc <HAL_GPIO_Init+0x2f8>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d007      	beq.n	80026ac <HAL_GPIO_Init+0x1e8>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a48      	ldr	r2, [pc, #288]	@ (80027c0 <HAL_GPIO_Init+0x2fc>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d101      	bne.n	80026a8 <HAL_GPIO_Init+0x1e4>
 80026a4:	2305      	movs	r3, #5
 80026a6:	e00a      	b.n	80026be <HAL_GPIO_Init+0x1fa>
 80026a8:	2306      	movs	r3, #6
 80026aa:	e008      	b.n	80026be <HAL_GPIO_Init+0x1fa>
 80026ac:	2304      	movs	r3, #4
 80026ae:	e006      	b.n	80026be <HAL_GPIO_Init+0x1fa>
 80026b0:	2303      	movs	r3, #3
 80026b2:	e004      	b.n	80026be <HAL_GPIO_Init+0x1fa>
 80026b4:	2302      	movs	r3, #2
 80026b6:	e002      	b.n	80026be <HAL_GPIO_Init+0x1fa>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <HAL_GPIO_Init+0x1fa>
 80026bc:	2300      	movs	r3, #0
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	f002 0203 	and.w	r2, r2, #3
 80026c4:	0092      	lsls	r2, r2, #2
 80026c6:	4093      	lsls	r3, r2
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026ce:	4937      	ldr	r1, [pc, #220]	@ (80027ac <HAL_GPIO_Init+0x2e8>)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	089b      	lsrs	r3, r3, #2
 80026d4:	3302      	adds	r3, #2
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026dc:	4b39      	ldr	r3, [pc, #228]	@ (80027c4 <HAL_GPIO_Init+0x300>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	4013      	ands	r3, r2
 80026ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d003      	beq.n	8002700 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002700:	4a30      	ldr	r2, [pc, #192]	@ (80027c4 <HAL_GPIO_Init+0x300>)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002706:	4b2f      	ldr	r3, [pc, #188]	@ (80027c4 <HAL_GPIO_Init+0x300>)
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	43db      	mvns	r3, r3
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4013      	ands	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	4313      	orrs	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800272a:	4a26      	ldr	r2, [pc, #152]	@ (80027c4 <HAL_GPIO_Init+0x300>)
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002730:	4b24      	ldr	r3, [pc, #144]	@ (80027c4 <HAL_GPIO_Init+0x300>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	43db      	mvns	r3, r3
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4013      	ands	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002754:	4a1b      	ldr	r2, [pc, #108]	@ (80027c4 <HAL_GPIO_Init+0x300>)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800275a:	4b1a      	ldr	r3, [pc, #104]	@ (80027c4 <HAL_GPIO_Init+0x300>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	43db      	mvns	r3, r3
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4013      	ands	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800277e:	4a11      	ldr	r2, [pc, #68]	@ (80027c4 <HAL_GPIO_Init+0x300>)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	3301      	adds	r3, #1
 8002788:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	f47f ae9d 	bne.w	80024d4 <HAL_GPIO_Init+0x10>
  }
}
 800279a:	bf00      	nop
 800279c:	bf00      	nop
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	40021000 	.word	0x40021000
 80027ac:	40010000 	.word	0x40010000
 80027b0:	48000400 	.word	0x48000400
 80027b4:	48000800 	.word	0x48000800
 80027b8:	48000c00 	.word	0x48000c00
 80027bc:	48001000 	.word	0x48001000
 80027c0:	48001400 	.word	0x48001400
 80027c4:	40010400 	.word	0x40010400

080027c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	887b      	ldrh	r3, [r7, #2]
 80027da:	4013      	ands	r3, r2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
 80027e4:	e001      	b.n	80027ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027e6:	2300      	movs	r3, #0
 80027e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	807b      	strh	r3, [r7, #2]
 8002804:	4613      	mov	r3, r2
 8002806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002808:	787b      	ldrb	r3, [r7, #1]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002814:	e002      	b.n	800281c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002816:	887a      	ldrh	r2, [r7, #2]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4013      	ands	r3, r2
 8002840:	041a      	lsls	r2, r3, #16
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	43d9      	mvns	r1, r3
 8002846:	887b      	ldrh	r3, [r7, #2]
 8002848:	400b      	ands	r3, r1
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	619a      	str	r2, [r3, #24]
}
 8002850:	bf00      	nop
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e0c0      	b.n	80029f0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f008 fe96 	bl	800b5b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2203      	movs	r2, #3
 800288c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f005 f9ba 	bl	8007c0e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800289a:	2300      	movs	r3, #0
 800289c:	73fb      	strb	r3, [r7, #15]
 800289e:	e03e      	b.n	800291e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028a0:	7bfa      	ldrb	r2, [r7, #15]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4413      	add	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	440b      	add	r3, r1
 80028ae:	3311      	adds	r3, #17
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028b4:	7bfa      	ldrb	r2, [r7, #15]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	440b      	add	r3, r1
 80028c2:	3310      	adds	r3, #16
 80028c4:	7bfa      	ldrb	r2, [r7, #15]
 80028c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028c8:	7bfa      	ldrb	r2, [r7, #15]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	440b      	add	r3, r1
 80028d6:	3313      	adds	r3, #19
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028dc:	7bfa      	ldrb	r2, [r7, #15]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	440b      	add	r3, r1
 80028ea:	3320      	adds	r3, #32
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028f0:	7bfa      	ldrb	r2, [r7, #15]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	440b      	add	r3, r1
 80028fe:	3324      	adds	r3, #36	@ 0x24
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	440b      	add	r3, r1
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	3301      	adds	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	791b      	ldrb	r3, [r3, #4]
 8002922:	7bfa      	ldrb	r2, [r7, #15]
 8002924:	429a      	cmp	r2, r3
 8002926:	d3bb      	bcc.n	80028a0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002928:	2300      	movs	r3, #0
 800292a:	73fb      	strb	r3, [r7, #15]
 800292c:	e044      	b.n	80029b8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800292e:	7bfa      	ldrb	r2, [r7, #15]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	440b      	add	r3, r1
 800293c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	440b      	add	r3, r1
 8002952:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002956:	7bfa      	ldrb	r2, [r7, #15]
 8002958:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800295a:	7bfa      	ldrb	r2, [r7, #15]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	440b      	add	r3, r1
 8002968:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002970:	7bfa      	ldrb	r2, [r7, #15]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	440b      	add	r3, r1
 800297e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002982:	2200      	movs	r2, #0
 8002984:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002986:	7bfa      	ldrb	r2, [r7, #15]
 8002988:	6879      	ldr	r1, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	440b      	add	r3, r1
 8002994:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800299c:	7bfa      	ldrb	r2, [r7, #15]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	440b      	add	r3, r1
 80029aa:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
 80029b4:	3301      	adds	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	791b      	ldrb	r3, [r3, #4]
 80029bc:	7bfa      	ldrb	r2, [r7, #15]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d3b5      	bcc.n	800292e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3304      	adds	r3, #4
 80029ca:	e893 0006 	ldmia.w	r3, {r1, r2}
 80029ce:	f005 f939 	bl	8007c44 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	7a9b      	ldrb	r3, [r3, #10]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d102      	bne.n	80029ee <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f001 fc0e 	bl	800420a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_PCD_Start+0x16>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e012      	b.n	8002a34 <HAL_PCD_Start+0x3c>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f005 f8e0 	bl	8007be0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f006 febd 	bl	80097a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b084      	sub	sp, #16
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f006 fec2 	bl	80097d2 <USB_ReadInterrupts>
 8002a4e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fb06 	bl	800306c <PCD_EP_ISR_Handler>

    return;
 8002a60:	e110      	b.n	8002c84 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d013      	beq.n	8002a94 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a7e:	b292      	uxth	r2, r2
 8002a80:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f008 fe26 	bl	800b6d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f8fc 	bl	8002c8a <HAL_PCD_SetAddress>

    return;
 8002a92:	e0f7      	b.n	8002c84 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00c      	beq.n	8002ab8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002ab0:	b292      	uxth	r2, r2
 8002ab2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ab6:	e0e5      	b.n	8002c84 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00c      	beq.n	8002adc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ad4:	b292      	uxth	r2, r2
 8002ad6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002ada:	e0d3      	b.n	8002c84 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d034      	beq.n	8002b50 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 0204 	bic.w	r2, r2, #4
 8002af8:	b292      	uxth	r2, r2
 8002afa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0208 	bic.w	r2, r2, #8
 8002b10:	b292      	uxth	r2, r2
 8002b12:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d107      	bne.n	8002b30 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002b28:	2100      	movs	r1, #0
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f008 ffc6 	bl	800babc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f008 fe09 	bl	800b748 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b48:	b292      	uxth	r2, r2
 8002b4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002b4e:	e099      	b.n	8002c84 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d027      	beq.n	8002baa <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f042 0208 	orr.w	r2, r2, #8
 8002b6c:	b292      	uxth	r2, r2
 8002b6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b84:	b292      	uxth	r2, r2
 8002b86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 0204 	orr.w	r2, r2, #4
 8002b9c:	b292      	uxth	r2, r2
 8002b9e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f008 fdb6 	bl	800b714 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002ba8:	e06c      	b.n	8002c84 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d040      	beq.n	8002c36 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002bc6:	b292      	uxth	r2, r2
 8002bc8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d12b      	bne.n	8002c2e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002bde:	b29a      	uxth	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f042 0204 	orr.w	r2, r2, #4
 8002be8:	b292      	uxth	r2, r2
 8002bea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0208 	orr.w	r2, r2, #8
 8002c00:	b292      	uxth	r2, r2
 8002c02:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	089b      	lsrs	r3, r3, #2
 8002c1a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002c24:	2101      	movs	r1, #1
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f008 ff48 	bl	800babc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8002c2c:	e02a      	b.n	8002c84 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f008 fd70 	bl	800b714 <HAL_PCD_SuspendCallback>
    return;
 8002c34:	e026      	b.n	8002c84 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00f      	beq.n	8002c60 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c52:	b292      	uxth	r2, r2
 8002c54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f008 fd2e 	bl	800b6ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c5e:	e011      	b.n	8002c84 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00c      	beq.n	8002c84 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c7c:	b292      	uxth	r2, r2
 8002c7e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c82:	bf00      	nop
  }
}
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}

08002c8a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c8a:	b580      	push	{r7, lr}
 8002c8c:	b082      	sub	sp, #8
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	460b      	mov	r3, r1
 8002c94:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d101      	bne.n	8002ca4 <HAL_PCD_SetAddress+0x1a>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	e012      	b.n	8002cca <HAL_PCD_SetAddress+0x40>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	78fa      	ldrb	r2, [r7, #3]
 8002cb8:	4611      	mov	r1, r2
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f006 fd5e 	bl	800977c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b084      	sub	sp, #16
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	4608      	mov	r0, r1
 8002cdc:	4611      	mov	r1, r2
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	70fb      	strb	r3, [r7, #3]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	803b      	strh	r3, [r7, #0]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	da0e      	bge.n	8002d16 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	f003 0207 	and.w	r2, r3, #7
 8002cfe:	4613      	mov	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	3310      	adds	r3, #16
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2201      	movs	r2, #1
 8002d12:	705a      	strb	r2, [r3, #1]
 8002d14:	e00e      	b.n	8002d34 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d16:	78fb      	ldrb	r3, [r7, #3]
 8002d18:	f003 0207 	and.w	r2, r3, #7
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2200      	movs	r2, #0
 8002d32:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002d40:	883b      	ldrh	r3, [r7, #0]
 8002d42:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	78ba      	ldrb	r2, [r7, #2]
 8002d4e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d50:	78bb      	ldrb	r3, [r7, #2]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d102      	bne.n	8002d5c <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <HAL_PCD_EP_Open+0x98>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e00e      	b.n	8002d88 <HAL_PCD_EP_Open+0xb6>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68f9      	ldr	r1, [r7, #12]
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f004 ff81 	bl	8007c80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002d86:	7afb      	ldrb	r3, [r7, #11]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	da0e      	bge.n	8002dc2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002da4:	78fb      	ldrb	r3, [r7, #3]
 8002da6:	f003 0207 	and.w	r2, r3, #7
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	3310      	adds	r3, #16
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	4413      	add	r3, r2
 8002db8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	705a      	strb	r2, [r3, #1]
 8002dc0:	e00e      	b.n	8002de0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dc2:	78fb      	ldrb	r3, [r7, #3]
 8002dc4:	f003 0207 	and.w	r2, r3, #7
 8002dc8:	4613      	mov	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	b2da      	uxtb	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_PCD_EP_Close+0x6a>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e00e      	b.n	8002e18 <HAL_PCD_EP_Close+0x88>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68f9      	ldr	r1, [r7, #12]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f005 fc21 	bl	8008650 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	607a      	str	r2, [r7, #4]
 8002e2a:	603b      	str	r3, [r7, #0]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e30:	7afb      	ldrb	r3, [r7, #11]
 8002e32:	f003 0207 	and.w	r2, r3, #7
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	4413      	add	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	2200      	movs	r2, #0
 8002e58:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e60:	7afb      	ldrb	r3, [r7, #11]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	b2da      	uxtb	r2, r3
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6979      	ldr	r1, [r7, #20]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f005 fdd9 	bl	8008a2a <USB_EPStartXfer>

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e8e:	78fb      	ldrb	r3, [r7, #3]
 8002e90:	f003 0207 	and.w	r2, r3, #7
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	440b      	add	r3, r1
 8002ea0:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8002ea4:	681b      	ldr	r3, [r3, #0]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b086      	sub	sp, #24
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	603b      	str	r3, [r7, #0]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ec2:	7afb      	ldrb	r3, [r7, #11]
 8002ec4:	f003 0207 	and.w	r2, r3, #7
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	3310      	adds	r3, #16
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	2201      	movs	r2, #1
 8002efc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002efe:	7afb      	ldrb	r3, [r7, #11]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6979      	ldr	r1, [r7, #20]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f005 fd8a 	bl	8008a2a <USB_EPStartXfer>

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	7912      	ldrb	r2, [r2, #4]
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e03e      	b.n	8002fbc <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	da0e      	bge.n	8002f64 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f46:	78fb      	ldrb	r3, [r7, #3]
 8002f48:	f003 0207 	and.w	r2, r3, #7
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	3310      	adds	r3, #16
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	4413      	add	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	705a      	strb	r2, [r3, #1]
 8002f62:	e00c      	b.n	8002f7e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	4613      	mov	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4413      	add	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	4413      	add	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2201      	movs	r2, #1
 8002f82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <HAL_PCD_EP_SetStall+0x7e>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e00e      	b.n	8002fbc <HAL_PCD_EP_SetStall+0x9c>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68f9      	ldr	r1, [r7, #12]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f006 faeb 	bl	8009588 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	7912      	ldrb	r2, [r2, #4]
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e040      	b.n	8003064 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fe2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	da0e      	bge.n	8003008 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	f003 0207 	and.w	r2, r3, #7
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4413      	add	r3, r2
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	3310      	adds	r3, #16
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	705a      	strb	r2, [r3, #1]
 8003006:	e00e      	b.n	8003026 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	f003 0207 	and.w	r2, r3, #7
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	4413      	add	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	b2da      	uxtb	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_PCD_EP_ClrStall+0x82>
 8003042:	2302      	movs	r3, #2
 8003044:	e00e      	b.n	8003064 <HAL_PCD_EP_ClrStall+0xa0>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68f9      	ldr	r1, [r7, #12]
 8003054:	4618      	mov	r0, r3
 8003056:	f006 fae8 	bl	800962a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b092      	sub	sp, #72	@ 0x48
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003074:	e333      	b.n	80036de <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800307e:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003080:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003082:	b2db      	uxtb	r3, r3
 8003084:	f003 030f 	and.w	r3, r3, #15
 8003088:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 800308c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8003090:	2b00      	cmp	r3, #0
 8003092:	f040 8108 	bne.w	80032a6 <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003096:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003098:	f003 0310 	and.w	r3, r3, #16
 800309c:	2b00      	cmp	r3, #0
 800309e:	d14c      	bne.n	800313a <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80030ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030b0:	813b      	strh	r3, [r7, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	893b      	ldrh	r3, [r7, #8]
 80030b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3310      	adds	r3, #16
 80030c8:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	4413      	add	r3, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	4413      	add	r3, r2
 80030e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80030f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030f4:	695a      	ldr	r2, [r3, #20]
 80030f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	441a      	add	r2, r3
 80030fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80030fe:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003100:	2100      	movs	r1, #0
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f008 fabf 	bl	800b686 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	7b1b      	ldrb	r3, [r3, #12]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 82e5 	beq.w	80036de <PCD_EP_ISR_Handler+0x672>
 8003114:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	2b00      	cmp	r3, #0
 800311a:	f040 82e0 	bne.w	80036de <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	7b1b      	ldrb	r3, [r3, #12]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003128:	b2da      	uxtb	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	731a      	strb	r2, [r3, #12]
 8003138:	e2d1      	b.n	80036de <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003140:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	881b      	ldrh	r3, [r3, #0]
 8003148:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800314a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800314c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003150:	2b00      	cmp	r3, #0
 8003152:	d032      	beq.n	80031ba <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800315c:	b29b      	uxth	r3, r3
 800315e:	461a      	mov	r2, r3
 8003160:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4413      	add	r3, r2
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	4413      	add	r3, r2
 800316e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800317a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6818      	ldr	r0, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003186:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003188:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800318a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800318c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800318e:	b29b      	uxth	r3, r3
 8003190:	f006 fb71 	bl	8009876 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	b29a      	uxth	r2, r3
 800319c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80031a0:	4013      	ands	r3, r2
 80031a2:	817b      	strh	r3, [r7, #10]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	897a      	ldrh	r2, [r7, #10]
 80031aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80031ae:	b292      	uxth	r2, r2
 80031b0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f008 fa3a 	bl	800b62c <HAL_PCD_SetupStageCallback>
 80031b8:	e291      	b.n	80036de <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031ba:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f280 828d 	bge.w	80036de <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80031d0:	4013      	ands	r3, r2
 80031d2:	81fb      	strh	r3, [r7, #14]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	89fa      	ldrh	r2, [r7, #14]
 80031da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80031de:	b292      	uxth	r2, r2
 80031e0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6812      	ldr	r2, [r2, #0]
 80031fa:	4413      	add	r3, r2
 80031fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003208:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800320a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d019      	beq.n	8003246 <PCD_EP_ISR_Handler+0x1da>
 8003212:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d015      	beq.n	8003246 <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003220:	6959      	ldr	r1, [r3, #20]
 8003222:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003224:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003226:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003228:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800322a:	b29b      	uxth	r3, r3
 800322c:	f006 fb23 	bl	8009876 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003230:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003232:	695a      	ldr	r2, [r3, #20]
 8003234:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003236:	69db      	ldr	r3, [r3, #28]
 8003238:	441a      	add	r2, r3
 800323a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800323c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800323e:	2100      	movs	r1, #0
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f008 fa05 	bl	800b650 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800324e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003250:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003254:	2b00      	cmp	r3, #0
 8003256:	f040 8242 	bne.w	80036de <PCD_EP_ISR_Handler+0x672>
 800325a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800325c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003260:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003264:	f000 823b 	beq.w	80036de <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	881b      	ldrh	r3, [r3, #0]
 800326e:	b29b      	uxth	r3, r3
 8003270:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003274:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003278:	81bb      	strh	r3, [r7, #12]
 800327a:	89bb      	ldrh	r3, [r7, #12]
 800327c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003280:	81bb      	strh	r3, [r7, #12]
 8003282:	89bb      	ldrh	r3, [r7, #12]
 8003284:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003288:	81bb      	strh	r3, [r7, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	89bb      	ldrh	r3, [r7, #12]
 8003290:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003294:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003298:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800329c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	8013      	strh	r3, [r2, #0]
 80032a4:	e21b      	b.n	80036de <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	4413      	add	r3, r2
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80032b8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f280 80f1 	bge.w	80034a4 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	4413      	add	r3, r2
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80032d8:	4013      	ands	r3, r2
 80032da:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80032ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80032f0:	b292      	uxth	r2, r2
 80032f2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80032f4:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	00db      	lsls	r3, r3, #3
 8003300:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	4413      	add	r3, r2
 8003308:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800330a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800330c:	7b1b      	ldrb	r3, [r3, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d123      	bne.n	800335a <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800331a:	b29b      	uxth	r3, r3
 800331c:	461a      	mov	r2, r3
 800331e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4413      	add	r3, r2
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6812      	ldr	r2, [r2, #0]
 800332a:	4413      	add	r3, r2
 800332c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003336:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800333a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 808b 	beq.w	800345a <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6818      	ldr	r0, [r3, #0]
 8003348:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800334a:	6959      	ldr	r1, [r3, #20]
 800334c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800334e:	88da      	ldrh	r2, [r3, #6]
 8003350:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003354:	f006 fa8f 	bl	8009876 <USB_ReadPMA>
 8003358:	e07f      	b.n	800345a <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800335a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800335c:	78db      	ldrb	r3, [r3, #3]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d109      	bne.n	8003376 <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003362:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003364:	461a      	mov	r2, r3
 8003366:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f9c6 	bl	80036fa <HAL_PCD_EP_DB_Receive>
 800336e:	4603      	mov	r3, r0
 8003370:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8003374:	e071      	b.n	800345a <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800338c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003390:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	461a      	mov	r2, r3
 8003398:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	441a      	add	r2, r3
 80033a0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80033a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d022      	beq.n	8003416 <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033d8:	b29b      	uxth	r3, r3
 80033da:	461a      	mov	r2, r3
 80033dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4413      	add	r3, r2
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	4413      	add	r3, r2
 80033ea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033f4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80033f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d02c      	beq.n	800345a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6818      	ldr	r0, [r3, #0]
 8003404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003406:	6959      	ldr	r1, [r3, #20]
 8003408:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800340a:	891a      	ldrh	r2, [r3, #8]
 800340c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003410:	f006 fa31 	bl	8009876 <USB_ReadPMA>
 8003414:	e021      	b.n	800345a <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800341e:	b29b      	uxth	r3, r3
 8003420:	461a      	mov	r2, r3
 8003422:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4413      	add	r3, r2
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	6812      	ldr	r2, [r2, #0]
 800342e:	4413      	add	r3, r2
 8003430:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800343a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 800343e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003442:	2b00      	cmp	r3, #0
 8003444:	d009      	beq.n	800345a <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800344c:	6959      	ldr	r1, [r3, #20]
 800344e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003450:	895a      	ldrh	r2, [r3, #10]
 8003452:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003456:	f006 fa0e 	bl	8009876 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800345a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800345c:	69da      	ldr	r2, [r3, #28]
 800345e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003462:	441a      	add	r2, r3
 8003464:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003466:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003468:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800346a:	695a      	ldr	r2, [r3, #20]
 800346c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8003470:	441a      	add	r2, r3
 8003472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003474:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d005      	beq.n	800348a <PCD_EP_ISR_Handler+0x41e>
 800347e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8003482:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	429a      	cmp	r2, r3
 8003488:	d206      	bcs.n	8003498 <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800348a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	4619      	mov	r1, r3
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f008 f8dd 	bl	800b650 <HAL_PCD_DataOutStageCallback>
 8003496:	e005      	b.n	80034a4 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800349e:	4618      	mov	r0, r3
 80034a0:	f005 fac3 	bl	8008a2a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80034a4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80034a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 8117 	beq.w	80036de <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 80034b0:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80034b4:	4613      	mov	r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	3310      	adds	r3, #16
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	4413      	add	r3, r2
 80034c2:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80034da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034de:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	441a      	add	r2, r3
 80034ee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80034f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034f8:	b29b      	uxth	r3, r3
 80034fa:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80034fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034fe:	78db      	ldrb	r3, [r3, #3]
 8003500:	2b01      	cmp	r3, #1
 8003502:	f040 80a1 	bne.w	8003648 <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 8003506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003508:	2200      	movs	r2, #0
 800350a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800350c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800350e:	7b1b      	ldrb	r3, [r3, #12]
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 8092 	beq.w	800363a <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003516:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800351c:	2b00      	cmp	r3, #0
 800351e:	d046      	beq.n	80035ae <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003522:	785b      	ldrb	r3, [r3, #1]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d126      	bne.n	8003576 <PCD_EP_ISR_Handler+0x50a>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	617b      	str	r3, [r7, #20]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003536:	b29b      	uxth	r3, r3
 8003538:	461a      	mov	r2, r3
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	4413      	add	r3, r2
 800353e:	617b      	str	r3, [r7, #20]
 8003540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	00da      	lsls	r2, r3, #3
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	4413      	add	r3, r2
 800354a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	b29b      	uxth	r3, r3
 8003556:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800355a:	b29a      	uxth	r2, r3
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	801a      	strh	r2, [r3, #0]
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	b29b      	uxth	r3, r3
 8003566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800356a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800356e:	b29a      	uxth	r2, r3
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	801a      	strh	r2, [r3, #0]
 8003574:	e061      	b.n	800363a <PCD_EP_ISR_Handler+0x5ce>
 8003576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003578:	785b      	ldrb	r3, [r3, #1]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d15d      	bne.n	800363a <PCD_EP_ISR_Handler+0x5ce>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	61fb      	str	r3, [r7, #28]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800358c:	b29b      	uxth	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	4413      	add	r3, r2
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	00da      	lsls	r2, r3, #3
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	4413      	add	r3, r2
 80035a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80035a4:	61bb      	str	r3, [r7, #24]
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	2200      	movs	r2, #0
 80035aa:	801a      	strh	r2, [r3, #0]
 80035ac:	e045      	b.n	800363a <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035b6:	785b      	ldrb	r3, [r3, #1]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d126      	bne.n	800360a <PCD_EP_ISR_Handler+0x59e>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	461a      	mov	r2, r3
 80035ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d0:	4413      	add	r3, r2
 80035d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80035d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	00da      	lsls	r2, r3, #3
 80035da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035dc:	4413      	add	r3, r2
 80035de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80035e2:	623b      	str	r3, [r7, #32]
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	881b      	ldrh	r3, [r3, #0]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	801a      	strh	r2, [r3, #0]
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	881b      	ldrh	r3, [r3, #0]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003602:	b29a      	uxth	r2, r3
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	801a      	strh	r2, [r3, #0]
 8003608:	e017      	b.n	800363a <PCD_EP_ISR_Handler+0x5ce>
 800360a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800360c:	785b      	ldrb	r3, [r3, #1]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d113      	bne.n	800363a <PCD_EP_ISR_Handler+0x5ce>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800361a:	b29b      	uxth	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003620:	4413      	add	r3, r2
 8003622:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003624:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	00da      	lsls	r2, r3, #3
 800362a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800362c:	4413      	add	r3, r2
 800362e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003632:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003636:	2200      	movs	r2, #0
 8003638:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800363a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	4619      	mov	r1, r3
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f008 f820 	bl	800b686 <HAL_PCD_DataInStageCallback>
 8003646:	e04a      	b.n	80036de <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003648:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800364a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d13f      	bne.n	80036d2 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800365a:	b29b      	uxth	r3, r3
 800365c:	461a      	mov	r2, r3
 800365e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	4413      	add	r3, r2
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6812      	ldr	r2, [r2, #0]
 800366a:	4413      	add	r3, r2
 800366c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003676:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 8003678:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800367a:	699a      	ldr	r2, [r3, #24]
 800367c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800367e:	429a      	cmp	r2, r3
 8003680:	d906      	bls.n	8003690 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8003682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003684:	699a      	ldr	r2, [r3, #24]
 8003686:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8003688:	1ad2      	subs	r2, r2, r3
 800368a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800368c:	619a      	str	r2, [r3, #24]
 800368e:	e002      	b.n	8003696 <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8003690:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003692:	2200      	movs	r2, #0
 8003694:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003696:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800369e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	4619      	mov	r1, r3
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f007 ffee 	bl	800b686 <HAL_PCD_DataInStageCallback>
 80036aa:	e018      	b.n	80036de <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80036ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036ae:	695a      	ldr	r2, [r3, #20]
 80036b0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80036b2:	441a      	add	r2, r3
 80036b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036b6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80036b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036ba:	69da      	ldr	r2, [r3, #28]
 80036bc:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80036be:	441a      	add	r2, r3
 80036c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c2:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036ca:	4618      	mov	r0, r3
 80036cc:	f005 f9ad 	bl	8008a2a <USB_EPStartXfer>
 80036d0:	e005      	b.n	80036de <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80036d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80036d4:	461a      	mov	r2, r3
 80036d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f917 	bl	800390c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	b21b      	sxth	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f6ff acc3 	blt.w	8003076 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3748      	adds	r7, #72	@ 0x48
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b088      	sub	sp, #32
 80036fe:	af00      	add	r7, sp, #0
 8003700:	60f8      	str	r0, [r7, #12]
 8003702:	60b9      	str	r1, [r7, #8]
 8003704:	4613      	mov	r3, r2
 8003706:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003708:	88fb      	ldrh	r3, [r7, #6]
 800370a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d07c      	beq.n	800380c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800371a:	b29b      	uxth	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4413      	add	r3, r2
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	6812      	ldr	r2, [r2, #0]
 800372a:	4413      	add	r3, r2
 800372c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003730:	881b      	ldrh	r3, [r3, #0]
 8003732:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003736:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	699a      	ldr	r2, [r3, #24]
 800373c:	8b7b      	ldrh	r3, [r7, #26]
 800373e:	429a      	cmp	r2, r3
 8003740:	d306      	bcc.n	8003750 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	8b7b      	ldrh	r3, [r7, #26]
 8003748:	1ad2      	subs	r2, r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	619a      	str	r2, [r3, #24]
 800374e:	e002      	b.n	8003756 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2200      	movs	r2, #0
 8003754:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d123      	bne.n	80037a6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	881b      	ldrh	r3, [r3, #0]
 800376e:	b29b      	uxth	r3, r3
 8003770:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003774:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003778:	833b      	strh	r3, [r7, #24]
 800377a:	8b3b      	ldrh	r3, [r7, #24]
 800377c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003780:	833b      	strh	r3, [r7, #24]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	461a      	mov	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	441a      	add	r2, r3
 8003790:	8b3b      	ldrh	r3, [r7, #24]
 8003792:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003796:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800379a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800379e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01f      	beq.n	80037f0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ca:	82fb      	strh	r3, [r7, #22]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	461a      	mov	r2, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	441a      	add	r2, r3
 80037da:	8afb      	ldrh	r3, [r7, #22]
 80037dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80037e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80037e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80037e8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80037f0:	8b7b      	ldrh	r3, [r7, #26]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 8085 	beq.w	8003902 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	6959      	ldr	r1, [r3, #20]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	891a      	ldrh	r2, [r3, #8]
 8003804:	8b7b      	ldrh	r3, [r7, #26]
 8003806:	f006 f836 	bl	8009876 <USB_ReadPMA>
 800380a:	e07a      	b.n	8003902 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003814:	b29b      	uxth	r3, r3
 8003816:	461a      	mov	r2, r3
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	4413      	add	r3, r2
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	4413      	add	r3, r2
 8003826:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800382a:	881b      	ldrh	r3, [r3, #0]
 800382c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003830:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	699a      	ldr	r2, [r3, #24]
 8003836:	8b7b      	ldrh	r3, [r7, #26]
 8003838:	429a      	cmp	r2, r3
 800383a:	d306      	bcc.n	800384a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	699a      	ldr	r2, [r3, #24]
 8003840:	8b7b      	ldrh	r3, [r7, #26]
 8003842:	1ad2      	subs	r2, r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	619a      	str	r2, [r3, #24]
 8003848:	e002      	b.n	8003850 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2200      	movs	r2, #0
 800384e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d123      	bne.n	80038a0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	b29b      	uxth	r3, r3
 800386a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800386e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003872:	83fb      	strh	r3, [r7, #30]
 8003874:	8bfb      	ldrh	r3, [r7, #30]
 8003876:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800387a:	83fb      	strh	r3, [r7, #30]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	461a      	mov	r2, r3
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	441a      	add	r2, r3
 800388a:	8bfb      	ldrh	r3, [r7, #30]
 800388c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003890:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003894:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800389c:	b29b      	uxth	r3, r3
 800389e:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d11f      	bne.n	80038ea <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038c4:	83bb      	strh	r3, [r7, #28]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	441a      	add	r2, r3
 80038d4:	8bbb      	ldrh	r3, [r7, #28]
 80038d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80038ea:	8b7b      	ldrh	r3, [r7, #26]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d008      	beq.n	8003902 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6818      	ldr	r0, [r3, #0]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	6959      	ldr	r1, [r3, #20]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	895a      	ldrh	r2, [r3, #10]
 80038fc:	8b7b      	ldrh	r3, [r7, #26]
 80038fe:	f005 ffba 	bl	8009876 <USB_ReadPMA>
    }
  }

  return count;
 8003902:	8b7b      	ldrh	r3, [r7, #26]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3720      	adds	r7, #32
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b0a6      	sub	sp, #152	@ 0x98
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	4613      	mov	r3, r2
 8003918:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800391a:	88fb      	ldrh	r3, [r7, #6]
 800391c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 81f7 	beq.w	8003d14 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800392e:	b29b      	uxth	r3, r3
 8003930:	461a      	mov	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	4413      	add	r3, r2
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	6812      	ldr	r2, [r2, #0]
 800393e:	4413      	add	r3, r2
 8003940:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800394a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	699a      	ldr	r2, [r3, #24]
 8003952:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003956:	429a      	cmp	r2, r3
 8003958:	d907      	bls.n	800396a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	699a      	ldr	r2, [r3, #24]
 800395e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003962:	1ad2      	subs	r2, r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	619a      	str	r2, [r3, #24]
 8003968:	e002      	b.n	8003970 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2200      	movs	r2, #0
 800396e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	2b00      	cmp	r3, #0
 8003976:	f040 80e1 	bne.w	8003b3c <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	785b      	ldrb	r3, [r3, #1]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d126      	bne.n	80039d0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	633b      	str	r3, [r7, #48]	@ 0x30
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003990:	b29b      	uxth	r3, r3
 8003992:	461a      	mov	r2, r3
 8003994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003996:	4413      	add	r3, r2
 8003998:	633b      	str	r3, [r7, #48]	@ 0x30
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	00da      	lsls	r2, r3, #3
 80039a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a2:	4413      	add	r3, r2
 80039a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80039a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b8:	801a      	strh	r2, [r3, #0]
 80039ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039bc:	881b      	ldrh	r3, [r3, #0]
 80039be:	b29b      	uxth	r3, r3
 80039c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039cc:	801a      	strh	r2, [r3, #0]
 80039ce:	e01a      	b.n	8003a06 <HAL_PCD_EP_DB_Transmit+0xfa>
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	785b      	ldrb	r3, [r3, #1]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d116      	bne.n	8003a06 <HAL_PCD_EP_DB_Transmit+0xfa>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	461a      	mov	r2, r3
 80039ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ec:	4413      	add	r3, r2
 80039ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	00da      	lsls	r2, r3, #3
 80039f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f8:	4413      	add	r3, r2
 80039fa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80039fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a02:	2200      	movs	r2, #0
 8003a04:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	785b      	ldrb	r3, [r3, #1]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d126      	bne.n	8003a62 <HAL_PCD_EP_DB_Transmit+0x156>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	623b      	str	r3, [r7, #32]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	4413      	add	r3, r2
 8003a2a:	623b      	str	r3, [r7, #32]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	00da      	lsls	r2, r3, #3
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	4413      	add	r3, r2
 8003a36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003a3a:	61fb      	str	r3, [r7, #28]
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	881b      	ldrh	r3, [r3, #0]
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	801a      	strh	r2, [r3, #0]
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	801a      	strh	r2, [r3, #0]
 8003a60:	e017      	b.n	8003a92 <HAL_PCD_EP_DB_Transmit+0x186>
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	785b      	ldrb	r3, [r3, #1]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d113      	bne.n	8003a92 <HAL_PCD_EP_DB_Transmit+0x186>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	461a      	mov	r2, r3
 8003a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a78:	4413      	add	r3, r2
 8003a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	00da      	lsls	r2, r3, #3
 8003a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a84:	4413      	add	r3, r2
 8003a86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003a8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	2200      	movs	r2, #0
 8003a90:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	78db      	ldrb	r3, [r3, #3]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d123      	bne.n	8003ae2 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	881b      	ldrh	r3, [r3, #0]
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ab0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ab4:	837b      	strh	r3, [r7, #26]
 8003ab6:	8b7b      	ldrh	r3, [r7, #26]
 8003ab8:	f083 0320 	eor.w	r3, r3, #32
 8003abc:	837b      	strh	r3, [r7, #26]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	441a      	add	r2, r3
 8003acc:	8b7b      	ldrh	r3, [r7, #26]
 8003ace:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ad2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003ada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f007 fdcc 	bl	800b686 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003aee:	88fb      	ldrh	r3, [r7, #6]
 8003af0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d01f      	beq.n	8003b38 <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b12:	833b      	strh	r3, [r7, #24]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	441a      	add	r2, r3
 8003b22:	8b3b      	ldrh	r3, [r7, #24]
 8003b24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	e31f      	b.n	800417c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b3c:	88fb      	ldrh	r3, [r7, #6]
 8003b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d021      	beq.n	8003b8a <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b60:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	441a      	add	r2, r3
 8003b72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003b76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b7e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	f040 82ca 	bne.w	800412a <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	695a      	ldr	r2, [r3, #20]
 8003b9a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003b9e:	441a      	add	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	69da      	ldr	r2, [r3, #28]
 8003ba8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003bac:	441a      	add	r2, r3
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	6a1a      	ldr	r2, [r3, #32]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d309      	bcc.n	8003bd2 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	6a1a      	ldr	r2, [r3, #32]
 8003bc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bca:	1ad2      	subs	r2, r2, r3
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	621a      	str	r2, [r3, #32]
 8003bd0:	e015      	b.n	8003bfe <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	6a1b      	ldr	r3, [r3, #32]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d107      	bne.n	8003bea <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 8003bda:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003bde:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003be8:	e009      	b.n	8003bfe <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	6a1b      	ldr	r3, [r3, #32]
 8003bf6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	785b      	ldrb	r3, [r3, #1]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d15f      	bne.n	8003cc6 <HAL_PCD_EP_DB_Transmit+0x3ba>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	461a      	mov	r2, r3
 8003c18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c1a:	4413      	add	r3, r2
 8003c1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	00da      	lsls	r2, r3, #3
 8003c24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c26:	4413      	add	r3, r2
 8003c28:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c3c:	801a      	strh	r2, [r3, #0]
 8003c3e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10a      	bne.n	8003c5a <HAL_PCD_EP_DB_Transmit+0x34e>
 8003c44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c46:	881b      	ldrh	r3, [r3, #0]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c56:	801a      	strh	r2, [r3, #0]
 8003c58:	e051      	b.n	8003cfe <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003c5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c5c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c5e:	d816      	bhi.n	8003c8e <HAL_PCD_EP_DB_Transmit+0x382>
 8003c60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c62:	085b      	lsrs	r3, r3, #1
 8003c64:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <HAL_PCD_EP_DB_Transmit+0x36a>
 8003c70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c72:	3301      	adds	r3, #1
 8003c74:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c78:	881b      	ldrh	r3, [r3, #0]
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	029b      	lsls	r3, r3, #10
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	4313      	orrs	r3, r2
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c8a:	801a      	strh	r2, [r3, #0]
 8003c8c:	e037      	b.n	8003cfe <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003c8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c90:	095b      	lsrs	r3, r3, #5
 8003c92:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c96:	f003 031f 	and.w	r3, r3, #31
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d102      	bne.n	8003ca4 <HAL_PCD_EP_DB_Transmit+0x398>
 8003c9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	029b      	lsls	r3, r3, #10
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cc2:	801a      	strh	r2, [r3, #0]
 8003cc4:	e01b      	b.n	8003cfe <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	785b      	ldrb	r3, [r3, #1]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d117      	bne.n	8003cfe <HAL_PCD_EP_DB_Transmit+0x3f2>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	461a      	mov	r2, r3
 8003ce0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ce2:	4413      	add	r3, r2
 8003ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	781b      	ldrb	r3, [r3, #0]
 8003cea:	00da      	lsls	r2, r3, #3
 8003cec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cee:	4413      	add	r3, r2
 8003cf0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003cf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cfc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	6959      	ldr	r1, [r3, #20]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	891a      	ldrh	r2, [r3, #8]
 8003d0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	f005 fd70 	bl	80097f2 <USB_WritePMA>
 8003d12:	e20a      	b.n	800412a <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	461a      	mov	r2, r3
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	00db      	lsls	r3, r3, #3
 8003d26:	4413      	add	r3, r2
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d38:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	699a      	ldr	r2, [r3, #24]
 8003d40:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d307      	bcc.n	8003d58 <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	699a      	ldr	r2, [r3, #24]
 8003d4c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003d50:	1ad2      	subs	r2, r2, r3
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	619a      	str	r2, [r3, #24]
 8003d56:	e002      	b.n	8003d5e <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f040 80f6 	bne.w	8003f54 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	785b      	ldrb	r3, [r3, #1]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d126      	bne.n	8003dbe <HAL_PCD_EP_DB_Transmit+0x4b2>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	677b      	str	r3, [r7, #116]	@ 0x74
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	461a      	mov	r2, r3
 8003d82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d84:	4413      	add	r3, r2
 8003d86:	677b      	str	r3, [r7, #116]	@ 0x74
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	00da      	lsls	r2, r3, #3
 8003d8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d90:	4413      	add	r3, r2
 8003d92:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003d96:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003da6:	801a      	strh	r2, [r3, #0]
 8003da8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003db2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003dba:	801a      	strh	r2, [r3, #0]
 8003dbc:	e01a      	b.n	8003df4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	785b      	ldrb	r3, [r3, #1]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d116      	bne.n	8003df4 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003dda:	4413      	add	r3, r2
 8003ddc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	00da      	lsls	r2, r3, #3
 8003de4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003de6:	4413      	add	r3, r2
 8003de8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8003dec:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003dee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003df0:	2200      	movs	r2, #0
 8003df2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	785b      	ldrb	r3, [r3, #1]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d12f      	bne.n	8003e64 <HAL_PCD_EP_DB_Transmit+0x558>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	461a      	mov	r2, r3
 8003e18:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	00da      	lsls	r2, r3, #3
 8003e28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e48:	801a      	strh	r2, [r3, #0]
 8003e4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e60:	801a      	strh	r2, [r3, #0]
 8003e62:	e01c      	b.n	8003e9e <HAL_PCD_EP_DB_Transmit+0x592>
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	785b      	ldrb	r3, [r3, #1]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d118      	bne.n	8003e9e <HAL_PCD_EP_DB_Transmit+0x592>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	461a      	mov	r2, r3
 8003e78:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	00da      	lsls	r2, r3, #3
 8003e88:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8003e92:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e96:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	78db      	ldrb	r3, [r3, #3]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d127      	bne.n	8003ef6 <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	461a      	mov	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ebc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ec0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003ec4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003ec8:	f083 0320 	eor.w	r3, r3, #32
 8003ecc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	441a      	add	r2, r3
 8003ede:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8003ee2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ee6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003eea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003eee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	4619      	mov	r1, r3
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f007 fbc2 	bl	800b686 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f02:	88fb      	ldrh	r3, [r7, #6]
 8003f04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d121      	bne.n	8003f50 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f26:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	441a      	add	r2, r3
 8003f38:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8003f3c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f40:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f44:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	e113      	b.n	800417c <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f54:	88fb      	ldrh	r3, [r7, #6]
 8003f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d121      	bne.n	8003fa2 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f78:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	461a      	mov	r2, r3
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	441a      	add	r2, r3
 8003f8a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8003f8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f96:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	f040 80be 	bne.w	800412a <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003fb6:	441a      	add	r2, r3
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	69da      	ldr	r2, [r3, #28]
 8003fc0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003fc4:	441a      	add	r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	6a1a      	ldr	r2, [r3, #32]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d309      	bcc.n	8003fea <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	6a1a      	ldr	r2, [r3, #32]
 8003fe0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fe2:	1ad2      	subs	r2, r2, r3
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	621a      	str	r2, [r3, #32]
 8003fe8:	e015      	b.n	8004016 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d107      	bne.n	8004002 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8003ff2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8003ff6:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004000:	e009      	b.n	8004016 <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2200      	movs	r2, #0
 800400c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	785b      	ldrb	r3, [r3, #1]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d15f      	bne.n	80040e4 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	66bb      	str	r3, [r7, #104]	@ 0x68
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004032:	b29b      	uxth	r3, r3
 8004034:	461a      	mov	r2, r3
 8004036:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004038:	4413      	add	r3, r2
 800403a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	00da      	lsls	r2, r3, #3
 8004042:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004044:	4413      	add	r3, r2
 8004046:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800404a:	667b      	str	r3, [r7, #100]	@ 0x64
 800404c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	b29b      	uxth	r3, r3
 8004052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004056:	b29a      	uxth	r2, r3
 8004058:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800405a:	801a      	strh	r2, [r3, #0]
 800405c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10a      	bne.n	8004078 <HAL_PCD_EP_DB_Transmit+0x76c>
 8004062:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	b29b      	uxth	r3, r3
 8004068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800406c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004070:	b29a      	uxth	r2, r3
 8004072:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004074:	801a      	strh	r2, [r3, #0]
 8004076:	e04e      	b.n	8004116 <HAL_PCD_EP_DB_Transmit+0x80a>
 8004078:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800407a:	2b3e      	cmp	r3, #62	@ 0x3e
 800407c:	d816      	bhi.n	80040ac <HAL_PCD_EP_DB_Transmit+0x7a0>
 800407e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004080:	085b      	lsrs	r3, r3, #1
 8004082:	663b      	str	r3, [r7, #96]	@ 0x60
 8004084:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <HAL_PCD_EP_DB_Transmit+0x788>
 800408e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004090:	3301      	adds	r3, #1
 8004092:	663b      	str	r3, [r7, #96]	@ 0x60
 8004094:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	b29a      	uxth	r2, r3
 800409a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800409c:	b29b      	uxth	r3, r3
 800409e:	029b      	lsls	r3, r3, #10
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	4313      	orrs	r3, r2
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040a8:	801a      	strh	r2, [r3, #0]
 80040aa:	e034      	b.n	8004116 <HAL_PCD_EP_DB_Transmit+0x80a>
 80040ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80040b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040b4:	f003 031f 	and.w	r3, r3, #31
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d102      	bne.n	80040c2 <HAL_PCD_EP_DB_Transmit+0x7b6>
 80040bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040be:	3b01      	subs	r3, #1
 80040c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80040c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040c4:	881b      	ldrh	r3, [r3, #0]
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	029b      	lsls	r3, r3, #10
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	4313      	orrs	r3, r2
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040dc:	b29a      	uxth	r2, r3
 80040de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040e0:	801a      	strh	r2, [r3, #0]
 80040e2:	e018      	b.n	8004116 <HAL_PCD_EP_DB_Transmit+0x80a>
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	785b      	ldrb	r3, [r3, #1]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d114      	bne.n	8004116 <HAL_PCD_EP_DB_Transmit+0x80a>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	461a      	mov	r2, r3
 80040f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040fa:	4413      	add	r3, r2
 80040fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	00da      	lsls	r2, r3, #3
 8004104:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004106:	4413      	add	r3, r2
 8004108:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800410c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800410e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004110:	b29a      	uxth	r2, r3
 8004112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004114:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	6959      	ldr	r1, [r3, #20]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	895a      	ldrh	r2, [r3, #10]
 8004122:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004124:	b29b      	uxth	r3, r3
 8004126:	f005 fb64 	bl	80097f2 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	b29b      	uxth	r3, r3
 800413c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004140:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004144:	82fb      	strh	r3, [r7, #22]
 8004146:	8afb      	ldrh	r3, [r7, #22]
 8004148:	f083 0310 	eor.w	r3, r3, #16
 800414c:	82fb      	strh	r3, [r7, #22]
 800414e:	8afb      	ldrh	r3, [r7, #22]
 8004150:	f083 0320 	eor.w	r3, r3, #32
 8004154:	82fb      	strh	r3, [r7, #22]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	461a      	mov	r2, r3
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	441a      	add	r2, r3
 8004164:	8afb      	ldrh	r3, [r7, #22]
 8004166:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800416a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800416e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004176:	b29b      	uxth	r3, r3
 8004178:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800417a:	2300      	movs	r3, #0
}
 800417c:	4618      	mov	r0, r3
 800417e:	3798      	adds	r7, #152	@ 0x98
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	607b      	str	r3, [r7, #4]
 800418e:	460b      	mov	r3, r1
 8004190:	817b      	strh	r3, [r7, #10]
 8004192:	4613      	mov	r3, r2
 8004194:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004196:	897b      	ldrh	r3, [r7, #10]
 8004198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800419c:	b29b      	uxth	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00b      	beq.n	80041ba <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041a2:	897b      	ldrh	r3, [r7, #10]
 80041a4:	f003 0207 	and.w	r2, r3, #7
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	3310      	adds	r3, #16
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4413      	add	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	e009      	b.n	80041ce <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041ba:	897a      	ldrh	r2, [r7, #10]
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4413      	add	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80041ce:	893b      	ldrh	r3, [r7, #8]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d107      	bne.n	80041e4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2200      	movs	r2, #0
 80041d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	b29a      	uxth	r2, r3
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	80da      	strh	r2, [r3, #6]
 80041e2:	e00b      	b.n	80041fc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2201      	movs	r2, #1
 80041e8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	b29a      	uxth	r2, r3
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	0c1b      	lsrs	r3, r3, #16
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	371c      	adds	r7, #28
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800420a:	b480      	push	{r7}
 800420c:	b085      	sub	sp, #20
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800422e:	b29b      	uxth	r3, r3
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8004242:	b29b      	uxth	r3, r3
 8004244:	f043 0302 	orr.w	r3, r3, #2
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d141      	bne.n	80042f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800426e:	4b4b      	ldr	r3, [pc, #300]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800427a:	d131      	bne.n	80042e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800427c:	4b47      	ldr	r3, [pc, #284]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800427e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004282:	4a46      	ldr	r2, [pc, #280]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004288:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800428c:	4b43      	ldr	r3, [pc, #268]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004294:	4a41      	ldr	r2, [pc, #260]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004296:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800429a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800429c:	4b40      	ldr	r3, [pc, #256]	@ (80043a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2232      	movs	r2, #50	@ 0x32
 80042a2:	fb02 f303 	mul.w	r3, r2, r3
 80042a6:	4a3f      	ldr	r2, [pc, #252]	@ (80043a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042a8:	fba2 2303 	umull	r2, r3, r2, r3
 80042ac:	0c9b      	lsrs	r3, r3, #18
 80042ae:	3301      	adds	r3, #1
 80042b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042b2:	e002      	b.n	80042ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042ba:	4b38      	ldr	r3, [pc, #224]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042c6:	d102      	bne.n	80042ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f2      	bne.n	80042b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80042ce:	4b33      	ldr	r3, [pc, #204]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042da:	d158      	bne.n	800438e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80042dc:	2303      	movs	r3, #3
 80042de:	e057      	b.n	8004390 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042e0:	4b2e      	ldr	r3, [pc, #184]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042e6:	4a2d      	ldr	r2, [pc, #180]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80042f0:	e04d      	b.n	800438e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042f8:	d141      	bne.n	800437e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042fa:	4b28      	ldr	r3, [pc, #160]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004302:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004306:	d131      	bne.n	800436c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004308:	4b24      	ldr	r3, [pc, #144]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800430a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800430e:	4a23      	ldr	r2, [pc, #140]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004314:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004318:	4b20      	ldr	r3, [pc, #128]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004320:	4a1e      	ldr	r2, [pc, #120]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004322:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004326:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004328:	4b1d      	ldr	r3, [pc, #116]	@ (80043a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2232      	movs	r2, #50	@ 0x32
 800432e:	fb02 f303 	mul.w	r3, r2, r3
 8004332:	4a1c      	ldr	r2, [pc, #112]	@ (80043a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004334:	fba2 2303 	umull	r2, r3, r2, r3
 8004338:	0c9b      	lsrs	r3, r3, #18
 800433a:	3301      	adds	r3, #1
 800433c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800433e:	e002      	b.n	8004346 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3b01      	subs	r3, #1
 8004344:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004346:	4b15      	ldr	r3, [pc, #84]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800434e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004352:	d102      	bne.n	800435a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1f2      	bne.n	8004340 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800435a:	4b10      	ldr	r3, [pc, #64]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004362:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004366:	d112      	bne.n	800438e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e011      	b.n	8004390 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800436c:	4b0b      	ldr	r3, [pc, #44]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800436e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004372:	4a0a      	ldr	r2, [pc, #40]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004374:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004378:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800437c:	e007      	b.n	800438e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800437e:	4b07      	ldr	r3, [pc, #28]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004386:	4a05      	ldr	r2, [pc, #20]	@ (800439c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004388:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800438c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr
 800439c:	40007000 	.word	0x40007000
 80043a0:	20000010 	.word	0x20000010
 80043a4:	431bde83 	.word	0x431bde83

080043a8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80043ac:	4b05      	ldr	r3, [pc, #20]	@ (80043c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	4a04      	ldr	r2, [pc, #16]	@ (80043c4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80043b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043b6:	6093      	str	r3, [r2, #8]
}
 80043b8:	bf00      	nop
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	40007000 	.word	0x40007000

080043c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b088      	sub	sp, #32
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e2fe      	b.n	80049d8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d075      	beq.n	80044d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043e6:	4b97      	ldr	r3, [pc, #604]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f003 030c 	and.w	r3, r3, #12
 80043ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043f0:	4b94      	ldr	r3, [pc, #592]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f003 0303 	and.w	r3, r3, #3
 80043f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	2b0c      	cmp	r3, #12
 80043fe:	d102      	bne.n	8004406 <HAL_RCC_OscConfig+0x3e>
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2b03      	cmp	r3, #3
 8004404:	d002      	beq.n	800440c <HAL_RCC_OscConfig+0x44>
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	2b08      	cmp	r3, #8
 800440a:	d10b      	bne.n	8004424 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800440c:	4b8d      	ldr	r3, [pc, #564]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d05b      	beq.n	80044d0 <HAL_RCC_OscConfig+0x108>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d157      	bne.n	80044d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e2d9      	b.n	80049d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800442c:	d106      	bne.n	800443c <HAL_RCC_OscConfig+0x74>
 800442e:	4b85      	ldr	r3, [pc, #532]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a84      	ldr	r2, [pc, #528]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 8004434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	e01d      	b.n	8004478 <HAL_RCC_OscConfig+0xb0>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004444:	d10c      	bne.n	8004460 <HAL_RCC_OscConfig+0x98>
 8004446:	4b7f      	ldr	r3, [pc, #508]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a7e      	ldr	r2, [pc, #504]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 800444c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	4b7c      	ldr	r3, [pc, #496]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a7b      	ldr	r2, [pc, #492]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 8004458:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	e00b      	b.n	8004478 <HAL_RCC_OscConfig+0xb0>
 8004460:	4b78      	ldr	r3, [pc, #480]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a77      	ldr	r2, [pc, #476]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 8004466:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	4b75      	ldr	r3, [pc, #468]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a74      	ldr	r2, [pc, #464]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 8004472:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004476:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d013      	beq.n	80044a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004480:	f7fd fe22 	bl	80020c8 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004488:	f7fd fe1e 	bl	80020c8 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b64      	cmp	r3, #100	@ 0x64
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e29e      	b.n	80049d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800449a:	4b6a      	ldr	r3, [pc, #424]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0xc0>
 80044a6:	e014      	b.n	80044d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fd fe0e 	bl	80020c8 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044b0:	f7fd fe0a 	bl	80020c8 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b64      	cmp	r3, #100	@ 0x64
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e28a      	b.n	80049d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044c2:	4b60      	ldr	r3, [pc, #384]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1f0      	bne.n	80044b0 <HAL_RCC_OscConfig+0xe8>
 80044ce:	e000      	b.n	80044d2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d075      	beq.n	80045ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044de:	4b59      	ldr	r3, [pc, #356]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 030c 	and.w	r3, r3, #12
 80044e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044e8:	4b56      	ldr	r3, [pc, #344]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f003 0303 	and.w	r3, r3, #3
 80044f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	2b0c      	cmp	r3, #12
 80044f6:	d102      	bne.n	80044fe <HAL_RCC_OscConfig+0x136>
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d002      	beq.n	8004504 <HAL_RCC_OscConfig+0x13c>
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	2b04      	cmp	r3, #4
 8004502:	d11f      	bne.n	8004544 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004504:	4b4f      	ldr	r3, [pc, #316]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <HAL_RCC_OscConfig+0x154>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e25d      	b.n	80049d8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800451c:	4b49      	ldr	r3, [pc, #292]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	061b      	lsls	r3, r3, #24
 800452a:	4946      	ldr	r1, [pc, #280]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 800452c:	4313      	orrs	r3, r2
 800452e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004530:	4b45      	ldr	r3, [pc, #276]	@ (8004648 <HAL_RCC_OscConfig+0x280>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f7fd fd7b 	bl	8002030 <HAL_InitTick>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d043      	beq.n	80045c8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e249      	b.n	80049d8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d023      	beq.n	8004594 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800454c:	4b3d      	ldr	r3, [pc, #244]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a3c      	ldr	r2, [pc, #240]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 8004552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004558:	f7fd fdb6 	bl	80020c8 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004560:	f7fd fdb2 	bl	80020c8 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e232      	b.n	80049d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004572:	4b34      	ldr	r3, [pc, #208]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0f0      	beq.n	8004560 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457e:	4b31      	ldr	r3, [pc, #196]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	061b      	lsls	r3, r3, #24
 800458c:	492d      	ldr	r1, [pc, #180]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 800458e:	4313      	orrs	r3, r2
 8004590:	604b      	str	r3, [r1, #4]
 8004592:	e01a      	b.n	80045ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004594:	4b2b      	ldr	r3, [pc, #172]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a2a      	ldr	r2, [pc, #168]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 800459a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800459e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a0:	f7fd fd92 	bl	80020c8 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a8:	f7fd fd8e 	bl	80020c8 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e20e      	b.n	80049d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045ba:	4b22      	ldr	r3, [pc, #136]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCC_OscConfig+0x1e0>
 80045c6:	e000      	b.n	80045ca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045c8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d041      	beq.n	800465a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d01c      	beq.n	8004618 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045de:	4b19      	ldr	r3, [pc, #100]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 80045e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045e4:	4a17      	ldr	r2, [pc, #92]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 80045e6:	f043 0301 	orr.w	r3, r3, #1
 80045ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ee:	f7fd fd6b 	bl	80020c8 <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045f6:	f7fd fd67 	bl	80020c8 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e1e7      	b.n	80049d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004608:	4b0e      	ldr	r3, [pc, #56]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 800460a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d0ef      	beq.n	80045f6 <HAL_RCC_OscConfig+0x22e>
 8004616:	e020      	b.n	800465a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004618:	4b0a      	ldr	r3, [pc, #40]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 800461a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800461e:	4a09      	ldr	r2, [pc, #36]	@ (8004644 <HAL_RCC_OscConfig+0x27c>)
 8004620:	f023 0301 	bic.w	r3, r3, #1
 8004624:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004628:	f7fd fd4e 	bl	80020c8 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800462e:	e00d      	b.n	800464c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004630:	f7fd fd4a 	bl	80020c8 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d906      	bls.n	800464c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e1ca      	b.n	80049d8 <HAL_RCC_OscConfig+0x610>
 8004642:	bf00      	nop
 8004644:	40021000 	.word	0x40021000
 8004648:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800464c:	4b8c      	ldr	r3, [pc, #560]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 800464e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1ea      	bne.n	8004630 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 80a6 	beq.w	80047b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004668:	2300      	movs	r3, #0
 800466a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800466c:	4b84      	ldr	r3, [pc, #528]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 800466e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004670:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_RCC_OscConfig+0x2b4>
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <HAL_RCC_OscConfig+0x2b6>
 800467c:	2300      	movs	r3, #0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00d      	beq.n	800469e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004682:	4b7f      	ldr	r3, [pc, #508]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 8004684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004686:	4a7e      	ldr	r2, [pc, #504]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 8004688:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800468c:	6593      	str	r3, [r2, #88]	@ 0x58
 800468e:	4b7c      	ldr	r3, [pc, #496]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 8004690:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800469a:	2301      	movs	r3, #1
 800469c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800469e:	4b79      	ldr	r3, [pc, #484]	@ (8004884 <HAL_RCC_OscConfig+0x4bc>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d118      	bne.n	80046dc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046aa:	4b76      	ldr	r3, [pc, #472]	@ (8004884 <HAL_RCC_OscConfig+0x4bc>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a75      	ldr	r2, [pc, #468]	@ (8004884 <HAL_RCC_OscConfig+0x4bc>)
 80046b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046b6:	f7fd fd07 	bl	80020c8 <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046be:	f7fd fd03 	bl	80020c8 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e183      	b.n	80049d8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046d0:	4b6c      	ldr	r3, [pc, #432]	@ (8004884 <HAL_RCC_OscConfig+0x4bc>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0f0      	beq.n	80046be <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d108      	bne.n	80046f6 <HAL_RCC_OscConfig+0x32e>
 80046e4:	4b66      	ldr	r3, [pc, #408]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 80046e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046ea:	4a65      	ldr	r2, [pc, #404]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80046f4:	e024      	b.n	8004740 <HAL_RCC_OscConfig+0x378>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2b05      	cmp	r3, #5
 80046fc:	d110      	bne.n	8004720 <HAL_RCC_OscConfig+0x358>
 80046fe:	4b60      	ldr	r3, [pc, #384]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 8004700:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004704:	4a5e      	ldr	r2, [pc, #376]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 8004706:	f043 0304 	orr.w	r3, r3, #4
 800470a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800470e:	4b5c      	ldr	r3, [pc, #368]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 8004710:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004714:	4a5a      	ldr	r2, [pc, #360]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 8004716:	f043 0301 	orr.w	r3, r3, #1
 800471a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800471e:	e00f      	b.n	8004740 <HAL_RCC_OscConfig+0x378>
 8004720:	4b57      	ldr	r3, [pc, #348]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 8004722:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004726:	4a56      	ldr	r2, [pc, #344]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 8004728:	f023 0301 	bic.w	r3, r3, #1
 800472c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004730:	4b53      	ldr	r3, [pc, #332]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 8004732:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004736:	4a52      	ldr	r2, [pc, #328]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 8004738:	f023 0304 	bic.w	r3, r3, #4
 800473c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d016      	beq.n	8004776 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004748:	f7fd fcbe 	bl	80020c8 <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800474e:	e00a      	b.n	8004766 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004750:	f7fd fcba 	bl	80020c8 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800475e:	4293      	cmp	r3, r2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e138      	b.n	80049d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004766:	4b46      	ldr	r3, [pc, #280]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0ed      	beq.n	8004750 <HAL_RCC_OscConfig+0x388>
 8004774:	e015      	b.n	80047a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004776:	f7fd fca7 	bl	80020c8 <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800477c:	e00a      	b.n	8004794 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800477e:	f7fd fca3 	bl	80020c8 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800478c:	4293      	cmp	r3, r2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e121      	b.n	80049d8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004794:	4b3a      	ldr	r3, [pc, #232]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1ed      	bne.n	800477e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047a2:	7ffb      	ldrb	r3, [r7, #31]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d105      	bne.n	80047b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a8:	4b35      	ldr	r3, [pc, #212]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 80047aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ac:	4a34      	ldr	r2, [pc, #208]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 80047ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047b2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0320 	and.w	r3, r3, #32
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d03c      	beq.n	800483a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01c      	beq.n	8004802 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 80047ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 80047d0:	f043 0301 	orr.w	r3, r3, #1
 80047d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d8:	f7fd fc76 	bl	80020c8 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047e0:	f7fd fc72 	bl	80020c8 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e0f2      	b.n	80049d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047f2:	4b23      	ldr	r3, [pc, #140]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 80047f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d0ef      	beq.n	80047e0 <HAL_RCC_OscConfig+0x418>
 8004800:	e01b      	b.n	800483a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004802:	4b1f      	ldr	r3, [pc, #124]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 8004804:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004808:	4a1d      	ldr	r2, [pc, #116]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 800480a:	f023 0301 	bic.w	r3, r3, #1
 800480e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004812:	f7fd fc59 	bl	80020c8 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800481a:	f7fd fc55 	bl	80020c8 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e0d5      	b.n	80049d8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800482c:	4b14      	ldr	r3, [pc, #80]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 800482e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1ef      	bne.n	800481a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 80c9 	beq.w	80049d6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004844:	4b0e      	ldr	r3, [pc, #56]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 030c 	and.w	r3, r3, #12
 800484c:	2b0c      	cmp	r3, #12
 800484e:	f000 8083 	beq.w	8004958 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d15e      	bne.n	8004918 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800485a:	4b09      	ldr	r3, [pc, #36]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a08      	ldr	r2, [pc, #32]	@ (8004880 <HAL_RCC_OscConfig+0x4b8>)
 8004860:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004866:	f7fd fc2f 	bl	80020c8 <HAL_GetTick>
 800486a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800486c:	e00c      	b.n	8004888 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800486e:	f7fd fc2b 	bl	80020c8 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d905      	bls.n	8004888 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e0ab      	b.n	80049d8 <HAL_RCC_OscConfig+0x610>
 8004880:	40021000 	.word	0x40021000
 8004884:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004888:	4b55      	ldr	r3, [pc, #340]	@ (80049e0 <HAL_RCC_OscConfig+0x618>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1ec      	bne.n	800486e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004894:	4b52      	ldr	r3, [pc, #328]	@ (80049e0 <HAL_RCC_OscConfig+0x618>)
 8004896:	68da      	ldr	r2, [r3, #12]
 8004898:	4b52      	ldr	r3, [pc, #328]	@ (80049e4 <HAL_RCC_OscConfig+0x61c>)
 800489a:	4013      	ands	r3, r2
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6a11      	ldr	r1, [r2, #32]
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048a4:	3a01      	subs	r2, #1
 80048a6:	0112      	lsls	r2, r2, #4
 80048a8:	4311      	orrs	r1, r2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80048ae:	0212      	lsls	r2, r2, #8
 80048b0:	4311      	orrs	r1, r2
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80048b6:	0852      	lsrs	r2, r2, #1
 80048b8:	3a01      	subs	r2, #1
 80048ba:	0552      	lsls	r2, r2, #21
 80048bc:	4311      	orrs	r1, r2
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80048c2:	0852      	lsrs	r2, r2, #1
 80048c4:	3a01      	subs	r2, #1
 80048c6:	0652      	lsls	r2, r2, #25
 80048c8:	4311      	orrs	r1, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80048ce:	06d2      	lsls	r2, r2, #27
 80048d0:	430a      	orrs	r2, r1
 80048d2:	4943      	ldr	r1, [pc, #268]	@ (80049e0 <HAL_RCC_OscConfig+0x618>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048d8:	4b41      	ldr	r3, [pc, #260]	@ (80049e0 <HAL_RCC_OscConfig+0x618>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a40      	ldr	r2, [pc, #256]	@ (80049e0 <HAL_RCC_OscConfig+0x618>)
 80048de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048e4:	4b3e      	ldr	r3, [pc, #248]	@ (80049e0 <HAL_RCC_OscConfig+0x618>)
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	4a3d      	ldr	r2, [pc, #244]	@ (80049e0 <HAL_RCC_OscConfig+0x618>)
 80048ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80048ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048f0:	f7fd fbea 	bl	80020c8 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048f8:	f7fd fbe6 	bl	80020c8 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e066      	b.n	80049d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800490a:	4b35      	ldr	r3, [pc, #212]	@ (80049e0 <HAL_RCC_OscConfig+0x618>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0f0      	beq.n	80048f8 <HAL_RCC_OscConfig+0x530>
 8004916:	e05e      	b.n	80049d6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004918:	4b31      	ldr	r3, [pc, #196]	@ (80049e0 <HAL_RCC_OscConfig+0x618>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a30      	ldr	r2, [pc, #192]	@ (80049e0 <HAL_RCC_OscConfig+0x618>)
 800491e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004924:	f7fd fbd0 	bl	80020c8 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800492c:	f7fd fbcc 	bl	80020c8 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e04c      	b.n	80049d8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800493e:	4b28      	ldr	r3, [pc, #160]	@ (80049e0 <HAL_RCC_OscConfig+0x618>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1f0      	bne.n	800492c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800494a:	4b25      	ldr	r3, [pc, #148]	@ (80049e0 <HAL_RCC_OscConfig+0x618>)
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	4924      	ldr	r1, [pc, #144]	@ (80049e0 <HAL_RCC_OscConfig+0x618>)
 8004950:	4b25      	ldr	r3, [pc, #148]	@ (80049e8 <HAL_RCC_OscConfig+0x620>)
 8004952:	4013      	ands	r3, r2
 8004954:	60cb      	str	r3, [r1, #12]
 8004956:	e03e      	b.n	80049d6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	e039      	b.n	80049d8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004964:	4b1e      	ldr	r3, [pc, #120]	@ (80049e0 <HAL_RCC_OscConfig+0x618>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f003 0203 	and.w	r2, r3, #3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	429a      	cmp	r2, r3
 8004976:	d12c      	bne.n	80049d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004982:	3b01      	subs	r3, #1
 8004984:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004986:	429a      	cmp	r2, r3
 8004988:	d123      	bne.n	80049d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004994:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004996:	429a      	cmp	r2, r3
 8004998:	d11b      	bne.n	80049d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d113      	bne.n	80049d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b4:	085b      	lsrs	r3, r3, #1
 80049b6:	3b01      	subs	r3, #1
 80049b8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d109      	bne.n	80049d2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049c8:	085b      	lsrs	r3, r3, #1
 80049ca:	3b01      	subs	r3, #1
 80049cc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d001      	beq.n	80049d6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e000      	b.n	80049d8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3720      	adds	r7, #32
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40021000 	.word	0x40021000
 80049e4:	019f800c 	.word	0x019f800c
 80049e8:	feeefffc 	.word	0xfeeefffc

080049ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80049f6:	2300      	movs	r3, #0
 80049f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e11e      	b.n	8004c42 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a04:	4b91      	ldr	r3, [pc, #580]	@ (8004c4c <HAL_RCC_ClockConfig+0x260>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d910      	bls.n	8004a34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a12:	4b8e      	ldr	r3, [pc, #568]	@ (8004c4c <HAL_RCC_ClockConfig+0x260>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 020f 	bic.w	r2, r3, #15
 8004a1a:	498c      	ldr	r1, [pc, #560]	@ (8004c4c <HAL_RCC_ClockConfig+0x260>)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a22:	4b8a      	ldr	r3, [pc, #552]	@ (8004c4c <HAL_RCC_ClockConfig+0x260>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d001      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e106      	b.n	8004c42 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d073      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d129      	bne.n	8004a9c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a48:	4b81      	ldr	r3, [pc, #516]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e0f4      	b.n	8004c42 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004a58:	f000 f99c 	bl	8004d94 <RCC_GetSysClockFreqFromPLLSource>
 8004a5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	4a7c      	ldr	r2, [pc, #496]	@ (8004c54 <HAL_RCC_ClockConfig+0x268>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d93f      	bls.n	8004ae6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a66:	4b7a      	ldr	r3, [pc, #488]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d009      	beq.n	8004a86 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d033      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d12f      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a86:	4b72      	ldr	r3, [pc, #456]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a8e:	4a70      	ldr	r2, [pc, #448]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004a90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a96:	2380      	movs	r3, #128	@ 0x80
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	e024      	b.n	8004ae6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d107      	bne.n	8004ab4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aa4:	4b6a      	ldr	r3, [pc, #424]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d109      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e0c6      	b.n	8004c42 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ab4:	4b66      	ldr	r3, [pc, #408]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0be      	b.n	8004c42 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004ac4:	f000 f8ce 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 8004ac8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	4a61      	ldr	r2, [pc, #388]	@ (8004c54 <HAL_RCC_ClockConfig+0x268>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d909      	bls.n	8004ae6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ad2:	4b5f      	ldr	r3, [pc, #380]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ada:	4a5d      	ldr	r2, [pc, #372]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004adc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ae0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004ae2:	2380      	movs	r3, #128	@ 0x80
 8004ae4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ae6:	4b5a      	ldr	r3, [pc, #360]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f023 0203 	bic.w	r2, r3, #3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	4957      	ldr	r1, [pc, #348]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af8:	f7fd fae6 	bl	80020c8 <HAL_GetTick>
 8004afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afe:	e00a      	b.n	8004b16 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b00:	f7fd fae2 	bl	80020c8 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e095      	b.n	8004c42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b16:	4b4e      	ldr	r3, [pc, #312]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f003 020c 	and.w	r2, r3, #12
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d1eb      	bne.n	8004b00 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d023      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d005      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b40:	4b43      	ldr	r3, [pc, #268]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	4a42      	ldr	r2, [pc, #264]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004b46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b4a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d007      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004b58:	4b3d      	ldr	r3, [pc, #244]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004b60:	4a3b      	ldr	r2, [pc, #236]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004b62:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b66:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b68:	4b39      	ldr	r3, [pc, #228]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	4936      	ldr	r1, [pc, #216]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	608b      	str	r3, [r1, #8]
 8004b7a:	e008      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	2b80      	cmp	r3, #128	@ 0x80
 8004b80:	d105      	bne.n	8004b8e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004b82:	4b33      	ldr	r3, [pc, #204]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	4a32      	ldr	r2, [pc, #200]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004b88:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b8c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b8e:	4b2f      	ldr	r3, [pc, #188]	@ (8004c4c <HAL_RCC_ClockConfig+0x260>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 030f 	and.w	r3, r3, #15
 8004b96:	683a      	ldr	r2, [r7, #0]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d21d      	bcs.n	8004bd8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8004c4c <HAL_RCC_ClockConfig+0x260>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f023 020f 	bic.w	r2, r3, #15
 8004ba4:	4929      	ldr	r1, [pc, #164]	@ (8004c4c <HAL_RCC_ClockConfig+0x260>)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004bac:	f7fd fa8c 	bl	80020c8 <HAL_GetTick>
 8004bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bb2:	e00a      	b.n	8004bca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bb4:	f7fd fa88 	bl	80020c8 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e03b      	b.n	8004c42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bca:	4b20      	ldr	r3, [pc, #128]	@ (8004c4c <HAL_RCC_ClockConfig+0x260>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d1ed      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d008      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004be4:	4b1a      	ldr	r3, [pc, #104]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	4917      	ldr	r1, [pc, #92]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d009      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c02:	4b13      	ldr	r3, [pc, #76]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	490f      	ldr	r1, [pc, #60]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c16:	f000 f825 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c50 <HAL_RCC_ClockConfig+0x264>)
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	091b      	lsrs	r3, r3, #4
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	490c      	ldr	r1, [pc, #48]	@ (8004c58 <HAL_RCC_ClockConfig+0x26c>)
 8004c28:	5ccb      	ldrb	r3, [r1, r3]
 8004c2a:	f003 031f 	and.w	r3, r3, #31
 8004c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c32:	4a0a      	ldr	r2, [pc, #40]	@ (8004c5c <HAL_RCC_ClockConfig+0x270>)
 8004c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c36:	4b0a      	ldr	r3, [pc, #40]	@ (8004c60 <HAL_RCC_ClockConfig+0x274>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fd f9f8 	bl	8002030 <HAL_InitTick>
 8004c40:	4603      	mov	r3, r0
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40022000 	.word	0x40022000
 8004c50:	40021000 	.word	0x40021000
 8004c54:	04c4b400 	.word	0x04c4b400
 8004c58:	0800bca0 	.word	0x0800bca0
 8004c5c:	20000010 	.word	0x20000010
 8004c60:	20000014 	.word	0x20000014

08004c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004c6a:	4b2c      	ldr	r3, [pc, #176]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 030c 	and.w	r3, r3, #12
 8004c72:	2b04      	cmp	r3, #4
 8004c74:	d102      	bne.n	8004c7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c76:	4b2a      	ldr	r3, [pc, #168]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	e047      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004c7c:	4b27      	ldr	r3, [pc, #156]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 030c 	and.w	r3, r3, #12
 8004c84:	2b08      	cmp	r3, #8
 8004c86:	d102      	bne.n	8004c8e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c88:	4b25      	ldr	r3, [pc, #148]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c8a:	613b      	str	r3, [r7, #16]
 8004c8c:	e03e      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004c8e:	4b23      	ldr	r3, [pc, #140]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 030c 	and.w	r3, r3, #12
 8004c96:	2b0c      	cmp	r3, #12
 8004c98:	d136      	bne.n	8004d08 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c9a:	4b20      	ldr	r3, [pc, #128]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	091b      	lsrs	r3, r3, #4
 8004caa:	f003 030f 	and.w	r3, r3, #15
 8004cae:	3301      	adds	r3, #1
 8004cb0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2b03      	cmp	r3, #3
 8004cb6:	d10c      	bne.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cb8:	4a19      	ldr	r2, [pc, #100]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc0:	4a16      	ldr	r2, [pc, #88]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cc2:	68d2      	ldr	r2, [r2, #12]
 8004cc4:	0a12      	lsrs	r2, r2, #8
 8004cc6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004cca:	fb02 f303 	mul.w	r3, r2, r3
 8004cce:	617b      	str	r3, [r7, #20]
      break;
 8004cd0:	e00c      	b.n	8004cec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cd2:	4a13      	ldr	r2, [pc, #76]	@ (8004d20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cda:	4a10      	ldr	r2, [pc, #64]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cdc:	68d2      	ldr	r2, [r2, #12]
 8004cde:	0a12      	lsrs	r2, r2, #8
 8004ce0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ce4:	fb02 f303 	mul.w	r3, r2, r3
 8004ce8:	617b      	str	r3, [r7, #20]
      break;
 8004cea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cec:	4b0b      	ldr	r3, [pc, #44]	@ (8004d1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	0e5b      	lsrs	r3, r3, #25
 8004cf2:	f003 0303 	and.w	r3, r3, #3
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d04:	613b      	str	r3, [r7, #16]
 8004d06:	e001      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004d0c:	693b      	ldr	r3, [r7, #16]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	371c      	adds	r7, #28
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	00f42400 	.word	0x00f42400

08004d24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d24:	b480      	push	{r7}
 8004d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d28:	4b03      	ldr	r3, [pc, #12]	@ (8004d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	20000010 	.word	0x20000010

08004d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d40:	f7ff fff0 	bl	8004d24 <HAL_RCC_GetHCLKFreq>
 8004d44:	4602      	mov	r2, r0
 8004d46:	4b06      	ldr	r3, [pc, #24]	@ (8004d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	0a1b      	lsrs	r3, r3, #8
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	4904      	ldr	r1, [pc, #16]	@ (8004d64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d52:	5ccb      	ldrb	r3, [r1, r3]
 8004d54:	f003 031f 	and.w	r3, r3, #31
 8004d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40021000 	.word	0x40021000
 8004d64:	0800bcb0 	.word	0x0800bcb0

08004d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d6c:	f7ff ffda 	bl	8004d24 <HAL_RCC_GetHCLKFreq>
 8004d70:	4602      	mov	r2, r0
 8004d72:	4b06      	ldr	r3, [pc, #24]	@ (8004d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	0adb      	lsrs	r3, r3, #11
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	4904      	ldr	r1, [pc, #16]	@ (8004d90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d7e:	5ccb      	ldrb	r3, [r1, r3]
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	0800bcb0 	.word	0x0800bcb0

08004d94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004e14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004da4:	4b1b      	ldr	r3, [pc, #108]	@ (8004e14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	091b      	lsrs	r3, r3, #4
 8004daa:	f003 030f 	and.w	r3, r3, #15
 8004dae:	3301      	adds	r3, #1
 8004db0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d10c      	bne.n	8004dd2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004db8:	4a17      	ldr	r2, [pc, #92]	@ (8004e18 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc0:	4a14      	ldr	r2, [pc, #80]	@ (8004e14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dc2:	68d2      	ldr	r2, [r2, #12]
 8004dc4:	0a12      	lsrs	r2, r2, #8
 8004dc6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004dca:	fb02 f303 	mul.w	r3, r2, r3
 8004dce:	617b      	str	r3, [r7, #20]
    break;
 8004dd0:	e00c      	b.n	8004dec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004dd2:	4a11      	ldr	r2, [pc, #68]	@ (8004e18 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dda:	4a0e      	ldr	r2, [pc, #56]	@ (8004e14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004ddc:	68d2      	ldr	r2, [r2, #12]
 8004dde:	0a12      	lsrs	r2, r2, #8
 8004de0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004de4:	fb02 f303 	mul.w	r3, r2, r3
 8004de8:	617b      	str	r3, [r7, #20]
    break;
 8004dea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004dec:	4b09      	ldr	r3, [pc, #36]	@ (8004e14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	0e5b      	lsrs	r3, r3, #25
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	3301      	adds	r3, #1
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e04:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004e06:	687b      	ldr	r3, [r7, #4]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	371c      	adds	r7, #28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	40021000 	.word	0x40021000
 8004e18:	00f42400 	.word	0x00f42400

08004e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e24:	2300      	movs	r3, #0
 8004e26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e28:	2300      	movs	r3, #0
 8004e2a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 8098 	beq.w	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e3e:	4b43      	ldr	r3, [pc, #268]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10d      	bne.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e4a:	4b40      	ldr	r3, [pc, #256]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e4e:	4a3f      	ldr	r2, [pc, #252]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e54:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e56:	4b3d      	ldr	r3, [pc, #244]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e5e:	60bb      	str	r3, [r7, #8]
 8004e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e62:	2301      	movs	r3, #1
 8004e64:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e66:	4b3a      	ldr	r3, [pc, #232]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a39      	ldr	r2, [pc, #228]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e72:	f7fd f929 	bl	80020c8 <HAL_GetTick>
 8004e76:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e78:	e009      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e7a:	f7fd f925 	bl	80020c8 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d902      	bls.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	74fb      	strb	r3, [r7, #19]
        break;
 8004e8c:	e005      	b.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004e8e:	4b30      	ldr	r3, [pc, #192]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0ef      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004e9a:	7cfb      	ldrb	r3, [r7, #19]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d159      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eaa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d01e      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d019      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ebc:	4b23      	ldr	r3, [pc, #140]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ec6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ec8:	4b20      	ldr	r3, [pc, #128]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ece:	4a1f      	ldr	r2, [pc, #124]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ede:	4a1b      	ldr	r2, [pc, #108]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ee8:	4a18      	ldr	r2, [pc, #96]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d016      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004efa:	f7fd f8e5 	bl	80020c8 <HAL_GetTick>
 8004efe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f00:	e00b      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f02:	f7fd f8e1 	bl	80020c8 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d902      	bls.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f14:	2303      	movs	r3, #3
 8004f16:	74fb      	strb	r3, [r7, #19]
            break;
 8004f18:	e006      	b.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d0ec      	beq.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f28:	7cfb      	ldrb	r3, [r7, #19]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10b      	bne.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f2e:	4b07      	ldr	r3, [pc, #28]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f3c:	4903      	ldr	r1, [pc, #12]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f44:	e008      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f46:	7cfb      	ldrb	r3, [r7, #19]
 8004f48:	74bb      	strb	r3, [r7, #18]
 8004f4a:	e005      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004f4c:	40021000 	.word	0x40021000
 8004f50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f54:	7cfb      	ldrb	r3, [r7, #19]
 8004f56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f58:	7c7b      	ldrb	r3, [r7, #17]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d105      	bne.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f5e:	4ba7      	ldr	r3, [pc, #668]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f62:	4aa6      	ldr	r2, [pc, #664]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f68:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f76:	4ba1      	ldr	r3, [pc, #644]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f7c:	f023 0203 	bic.w	r2, r3, #3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	499d      	ldr	r1, [pc, #628]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0302 	and.w	r3, r3, #2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f98:	4b98      	ldr	r3, [pc, #608]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f9e:	f023 020c 	bic.w	r2, r3, #12
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	4995      	ldr	r1, [pc, #596]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0304 	and.w	r3, r3, #4
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fba:	4b90      	ldr	r3, [pc, #576]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	498c      	ldr	r1, [pc, #560]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0308 	and.w	r3, r3, #8
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fdc:	4b87      	ldr	r3, [pc, #540]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	4984      	ldr	r1, [pc, #528]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0310 	and.w	r3, r3, #16
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ffe:	4b7f      	ldr	r3, [pc, #508]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005004:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	497b      	ldr	r1, [pc, #492]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0320 	and.w	r3, r3, #32
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005020:	4b76      	ldr	r3, [pc, #472]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005026:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	4973      	ldr	r1, [pc, #460]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005042:	4b6e      	ldr	r3, [pc, #440]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005048:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	496a      	ldr	r1, [pc, #424]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00a      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005064:	4b65      	ldr	r3, [pc, #404]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800506a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	4962      	ldr	r1, [pc, #392]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005074:	4313      	orrs	r3, r2
 8005076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005086:	4b5d      	ldr	r3, [pc, #372]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800508c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005094:	4959      	ldr	r1, [pc, #356]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005096:	4313      	orrs	r3, r2
 8005098:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00a      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050a8:	4b54      	ldr	r3, [pc, #336]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050ae:	f023 0203 	bic.w	r2, r3, #3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b6:	4951      	ldr	r1, [pc, #324]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050ca:	4b4c      	ldr	r3, [pc, #304]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d8:	4948      	ldr	r1, [pc, #288]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d015      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050ec:	4b43      	ldr	r3, [pc, #268]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050fa:	4940      	ldr	r1, [pc, #256]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005106:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800510a:	d105      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800510c:	4b3b      	ldr	r3, [pc, #236]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	4a3a      	ldr	r2, [pc, #232]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005112:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005116:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005120:	2b00      	cmp	r3, #0
 8005122:	d015      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005124:	4b35      	ldr	r3, [pc, #212]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800512a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005132:	4932      	ldr	r1, [pc, #200]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005134:	4313      	orrs	r3, r2
 8005136:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800513e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005142:	d105      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005144:	4b2d      	ldr	r3, [pc, #180]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	4a2c      	ldr	r2, [pc, #176]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800514a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800514e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d015      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800515c:	4b27      	ldr	r3, [pc, #156]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005162:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800516a:	4924      	ldr	r1, [pc, #144]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005176:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800517a:	d105      	bne.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800517c:	4b1f      	ldr	r3, [pc, #124]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	4a1e      	ldr	r2, [pc, #120]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005182:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005186:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d015      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005194:	4b19      	ldr	r3, [pc, #100]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800519a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a2:	4916      	ldr	r1, [pc, #88]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051b2:	d105      	bne.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051b4:	4b11      	ldr	r3, [pc, #68]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	4a10      	ldr	r2, [pc, #64]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051be:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d019      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051cc:	4b0b      	ldr	r3, [pc, #44]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051da:	4908      	ldr	r1, [pc, #32]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051ea:	d109      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051ec:	4b03      	ldr	r3, [pc, #12]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	4a02      	ldr	r2, [pc, #8]	@ (80051fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051f6:	60d3      	str	r3, [r2, #12]
 80051f8:	e002      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80051fa:	bf00      	nop
 80051fc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d015      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800520c:	4b29      	ldr	r3, [pc, #164]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005212:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800521a:	4926      	ldr	r1, [pc, #152]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800521c:	4313      	orrs	r3, r2
 800521e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005226:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800522a:	d105      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800522c:	4b21      	ldr	r3, [pc, #132]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	4a20      	ldr	r2, [pc, #128]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005236:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d015      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005244:	4b1b      	ldr	r3, [pc, #108]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800524a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005252:	4918      	ldr	r1, [pc, #96]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005254:	4313      	orrs	r3, r2
 8005256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800525e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005262:	d105      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005264:	4b13      	ldr	r3, [pc, #76]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	4a12      	ldr	r2, [pc, #72]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800526a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800526e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d015      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800527c:	4b0d      	ldr	r3, [pc, #52]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800527e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005282:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800528a:	490a      	ldr	r1, [pc, #40]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800528c:	4313      	orrs	r3, r2
 800528e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005296:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800529a:	d105      	bne.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800529c:	4b05      	ldr	r3, [pc, #20]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800529e:	68db      	ldr	r3, [r3, #12]
 80052a0:	4a04      	ldr	r2, [pc, #16]	@ (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80052a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	40021000 	.word	0x40021000

080052b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d101      	bne.n	80052ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e049      	b.n	800535e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d106      	bne.n	80052e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7fc fb8c 	bl	80019fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2202      	movs	r2, #2
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3304      	adds	r3, #4
 80052f4:	4619      	mov	r1, r3
 80052f6:	4610      	mov	r0, r2
 80052f8:	f000 fcd2 	bl	8005ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
	...

08005368 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b01      	cmp	r3, #1
 800537a:	d001      	beq.n	8005380 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e054      	b.n	800542a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a26      	ldr	r2, [pc, #152]	@ (8005438 <HAL_TIM_Base_Start_IT+0xd0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d022      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x80>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053aa:	d01d      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x80>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a22      	ldr	r2, [pc, #136]	@ (800543c <HAL_TIM_Base_Start_IT+0xd4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d018      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x80>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a21      	ldr	r2, [pc, #132]	@ (8005440 <HAL_TIM_Base_Start_IT+0xd8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d013      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x80>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a1f      	ldr	r2, [pc, #124]	@ (8005444 <HAL_TIM_Base_Start_IT+0xdc>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d00e      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x80>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a1e      	ldr	r2, [pc, #120]	@ (8005448 <HAL_TIM_Base_Start_IT+0xe0>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d009      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x80>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1c      	ldr	r2, [pc, #112]	@ (800544c <HAL_TIM_Base_Start_IT+0xe4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d004      	beq.n	80053e8 <HAL_TIM_Base_Start_IT+0x80>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005450 <HAL_TIM_Base_Start_IT+0xe8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d115      	bne.n	8005414 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689a      	ldr	r2, [r3, #8]
 80053ee:	4b19      	ldr	r3, [pc, #100]	@ (8005454 <HAL_TIM_Base_Start_IT+0xec>)
 80053f0:	4013      	ands	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b06      	cmp	r3, #6
 80053f8:	d015      	beq.n	8005426 <HAL_TIM_Base_Start_IT+0xbe>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005400:	d011      	beq.n	8005426 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 0201 	orr.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005412:	e008      	b.n	8005426 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	e000      	b.n	8005428 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005426:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	40012c00 	.word	0x40012c00
 800543c:	40000400 	.word	0x40000400
 8005440:	40000800 	.word	0x40000800
 8005444:	40000c00 	.word	0x40000c00
 8005448:	40013400 	.word	0x40013400
 800544c:	40014000 	.word	0x40014000
 8005450:	40015000 	.word	0x40015000
 8005454:	00010007 	.word	0x00010007

08005458 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f022 0201 	bic.w	r2, r2, #1
 800546e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6a1a      	ldr	r2, [r3, #32]
 8005476:	f241 1311 	movw	r3, #4369	@ 0x1111
 800547a:	4013      	ands	r3, r2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10f      	bne.n	80054a0 <HAL_TIM_Base_Stop_IT+0x48>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6a1a      	ldr	r2, [r3, #32]
 8005486:	f244 4344 	movw	r3, #17476	@ 0x4444
 800548a:	4013      	ands	r3, r2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d107      	bne.n	80054a0 <HAL_TIM_Base_Stop_IT+0x48>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f022 0201 	bic.w	r2, r2, #1
 800549e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b082      	sub	sp, #8
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e049      	b.n	800555c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d106      	bne.n	80054e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f7fc f9e3 	bl	80018a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2202      	movs	r2, #2
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3304      	adds	r3, #4
 80054f2:	4619      	mov	r1, r3
 80054f4:	4610      	mov	r0, r2
 80054f6:	f000 fbd3 	bl	8005ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3708      	adds	r7, #8
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d109      	bne.n	8005588 <HAL_TIM_PWM_Start+0x24>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b01      	cmp	r3, #1
 800557e:	bf14      	ite	ne
 8005580:	2301      	movne	r3, #1
 8005582:	2300      	moveq	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	e03c      	b.n	8005602 <HAL_TIM_PWM_Start+0x9e>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	2b04      	cmp	r3, #4
 800558c:	d109      	bne.n	80055a2 <HAL_TIM_PWM_Start+0x3e>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b01      	cmp	r3, #1
 8005598:	bf14      	ite	ne
 800559a:	2301      	movne	r3, #1
 800559c:	2300      	moveq	r3, #0
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	e02f      	b.n	8005602 <HAL_TIM_PWM_Start+0x9e>
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b08      	cmp	r3, #8
 80055a6:	d109      	bne.n	80055bc <HAL_TIM_PWM_Start+0x58>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	bf14      	ite	ne
 80055b4:	2301      	movne	r3, #1
 80055b6:	2300      	moveq	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	e022      	b.n	8005602 <HAL_TIM_PWM_Start+0x9e>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b0c      	cmp	r3, #12
 80055c0:	d109      	bne.n	80055d6 <HAL_TIM_PWM_Start+0x72>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	bf14      	ite	ne
 80055ce:	2301      	movne	r3, #1
 80055d0:	2300      	moveq	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	e015      	b.n	8005602 <HAL_TIM_PWM_Start+0x9e>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b10      	cmp	r3, #16
 80055da:	d109      	bne.n	80055f0 <HAL_TIM_PWM_Start+0x8c>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	bf14      	ite	ne
 80055e8:	2301      	movne	r3, #1
 80055ea:	2300      	moveq	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	e008      	b.n	8005602 <HAL_TIM_PWM_Start+0x9e>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	bf14      	ite	ne
 80055fc:	2301      	movne	r3, #1
 80055fe:	2300      	moveq	r3, #0
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e0a6      	b.n	8005758 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d104      	bne.n	800561a <HAL_TIM_PWM_Start+0xb6>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2202      	movs	r2, #2
 8005614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005618:	e023      	b.n	8005662 <HAL_TIM_PWM_Start+0xfe>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b04      	cmp	r3, #4
 800561e:	d104      	bne.n	800562a <HAL_TIM_PWM_Start+0xc6>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005628:	e01b      	b.n	8005662 <HAL_TIM_PWM_Start+0xfe>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b08      	cmp	r3, #8
 800562e:	d104      	bne.n	800563a <HAL_TIM_PWM_Start+0xd6>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2202      	movs	r2, #2
 8005634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005638:	e013      	b.n	8005662 <HAL_TIM_PWM_Start+0xfe>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b0c      	cmp	r3, #12
 800563e:	d104      	bne.n	800564a <HAL_TIM_PWM_Start+0xe6>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005648:	e00b      	b.n	8005662 <HAL_TIM_PWM_Start+0xfe>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	2b10      	cmp	r3, #16
 800564e:	d104      	bne.n	800565a <HAL_TIM_PWM_Start+0xf6>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2202      	movs	r2, #2
 8005654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005658:	e003      	b.n	8005662 <HAL_TIM_PWM_Start+0xfe>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2202      	movs	r2, #2
 800565e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2201      	movs	r2, #1
 8005668:	6839      	ldr	r1, [r7, #0]
 800566a:	4618      	mov	r0, r3
 800566c:	f000 fef6 	bl	800645c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a3a      	ldr	r2, [pc, #232]	@ (8005760 <HAL_TIM_PWM_Start+0x1fc>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d018      	beq.n	80056ac <HAL_TIM_PWM_Start+0x148>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a39      	ldr	r2, [pc, #228]	@ (8005764 <HAL_TIM_PWM_Start+0x200>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d013      	beq.n	80056ac <HAL_TIM_PWM_Start+0x148>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a37      	ldr	r2, [pc, #220]	@ (8005768 <HAL_TIM_PWM_Start+0x204>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00e      	beq.n	80056ac <HAL_TIM_PWM_Start+0x148>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a36      	ldr	r2, [pc, #216]	@ (800576c <HAL_TIM_PWM_Start+0x208>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d009      	beq.n	80056ac <HAL_TIM_PWM_Start+0x148>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a34      	ldr	r2, [pc, #208]	@ (8005770 <HAL_TIM_PWM_Start+0x20c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d004      	beq.n	80056ac <HAL_TIM_PWM_Start+0x148>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a33      	ldr	r2, [pc, #204]	@ (8005774 <HAL_TIM_PWM_Start+0x210>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d101      	bne.n	80056b0 <HAL_TIM_PWM_Start+0x14c>
 80056ac:	2301      	movs	r3, #1
 80056ae:	e000      	b.n	80056b2 <HAL_TIM_PWM_Start+0x14e>
 80056b0:	2300      	movs	r3, #0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d007      	beq.n	80056c6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a25      	ldr	r2, [pc, #148]	@ (8005760 <HAL_TIM_PWM_Start+0x1fc>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d022      	beq.n	8005716 <HAL_TIM_PWM_Start+0x1b2>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056d8:	d01d      	beq.n	8005716 <HAL_TIM_PWM_Start+0x1b2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a26      	ldr	r2, [pc, #152]	@ (8005778 <HAL_TIM_PWM_Start+0x214>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d018      	beq.n	8005716 <HAL_TIM_PWM_Start+0x1b2>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a24      	ldr	r2, [pc, #144]	@ (800577c <HAL_TIM_PWM_Start+0x218>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d013      	beq.n	8005716 <HAL_TIM_PWM_Start+0x1b2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a23      	ldr	r2, [pc, #140]	@ (8005780 <HAL_TIM_PWM_Start+0x21c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d00e      	beq.n	8005716 <HAL_TIM_PWM_Start+0x1b2>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a19      	ldr	r2, [pc, #100]	@ (8005764 <HAL_TIM_PWM_Start+0x200>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d009      	beq.n	8005716 <HAL_TIM_PWM_Start+0x1b2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a18      	ldr	r2, [pc, #96]	@ (8005768 <HAL_TIM_PWM_Start+0x204>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d004      	beq.n	8005716 <HAL_TIM_PWM_Start+0x1b2>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a18      	ldr	r2, [pc, #96]	@ (8005774 <HAL_TIM_PWM_Start+0x210>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d115      	bne.n	8005742 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689a      	ldr	r2, [r3, #8]
 800571c:	4b19      	ldr	r3, [pc, #100]	@ (8005784 <HAL_TIM_PWM_Start+0x220>)
 800571e:	4013      	ands	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2b06      	cmp	r3, #6
 8005726:	d015      	beq.n	8005754 <HAL_TIM_PWM_Start+0x1f0>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800572e:	d011      	beq.n	8005754 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0201 	orr.w	r2, r2, #1
 800573e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005740:	e008      	b.n	8005754 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f042 0201 	orr.w	r2, r2, #1
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	e000      	b.n	8005756 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005754:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40012c00 	.word	0x40012c00
 8005764:	40013400 	.word	0x40013400
 8005768:	40014000 	.word	0x40014000
 800576c:	40014400 	.word	0x40014400
 8005770:	40014800 	.word	0x40014800
 8005774:	40015000 	.word	0x40015000
 8005778:	40000400 	.word	0x40000400
 800577c:	40000800 	.word	0x40000800
 8005780:	40000c00 	.word	0x40000c00
 8005784:	00010007 	.word	0x00010007

08005788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d020      	beq.n	80057ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d01b      	beq.n	80057ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f06f 0202 	mvn.w	r2, #2
 80057bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 fa46 	bl	8005c64 <HAL_TIM_IC_CaptureCallback>
 80057d8:	e005      	b.n	80057e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 fa38 	bl	8005c50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 fa49 	bl	8005c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f003 0304 	and.w	r3, r3, #4
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d020      	beq.n	8005838 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d01b      	beq.n	8005838 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f06f 0204 	mvn.w	r2, #4
 8005808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2202      	movs	r2, #2
 800580e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fa20 	bl	8005c64 <HAL_TIM_IC_CaptureCallback>
 8005824:	e005      	b.n	8005832 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 fa12 	bl	8005c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fa23 	bl	8005c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	f003 0308 	and.w	r3, r3, #8
 800583e:	2b00      	cmp	r3, #0
 8005840:	d020      	beq.n	8005884 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f003 0308 	and.w	r3, r3, #8
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01b      	beq.n	8005884 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f06f 0208 	mvn.w	r2, #8
 8005854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2204      	movs	r2, #4
 800585a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	f003 0303 	and.w	r3, r3, #3
 8005866:	2b00      	cmp	r3, #0
 8005868:	d003      	beq.n	8005872 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 f9fa 	bl	8005c64 <HAL_TIM_IC_CaptureCallback>
 8005870:	e005      	b.n	800587e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f9ec 	bl	8005c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f9fd 	bl	8005c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	f003 0310 	and.w	r3, r3, #16
 800588a:	2b00      	cmp	r3, #0
 800588c:	d020      	beq.n	80058d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f003 0310 	and.w	r3, r3, #16
 8005894:	2b00      	cmp	r3, #0
 8005896:	d01b      	beq.n	80058d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f06f 0210 	mvn.w	r2, #16
 80058a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2208      	movs	r2, #8
 80058a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f9d4 	bl	8005c64 <HAL_TIM_IC_CaptureCallback>
 80058bc:	e005      	b.n	80058ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 f9c6 	bl	8005c50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f9d7 	bl	8005c78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00c      	beq.n	80058f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d007      	beq.n	80058f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0201 	mvn.w	r2, #1
 80058ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fb feca 	bl	8001688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d104      	bne.n	8005908 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00c      	beq.n	8005922 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800590e:	2b00      	cmp	r3, #0
 8005910:	d007      	beq.n	8005922 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800591a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fef7 	bl	8006710 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00c      	beq.n	8005946 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005932:	2b00      	cmp	r3, #0
 8005934:	d007      	beq.n	8005946 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800593e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 feef 	bl	8006724 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00c      	beq.n	800596a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005956:	2b00      	cmp	r3, #0
 8005958:	d007      	beq.n	800596a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f000 f991 	bl	8005c8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f003 0320 	and.w	r3, r3, #32
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00c      	beq.n	800598e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f003 0320 	and.w	r3, r3, #32
 800597a:	2b00      	cmp	r3, #0
 800597c:	d007      	beq.n	800598e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f06f 0220 	mvn.w	r2, #32
 8005986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 feb7 	bl	80066fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00c      	beq.n	80059b2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d007      	beq.n	80059b2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80059aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 fec3 	bl	8006738 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00c      	beq.n	80059d6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d007      	beq.n	80059d6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80059ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 febb 	bl	800674c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00c      	beq.n	80059fa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d007      	beq.n	80059fa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80059f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 feb3 	bl	8006760 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00c      	beq.n	8005a1e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d007      	beq.n	8005a1e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 feab 	bl	8006774 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a1e:	bf00      	nop
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a34:	2300      	movs	r3, #0
 8005a36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a42:	2302      	movs	r3, #2
 8005a44:	e0ff      	b.n	8005c46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b14      	cmp	r3, #20
 8005a52:	f200 80f0 	bhi.w	8005c36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005a56:	a201      	add	r2, pc, #4	@ (adr r2, 8005a5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5c:	08005ab1 	.word	0x08005ab1
 8005a60:	08005c37 	.word	0x08005c37
 8005a64:	08005c37 	.word	0x08005c37
 8005a68:	08005c37 	.word	0x08005c37
 8005a6c:	08005af1 	.word	0x08005af1
 8005a70:	08005c37 	.word	0x08005c37
 8005a74:	08005c37 	.word	0x08005c37
 8005a78:	08005c37 	.word	0x08005c37
 8005a7c:	08005b33 	.word	0x08005b33
 8005a80:	08005c37 	.word	0x08005c37
 8005a84:	08005c37 	.word	0x08005c37
 8005a88:	08005c37 	.word	0x08005c37
 8005a8c:	08005b73 	.word	0x08005b73
 8005a90:	08005c37 	.word	0x08005c37
 8005a94:	08005c37 	.word	0x08005c37
 8005a98:	08005c37 	.word	0x08005c37
 8005a9c:	08005bb5 	.word	0x08005bb5
 8005aa0:	08005c37 	.word	0x08005c37
 8005aa4:	08005c37 	.word	0x08005c37
 8005aa8:	08005c37 	.word	0x08005c37
 8005aac:	08005bf5 	.word	0x08005bf5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68b9      	ldr	r1, [r7, #8]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 f9a6 	bl	8005e08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0208 	orr.w	r2, r2, #8
 8005aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 0204 	bic.w	r2, r2, #4
 8005ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6999      	ldr	r1, [r3, #24]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	691a      	ldr	r2, [r3, #16]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	619a      	str	r2, [r3, #24]
      break;
 8005aee:	e0a5      	b.n	8005c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fa20 	bl	8005f3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6999      	ldr	r1, [r3, #24]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	021a      	lsls	r2, r3, #8
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	619a      	str	r2, [r3, #24]
      break;
 8005b30:	e084      	b.n	8005c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fa93 	bl	8006064 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69da      	ldr	r2, [r3, #28]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f042 0208 	orr.w	r2, r2, #8
 8005b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69da      	ldr	r2, [r3, #28]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0204 	bic.w	r2, r2, #4
 8005b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69d9      	ldr	r1, [r3, #28]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	61da      	str	r2, [r3, #28]
      break;
 8005b70:	e064      	b.n	8005c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68b9      	ldr	r1, [r7, #8]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 fb05 	bl	8006188 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69da      	ldr	r2, [r3, #28]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69da      	ldr	r2, [r3, #28]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69d9      	ldr	r1, [r3, #28]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	021a      	lsls	r2, r3, #8
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	61da      	str	r2, [r3, #28]
      break;
 8005bb2:	e043      	b.n	8005c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68b9      	ldr	r1, [r7, #8]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 fb78 	bl	80062b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0208 	orr.w	r2, r2, #8
 8005bce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 0204 	bic.w	r2, r2, #4
 8005bde:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	691a      	ldr	r2, [r3, #16]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005bf2:	e023      	b.n	8005c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68b9      	ldr	r1, [r7, #8]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 fbc2 	bl	8006384 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c0e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c1e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	021a      	lsls	r2, r3, #8
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005c34:	e002      	b.n	8005c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	75fb      	strb	r3, [r7, #23]
      break;
 8005c3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop

08005c50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a4c      	ldr	r2, [pc, #304]	@ (8005de4 <TIM_Base_SetConfig+0x144>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d017      	beq.n	8005ce8 <TIM_Base_SetConfig+0x48>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cbe:	d013      	beq.n	8005ce8 <TIM_Base_SetConfig+0x48>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a49      	ldr	r2, [pc, #292]	@ (8005de8 <TIM_Base_SetConfig+0x148>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00f      	beq.n	8005ce8 <TIM_Base_SetConfig+0x48>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a48      	ldr	r2, [pc, #288]	@ (8005dec <TIM_Base_SetConfig+0x14c>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00b      	beq.n	8005ce8 <TIM_Base_SetConfig+0x48>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a47      	ldr	r2, [pc, #284]	@ (8005df0 <TIM_Base_SetConfig+0x150>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d007      	beq.n	8005ce8 <TIM_Base_SetConfig+0x48>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a46      	ldr	r2, [pc, #280]	@ (8005df4 <TIM_Base_SetConfig+0x154>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d003      	beq.n	8005ce8 <TIM_Base_SetConfig+0x48>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a45      	ldr	r2, [pc, #276]	@ (8005df8 <TIM_Base_SetConfig+0x158>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d108      	bne.n	8005cfa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4a39      	ldr	r2, [pc, #228]	@ (8005de4 <TIM_Base_SetConfig+0x144>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d023      	beq.n	8005d4a <TIM_Base_SetConfig+0xaa>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d08:	d01f      	beq.n	8005d4a <TIM_Base_SetConfig+0xaa>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4a36      	ldr	r2, [pc, #216]	@ (8005de8 <TIM_Base_SetConfig+0x148>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d01b      	beq.n	8005d4a <TIM_Base_SetConfig+0xaa>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a35      	ldr	r2, [pc, #212]	@ (8005dec <TIM_Base_SetConfig+0x14c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d017      	beq.n	8005d4a <TIM_Base_SetConfig+0xaa>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a34      	ldr	r2, [pc, #208]	@ (8005df0 <TIM_Base_SetConfig+0x150>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d013      	beq.n	8005d4a <TIM_Base_SetConfig+0xaa>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a33      	ldr	r2, [pc, #204]	@ (8005df4 <TIM_Base_SetConfig+0x154>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d00f      	beq.n	8005d4a <TIM_Base_SetConfig+0xaa>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a33      	ldr	r2, [pc, #204]	@ (8005dfc <TIM_Base_SetConfig+0x15c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d00b      	beq.n	8005d4a <TIM_Base_SetConfig+0xaa>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a32      	ldr	r2, [pc, #200]	@ (8005e00 <TIM_Base_SetConfig+0x160>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d007      	beq.n	8005d4a <TIM_Base_SetConfig+0xaa>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a31      	ldr	r2, [pc, #196]	@ (8005e04 <TIM_Base_SetConfig+0x164>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d003      	beq.n	8005d4a <TIM_Base_SetConfig+0xaa>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a2c      	ldr	r2, [pc, #176]	@ (8005df8 <TIM_Base_SetConfig+0x158>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d108      	bne.n	8005d5c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	695b      	ldr	r3, [r3, #20]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a18      	ldr	r2, [pc, #96]	@ (8005de4 <TIM_Base_SetConfig+0x144>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d013      	beq.n	8005db0 <TIM_Base_SetConfig+0x110>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a1a      	ldr	r2, [pc, #104]	@ (8005df4 <TIM_Base_SetConfig+0x154>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d00f      	beq.n	8005db0 <TIM_Base_SetConfig+0x110>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a1a      	ldr	r2, [pc, #104]	@ (8005dfc <TIM_Base_SetConfig+0x15c>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00b      	beq.n	8005db0 <TIM_Base_SetConfig+0x110>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a19      	ldr	r2, [pc, #100]	@ (8005e00 <TIM_Base_SetConfig+0x160>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d007      	beq.n	8005db0 <TIM_Base_SetConfig+0x110>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a18      	ldr	r2, [pc, #96]	@ (8005e04 <TIM_Base_SetConfig+0x164>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d003      	beq.n	8005db0 <TIM_Base_SetConfig+0x110>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a13      	ldr	r2, [pc, #76]	@ (8005df8 <TIM_Base_SetConfig+0x158>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d103      	bne.n	8005db8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	691a      	ldr	r2, [r3, #16]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d105      	bne.n	8005dd6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	f023 0201 	bic.w	r2, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	611a      	str	r2, [r3, #16]
  }
}
 8005dd6:	bf00      	nop
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	40012c00 	.word	0x40012c00
 8005de8:	40000400 	.word	0x40000400
 8005dec:	40000800 	.word	0x40000800
 8005df0:	40000c00 	.word	0x40000c00
 8005df4:	40013400 	.word	0x40013400
 8005df8:	40015000 	.word	0x40015000
 8005dfc:	40014000 	.word	0x40014000
 8005e00:	40014400 	.word	0x40014400
 8005e04:	40014800 	.word	0x40014800

08005e08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b087      	sub	sp, #28
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a1b      	ldr	r3, [r3, #32]
 8005e16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	f023 0201 	bic.w	r2, r3, #1
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0303 	bic.w	r3, r3, #3
 8005e42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f023 0302 	bic.w	r3, r3, #2
 8005e54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a30      	ldr	r2, [pc, #192]	@ (8005f24 <TIM_OC1_SetConfig+0x11c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d013      	beq.n	8005e90 <TIM_OC1_SetConfig+0x88>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a2f      	ldr	r2, [pc, #188]	@ (8005f28 <TIM_OC1_SetConfig+0x120>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00f      	beq.n	8005e90 <TIM_OC1_SetConfig+0x88>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a2e      	ldr	r2, [pc, #184]	@ (8005f2c <TIM_OC1_SetConfig+0x124>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00b      	beq.n	8005e90 <TIM_OC1_SetConfig+0x88>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a2d      	ldr	r2, [pc, #180]	@ (8005f30 <TIM_OC1_SetConfig+0x128>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d007      	beq.n	8005e90 <TIM_OC1_SetConfig+0x88>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a2c      	ldr	r2, [pc, #176]	@ (8005f34 <TIM_OC1_SetConfig+0x12c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d003      	beq.n	8005e90 <TIM_OC1_SetConfig+0x88>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a2b      	ldr	r2, [pc, #172]	@ (8005f38 <TIM_OC1_SetConfig+0x130>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d10c      	bne.n	8005eaa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f023 0308 	bic.w	r3, r3, #8
 8005e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	697a      	ldr	r2, [r7, #20]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f023 0304 	bic.w	r3, r3, #4
 8005ea8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a1d      	ldr	r2, [pc, #116]	@ (8005f24 <TIM_OC1_SetConfig+0x11c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d013      	beq.n	8005eda <TIM_OC1_SetConfig+0xd2>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a1c      	ldr	r2, [pc, #112]	@ (8005f28 <TIM_OC1_SetConfig+0x120>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d00f      	beq.n	8005eda <TIM_OC1_SetConfig+0xd2>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8005f2c <TIM_OC1_SetConfig+0x124>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d00b      	beq.n	8005eda <TIM_OC1_SetConfig+0xd2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a1a      	ldr	r2, [pc, #104]	@ (8005f30 <TIM_OC1_SetConfig+0x128>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d007      	beq.n	8005eda <TIM_OC1_SetConfig+0xd2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a19      	ldr	r2, [pc, #100]	@ (8005f34 <TIM_OC1_SetConfig+0x12c>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d003      	beq.n	8005eda <TIM_OC1_SetConfig+0xd2>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a18      	ldr	r2, [pc, #96]	@ (8005f38 <TIM_OC1_SetConfig+0x130>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d111      	bne.n	8005efe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	693a      	ldr	r2, [r7, #16]
 8005f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	621a      	str	r2, [r3, #32]
}
 8005f18:	bf00      	nop
 8005f1a:	371c      	adds	r7, #28
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	40012c00 	.word	0x40012c00
 8005f28:	40013400 	.word	0x40013400
 8005f2c:	40014000 	.word	0x40014000
 8005f30:	40014400 	.word	0x40014400
 8005f34:	40014800 	.word	0x40014800
 8005f38:	40015000 	.word	0x40015000

08005f3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b087      	sub	sp, #28
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
 8005f4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	f023 0210 	bic.w	r2, r3, #16
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	021b      	lsls	r3, r3, #8
 8005f7e:	68fa      	ldr	r2, [r7, #12]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f023 0320 	bic.w	r3, r3, #32
 8005f8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	011b      	lsls	r3, r3, #4
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a2c      	ldr	r2, [pc, #176]	@ (800604c <TIM_OC2_SetConfig+0x110>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d007      	beq.n	8005fb0 <TIM_OC2_SetConfig+0x74>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a2b      	ldr	r2, [pc, #172]	@ (8006050 <TIM_OC2_SetConfig+0x114>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d003      	beq.n	8005fb0 <TIM_OC2_SetConfig+0x74>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a2a      	ldr	r2, [pc, #168]	@ (8006054 <TIM_OC2_SetConfig+0x118>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d10d      	bne.n	8005fcc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	697a      	ldr	r2, [r7, #20]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a1f      	ldr	r2, [pc, #124]	@ (800604c <TIM_OC2_SetConfig+0x110>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d013      	beq.n	8005ffc <TIM_OC2_SetConfig+0xc0>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8006050 <TIM_OC2_SetConfig+0x114>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00f      	beq.n	8005ffc <TIM_OC2_SetConfig+0xc0>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a1e      	ldr	r2, [pc, #120]	@ (8006058 <TIM_OC2_SetConfig+0x11c>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d00b      	beq.n	8005ffc <TIM_OC2_SetConfig+0xc0>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a1d      	ldr	r2, [pc, #116]	@ (800605c <TIM_OC2_SetConfig+0x120>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d007      	beq.n	8005ffc <TIM_OC2_SetConfig+0xc0>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a1c      	ldr	r2, [pc, #112]	@ (8006060 <TIM_OC2_SetConfig+0x124>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d003      	beq.n	8005ffc <TIM_OC2_SetConfig+0xc0>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a17      	ldr	r2, [pc, #92]	@ (8006054 <TIM_OC2_SetConfig+0x118>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d113      	bne.n	8006024 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006002:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800600a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	693a      	ldr	r2, [r7, #16]
 8006014:	4313      	orrs	r3, r2
 8006016:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	4313      	orrs	r3, r2
 8006022:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685a      	ldr	r2, [r3, #4]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	621a      	str	r2, [r3, #32]
}
 800603e:	bf00      	nop
 8006040:	371c      	adds	r7, #28
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	40012c00 	.word	0x40012c00
 8006050:	40013400 	.word	0x40013400
 8006054:	40015000 	.word	0x40015000
 8006058:	40014000 	.word	0x40014000
 800605c:	40014400 	.word	0x40014400
 8006060:	40014800 	.word	0x40014800

08006064 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f023 0303 	bic.w	r3, r3, #3
 800609e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	021b      	lsls	r3, r3, #8
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a2b      	ldr	r2, [pc, #172]	@ (8006170 <TIM_OC3_SetConfig+0x10c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d007      	beq.n	80060d6 <TIM_OC3_SetConfig+0x72>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a2a      	ldr	r2, [pc, #168]	@ (8006174 <TIM_OC3_SetConfig+0x110>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d003      	beq.n	80060d6 <TIM_OC3_SetConfig+0x72>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a29      	ldr	r2, [pc, #164]	@ (8006178 <TIM_OC3_SetConfig+0x114>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d10d      	bne.n	80060f2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	021b      	lsls	r3, r3, #8
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80060f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a1e      	ldr	r2, [pc, #120]	@ (8006170 <TIM_OC3_SetConfig+0x10c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d013      	beq.n	8006122 <TIM_OC3_SetConfig+0xbe>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006174 <TIM_OC3_SetConfig+0x110>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00f      	beq.n	8006122 <TIM_OC3_SetConfig+0xbe>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a1d      	ldr	r2, [pc, #116]	@ (800617c <TIM_OC3_SetConfig+0x118>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d00b      	beq.n	8006122 <TIM_OC3_SetConfig+0xbe>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a1c      	ldr	r2, [pc, #112]	@ (8006180 <TIM_OC3_SetConfig+0x11c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d007      	beq.n	8006122 <TIM_OC3_SetConfig+0xbe>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a1b      	ldr	r2, [pc, #108]	@ (8006184 <TIM_OC3_SetConfig+0x120>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d003      	beq.n	8006122 <TIM_OC3_SetConfig+0xbe>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a16      	ldr	r2, [pc, #88]	@ (8006178 <TIM_OC3_SetConfig+0x114>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d113      	bne.n	800614a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006128:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006130:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	011b      	lsls	r3, r3, #4
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	4313      	orrs	r3, r2
 800613c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	011b      	lsls	r3, r3, #4
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	621a      	str	r2, [r3, #32]
}
 8006164:	bf00      	nop
 8006166:	371c      	adds	r7, #28
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	40012c00 	.word	0x40012c00
 8006174:	40013400 	.word	0x40013400
 8006178:	40015000 	.word	0x40015000
 800617c:	40014000 	.word	0x40014000
 8006180:	40014400 	.word	0x40014400
 8006184:	40014800 	.word	0x40014800

08006188 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006188:	b480      	push	{r7}
 800618a:	b087      	sub	sp, #28
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80061b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	021b      	lsls	r3, r3, #8
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	031b      	lsls	r3, r3, #12
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a2c      	ldr	r2, [pc, #176]	@ (8006298 <TIM_OC4_SetConfig+0x110>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d007      	beq.n	80061fc <TIM_OC4_SetConfig+0x74>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a2b      	ldr	r2, [pc, #172]	@ (800629c <TIM_OC4_SetConfig+0x114>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d003      	beq.n	80061fc <TIM_OC4_SetConfig+0x74>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a2a      	ldr	r2, [pc, #168]	@ (80062a0 <TIM_OC4_SetConfig+0x118>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d10d      	bne.n	8006218 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	031b      	lsls	r3, r3, #12
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	4313      	orrs	r3, r2
 800620e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006216:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a1f      	ldr	r2, [pc, #124]	@ (8006298 <TIM_OC4_SetConfig+0x110>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d013      	beq.n	8006248 <TIM_OC4_SetConfig+0xc0>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a1e      	ldr	r2, [pc, #120]	@ (800629c <TIM_OC4_SetConfig+0x114>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d00f      	beq.n	8006248 <TIM_OC4_SetConfig+0xc0>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a1e      	ldr	r2, [pc, #120]	@ (80062a4 <TIM_OC4_SetConfig+0x11c>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d00b      	beq.n	8006248 <TIM_OC4_SetConfig+0xc0>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a1d      	ldr	r2, [pc, #116]	@ (80062a8 <TIM_OC4_SetConfig+0x120>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d007      	beq.n	8006248 <TIM_OC4_SetConfig+0xc0>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a1c      	ldr	r2, [pc, #112]	@ (80062ac <TIM_OC4_SetConfig+0x124>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d003      	beq.n	8006248 <TIM_OC4_SetConfig+0xc0>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a17      	ldr	r2, [pc, #92]	@ (80062a0 <TIM_OC4_SetConfig+0x118>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d113      	bne.n	8006270 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800624e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006256:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	695b      	ldr	r3, [r3, #20]
 800625c:	019b      	lsls	r3, r3, #6
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	4313      	orrs	r3, r2
 8006262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	019b      	lsls	r3, r3, #6
 800626a:	693a      	ldr	r2, [r7, #16]
 800626c:	4313      	orrs	r3, r2
 800626e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	621a      	str	r2, [r3, #32]
}
 800628a:	bf00      	nop
 800628c:	371c      	adds	r7, #28
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	40012c00 	.word	0x40012c00
 800629c:	40013400 	.word	0x40013400
 80062a0:	40015000 	.word	0x40015000
 80062a4:	40014000 	.word	0x40014000
 80062a8:	40014400 	.word	0x40014400
 80062ac:	40014800 	.word	0x40014800

080062b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a1b      	ldr	r3, [r3, #32]
 80062c4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80062de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80062f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	041b      	lsls	r3, r3, #16
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	4313      	orrs	r3, r2
 8006300:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a19      	ldr	r2, [pc, #100]	@ (800636c <TIM_OC5_SetConfig+0xbc>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d013      	beq.n	8006332 <TIM_OC5_SetConfig+0x82>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a18      	ldr	r2, [pc, #96]	@ (8006370 <TIM_OC5_SetConfig+0xc0>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d00f      	beq.n	8006332 <TIM_OC5_SetConfig+0x82>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a17      	ldr	r2, [pc, #92]	@ (8006374 <TIM_OC5_SetConfig+0xc4>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d00b      	beq.n	8006332 <TIM_OC5_SetConfig+0x82>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a16      	ldr	r2, [pc, #88]	@ (8006378 <TIM_OC5_SetConfig+0xc8>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d007      	beq.n	8006332 <TIM_OC5_SetConfig+0x82>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a15      	ldr	r2, [pc, #84]	@ (800637c <TIM_OC5_SetConfig+0xcc>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d003      	beq.n	8006332 <TIM_OC5_SetConfig+0x82>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a14      	ldr	r2, [pc, #80]	@ (8006380 <TIM_OC5_SetConfig+0xd0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d109      	bne.n	8006346 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006338:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	021b      	lsls	r3, r3, #8
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	621a      	str	r2, [r3, #32]
}
 8006360:	bf00      	nop
 8006362:	371c      	adds	r7, #28
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	40012c00 	.word	0x40012c00
 8006370:	40013400 	.word	0x40013400
 8006374:	40014000 	.word	0x40014000
 8006378:	40014400 	.word	0x40014400
 800637c:	40014800 	.word	0x40014800
 8006380:	40015000 	.word	0x40015000

08006384 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80063b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80063ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	051b      	lsls	r3, r3, #20
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a1a      	ldr	r2, [pc, #104]	@ (8006444 <TIM_OC6_SetConfig+0xc0>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d013      	beq.n	8006408 <TIM_OC6_SetConfig+0x84>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a19      	ldr	r2, [pc, #100]	@ (8006448 <TIM_OC6_SetConfig+0xc4>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00f      	beq.n	8006408 <TIM_OC6_SetConfig+0x84>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a18      	ldr	r2, [pc, #96]	@ (800644c <TIM_OC6_SetConfig+0xc8>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d00b      	beq.n	8006408 <TIM_OC6_SetConfig+0x84>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a17      	ldr	r2, [pc, #92]	@ (8006450 <TIM_OC6_SetConfig+0xcc>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d007      	beq.n	8006408 <TIM_OC6_SetConfig+0x84>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a16      	ldr	r2, [pc, #88]	@ (8006454 <TIM_OC6_SetConfig+0xd0>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d003      	beq.n	8006408 <TIM_OC6_SetConfig+0x84>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a15      	ldr	r2, [pc, #84]	@ (8006458 <TIM_OC6_SetConfig+0xd4>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d109      	bne.n	800641c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800640e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	029b      	lsls	r3, r3, #10
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	621a      	str	r2, [r3, #32]
}
 8006436:	bf00      	nop
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	40012c00 	.word	0x40012c00
 8006448:	40013400 	.word	0x40013400
 800644c:	40014000 	.word	0x40014000
 8006450:	40014400 	.word	0x40014400
 8006454:	40014800 	.word	0x40014800
 8006458:	40015000 	.word	0x40015000

0800645c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	f003 031f 	and.w	r3, r3, #31
 800646e:	2201      	movs	r2, #1
 8006470:	fa02 f303 	lsl.w	r3, r2, r3
 8006474:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6a1a      	ldr	r2, [r3, #32]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	43db      	mvns	r3, r3
 800647e:	401a      	ands	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6a1a      	ldr	r2, [r3, #32]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	f003 031f 	and.w	r3, r3, #31
 800648e:	6879      	ldr	r1, [r7, #4]
 8006490:	fa01 f303 	lsl.w	r3, r1, r3
 8006494:	431a      	orrs	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	621a      	str	r2, [r3, #32]
}
 800649a:	bf00      	nop
 800649c:	371c      	adds	r7, #28
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
	...

080064a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d101      	bne.n	80064c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064bc:	2302      	movs	r3, #2
 80064be:	e074      	b.n	80065aa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a34      	ldr	r2, [pc, #208]	@ (80065b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d009      	beq.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a33      	ldr	r2, [pc, #204]	@ (80065bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d004      	beq.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a31      	ldr	r2, [pc, #196]	@ (80065c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d108      	bne.n	8006510 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006504:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4313      	orrs	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800651a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a21      	ldr	r2, [pc, #132]	@ (80065b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d022      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006540:	d01d      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a1f      	ldr	r2, [pc, #124]	@ (80065c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d018      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a1d      	ldr	r2, [pc, #116]	@ (80065c8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d013      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a1c      	ldr	r2, [pc, #112]	@ (80065cc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d00e      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a15      	ldr	r2, [pc, #84]	@ (80065bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d009      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a18      	ldr	r2, [pc, #96]	@ (80065d0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d004      	beq.n	800657e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a11      	ldr	r2, [pc, #68]	@ (80065c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d10c      	bne.n	8006598 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006584:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	4313      	orrs	r3, r2
 800658e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68ba      	ldr	r2, [r7, #8]
 8006596:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80065a8:	2300      	movs	r3, #0
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	40012c00 	.word	0x40012c00
 80065bc:	40013400 	.word	0x40013400
 80065c0:	40015000 	.word	0x40015000
 80065c4:	40000400 	.word	0x40000400
 80065c8:	40000800 	.word	0x40000800
 80065cc:	40000c00 	.word	0x40000c00
 80065d0:	40014000 	.word	0x40014000

080065d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d101      	bne.n	80065f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065ec:	2302      	movs	r3, #2
 80065ee:	e078      	b.n	80066e2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	4313      	orrs	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	4313      	orrs	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4313      	orrs	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	4313      	orrs	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	041b      	lsls	r3, r3, #16
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	69db      	ldr	r3, [r3, #28]
 8006674:	4313      	orrs	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a1c      	ldr	r2, [pc, #112]	@ (80066f0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d009      	beq.n	8006696 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a1b      	ldr	r2, [pc, #108]	@ (80066f4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d004      	beq.n	8006696 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a19      	ldr	r2, [pc, #100]	@ (80066f8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d11c      	bne.n	80066d0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a0:	051b      	lsls	r3, r3, #20
 80066a2:	4313      	orrs	r3, r2
 80066a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	6a1b      	ldr	r3, [r3, #32]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066cc:	4313      	orrs	r3, r2
 80066ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3714      	adds	r7, #20
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr
 80066ee:	bf00      	nop
 80066f0:	40012c00 	.word	0x40012c00
 80066f4:	40013400 	.word	0x40013400
 80066f8:	40015000 	.word	0x40015000

080066fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006704:	bf00      	nop
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006754:	bf00      	nop
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006768:	bf00      	nop
 800676a:	370c      	adds	r7, #12
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e042      	b.n	8006820 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d106      	bne.n	80067b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f7fb fb15 	bl	8001ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2224      	movs	r2, #36	@ 0x24
 80067b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0201 	bic.w	r2, r2, #1
 80067c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fe86 	bl	80074e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fb87 	bl	8006eec <UART_SetConfig>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d101      	bne.n	80067e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e01b      	b.n	8006820 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685a      	ldr	r2, [r3, #4]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80067f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689a      	ldr	r2, [r3, #8]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006806:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0201 	orr.w	r2, r2, #1
 8006816:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 ff05 	bl	8007628 <UART_CheckIdleState>
 800681e:	4603      	mov	r3, r0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3708      	adds	r7, #8
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b0ba      	sub	sp, #232	@ 0xe8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800684e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006852:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006856:	4013      	ands	r3, r2
 8006858:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800685c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006860:	2b00      	cmp	r3, #0
 8006862:	d11b      	bne.n	800689c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006868:	f003 0320 	and.w	r3, r3, #32
 800686c:	2b00      	cmp	r3, #0
 800686e:	d015      	beq.n	800689c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006874:	f003 0320 	and.w	r3, r3, #32
 8006878:	2b00      	cmp	r3, #0
 800687a:	d105      	bne.n	8006888 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800687c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d009      	beq.n	800689c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 8300 	beq.w	8006e92 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	4798      	blx	r3
      }
      return;
 800689a:	e2fa      	b.n	8006e92 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800689c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 8123 	beq.w	8006aec <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80068a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80068aa:	4b8d      	ldr	r3, [pc, #564]	@ (8006ae0 <HAL_UART_IRQHandler+0x2b8>)
 80068ac:	4013      	ands	r3, r2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d106      	bne.n	80068c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80068b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80068b6:	4b8b      	ldr	r3, [pc, #556]	@ (8006ae4 <HAL_UART_IRQHandler+0x2bc>)
 80068b8:	4013      	ands	r3, r2
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 8116 	beq.w	8006aec <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068c4:	f003 0301 	and.w	r3, r3, #1
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d011      	beq.n	80068f0 <HAL_UART_IRQHandler+0xc8>
 80068cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00b      	beq.n	80068f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2201      	movs	r2, #1
 80068de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068e6:	f043 0201 	orr.w	r2, r3, #1
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d011      	beq.n	8006920 <HAL_UART_IRQHandler+0xf8>
 80068fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00b      	beq.n	8006920 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2202      	movs	r2, #2
 800690e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006916:	f043 0204 	orr.w	r2, r3, #4
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	d011      	beq.n	8006950 <HAL_UART_IRQHandler+0x128>
 800692c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00b      	beq.n	8006950 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2204      	movs	r2, #4
 800693e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006946:	f043 0202 	orr.w	r2, r3, #2
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006954:	f003 0308 	and.w	r3, r3, #8
 8006958:	2b00      	cmp	r3, #0
 800695a:	d017      	beq.n	800698c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800695c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006960:	f003 0320 	and.w	r3, r3, #32
 8006964:	2b00      	cmp	r3, #0
 8006966:	d105      	bne.n	8006974 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006968:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800696c:	4b5c      	ldr	r3, [pc, #368]	@ (8006ae0 <HAL_UART_IRQHandler+0x2b8>)
 800696e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00b      	beq.n	800698c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2208      	movs	r2, #8
 800697a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006982:	f043 0208 	orr.w	r2, r3, #8
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800698c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006990:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006994:	2b00      	cmp	r3, #0
 8006996:	d012      	beq.n	80069be <HAL_UART_IRQHandler+0x196>
 8006998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800699c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00c      	beq.n	80069be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069b4:	f043 0220 	orr.w	r2, r3, #32
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	f000 8266 	beq.w	8006e96 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80069ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069ce:	f003 0320 	and.w	r3, r3, #32
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d013      	beq.n	80069fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80069d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069da:	f003 0320 	and.w	r3, r3, #32
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d105      	bne.n	80069ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80069e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d007      	beq.n	80069fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d003      	beq.n	80069fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a12:	2b40      	cmp	r3, #64	@ 0x40
 8006a14:	d005      	beq.n	8006a22 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006a1a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d054      	beq.n	8006acc <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 ff17 	bl	8007856 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a32:	2b40      	cmp	r3, #64	@ 0x40
 8006a34:	d146      	bne.n	8006ac4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3308      	adds	r3, #8
 8006a3c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006a4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006a50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3308      	adds	r3, #8
 8006a5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006a62:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006a66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006a6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006a72:	e841 2300 	strex	r3, r2, [r1]
 8006a76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006a7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1d9      	bne.n	8006a36 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d017      	beq.n	8006abc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a92:	4a15      	ldr	r2, [pc, #84]	@ (8006ae8 <HAL_UART_IRQHandler+0x2c0>)
 8006a94:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7fb fca9 	bl	80023f4 <HAL_DMA_Abort_IT>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d019      	beq.n	8006adc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aba:	e00f      	b.n	8006adc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f000 f9ff 	bl	8006ec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ac2:	e00b      	b.n	8006adc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f9fb 	bl	8006ec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aca:	e007      	b.n	8006adc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f000 f9f7 	bl	8006ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006ada:	e1dc      	b.n	8006e96 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006adc:	bf00      	nop
    return;
 8006ade:	e1da      	b.n	8006e96 <HAL_UART_IRQHandler+0x66e>
 8006ae0:	10000001 	.word	0x10000001
 8006ae4:	04000120 	.word	0x04000120
 8006ae8:	08007923 	.word	0x08007923

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	f040 8170 	bne.w	8006dd6 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006afa:	f003 0310 	and.w	r3, r3, #16
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f000 8169 	beq.w	8006dd6 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b08:	f003 0310 	and.w	r3, r3, #16
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 8162 	beq.w	8006dd6 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2210      	movs	r2, #16
 8006b18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b24:	2b40      	cmp	r3, #64	@ 0x40
 8006b26:	f040 80d8 	bne.w	8006cda <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f000 80af 	beq.w	8006ca0 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	f080 80a7 	bcs.w	8006ca0 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006b58:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f040 8087 	bne.w	8006c7e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b78:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006b7c:	e853 3f00 	ldrex	r3, [r3]
 8006b80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006b84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006b88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	461a      	mov	r2, r3
 8006b96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006b9a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006b9e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006ba6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006baa:	e841 2300 	strex	r3, r2, [r1]
 8006bae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1da      	bne.n	8006b70 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3308      	adds	r3, #8
 8006bc0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006bca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006bcc:	f023 0301 	bic.w	r3, r3, #1
 8006bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3308      	adds	r3, #8
 8006bda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006bde:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006be2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006be6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006bea:	e841 2300 	strex	r3, r2, [r1]
 8006bee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006bf0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1e1      	bne.n	8006bba <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3308      	adds	r3, #8
 8006bfc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3308      	adds	r3, #8
 8006c16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006c1a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006c1c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006c20:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006c22:	e841 2300 	strex	r3, r2, [r1]
 8006c26:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006c28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d1e3      	bne.n	8006bf6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2220      	movs	r2, #32
 8006c32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c44:	e853 3f00 	ldrex	r3, [r3]
 8006c48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c4c:	f023 0310 	bic.w	r3, r3, #16
 8006c50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	461a      	mov	r2, r3
 8006c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006c5e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c60:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c64:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c66:	e841 2300 	strex	r3, r2, [r1]
 8006c6a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1e4      	bne.n	8006c3c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7fb fb62 	bl	8002342 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2202      	movs	r2, #2
 8006c82:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	4619      	mov	r1, r3
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 f91b 	bl	8006ed4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006c9e:	e0fc      	b.n	8006e9a <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006caa:	429a      	cmp	r2, r3
 8006cac:	f040 80f5 	bne.w	8006e9a <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	2b20      	cmp	r3, #32
 8006cc0:	f040 80eb 	bne.w	8006e9a <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f8fe 	bl	8006ed4 <HAL_UARTEx_RxEventCallback>
      return;
 8006cd8:	e0df      	b.n	8006e9a <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	1ad3      	subs	r3, r2, r3
 8006cea:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f000 80d1 	beq.w	8006e9e <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006cfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f000 80cc 	beq.w	8006e9e <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d0e:	e853 3f00 	ldrex	r3, [r3]
 8006d12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	461a      	mov	r2, r3
 8006d24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006d28:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d30:	e841 2300 	strex	r3, r2, [r1]
 8006d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1e4      	bne.n	8006d06 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3308      	adds	r3, #8
 8006d42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d46:	e853 3f00 	ldrex	r3, [r3]
 8006d4a:	623b      	str	r3, [r7, #32]
   return(result);
 8006d4c:	6a3b      	ldr	r3, [r7, #32]
 8006d4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d52:	f023 0301 	bic.w	r3, r3, #1
 8006d56:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	3308      	adds	r3, #8
 8006d60:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006d64:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d6c:	e841 2300 	strex	r3, r2, [r1]
 8006d70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1e1      	bne.n	8006d3c <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2220      	movs	r2, #32
 8006d7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	e853 3f00 	ldrex	r3, [r3]
 8006d98:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f023 0310 	bic.w	r3, r3, #16
 8006da0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	461a      	mov	r2, r3
 8006daa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006dae:	61fb      	str	r3, [r7, #28]
 8006db0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db2:	69b9      	ldr	r1, [r7, #24]
 8006db4:	69fa      	ldr	r2, [r7, #28]
 8006db6:	e841 2300 	strex	r3, r2, [r1]
 8006dba:	617b      	str	r3, [r7, #20]
   return(result);
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1e4      	bne.n	8006d8c <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006dc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f880 	bl	8006ed4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006dd4:	e063      	b.n	8006e9e <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006dda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00e      	beq.n	8006e00 <HAL_UART_IRQHandler+0x5d8>
 8006de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d008      	beq.n	8006e00 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006df6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fdcf 	bl	800799c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006dfe:	e051      	b.n	8006ea4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d014      	beq.n	8006e36 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d105      	bne.n	8006e24 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d008      	beq.n	8006e36 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d03a      	beq.n	8006ea2 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	4798      	blx	r3
    }
    return;
 8006e34:	e035      	b.n	8006ea2 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d009      	beq.n	8006e56 <HAL_UART_IRQHandler+0x62e>
 8006e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d003      	beq.n	8006e56 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fd79 	bl	8007946 <UART_EndTransmit_IT>
    return;
 8006e54:	e026      	b.n	8006ea4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d009      	beq.n	8006e76 <HAL_UART_IRQHandler+0x64e>
 8006e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e66:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d003      	beq.n	8006e76 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fda8 	bl	80079c4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e74:	e016      	b.n	8006ea4 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d010      	beq.n	8006ea4 <HAL_UART_IRQHandler+0x67c>
 8006e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	da0c      	bge.n	8006ea4 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fd90 	bl	80079b0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e90:	e008      	b.n	8006ea4 <HAL_UART_IRQHandler+0x67c>
      return;
 8006e92:	bf00      	nop
 8006e94:	e006      	b.n	8006ea4 <HAL_UART_IRQHandler+0x67c>
    return;
 8006e96:	bf00      	nop
 8006e98:	e004      	b.n	8006ea4 <HAL_UART_IRQHandler+0x67c>
      return;
 8006e9a:	bf00      	nop
 8006e9c:	e002      	b.n	8006ea4 <HAL_UART_IRQHandler+0x67c>
      return;
 8006e9e:	bf00      	nop
 8006ea0:	e000      	b.n	8006ea4 <HAL_UART_IRQHandler+0x67c>
    return;
 8006ea2:	bf00      	nop
  }
}
 8006ea4:	37e8      	adds	r7, #232	@ 0xe8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop

08006eac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b083      	sub	sp, #12
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	460b      	mov	r3, r1
 8006ede:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ef0:	b08c      	sub	sp, #48	@ 0x30
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	689a      	ldr	r2, [r3, #8]
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	431a      	orrs	r2, r3
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	695b      	ldr	r3, [r3, #20]
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	69db      	ldr	r3, [r3, #28]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	4baa      	ldr	r3, [pc, #680]	@ (80071c4 <UART_SetConfig+0x2d8>)
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	697a      	ldr	r2, [r7, #20]
 8006f20:	6812      	ldr	r2, [r2, #0]
 8006f22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f24:	430b      	orrs	r3, r1
 8006f26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a9f      	ldr	r2, [pc, #636]	@ (80071c8 <UART_SetConfig+0x2dc>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d004      	beq.n	8006f58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
 8006f52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f54:	4313      	orrs	r3, r2
 8006f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006f62:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	6812      	ldr	r2, [r2, #0]
 8006f6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f6c:	430b      	orrs	r3, r1
 8006f6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f76:	f023 010f 	bic.w	r1, r3, #15
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	430a      	orrs	r2, r1
 8006f84:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a90      	ldr	r2, [pc, #576]	@ (80071cc <UART_SetConfig+0x2e0>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d125      	bne.n	8006fdc <UART_SetConfig+0xf0>
 8006f90:	4b8f      	ldr	r3, [pc, #572]	@ (80071d0 <UART_SetConfig+0x2e4>)
 8006f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f96:	f003 0303 	and.w	r3, r3, #3
 8006f9a:	2b03      	cmp	r3, #3
 8006f9c:	d81a      	bhi.n	8006fd4 <UART_SetConfig+0xe8>
 8006f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8006fa4 <UART_SetConfig+0xb8>)
 8006fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa4:	08006fb5 	.word	0x08006fb5
 8006fa8:	08006fc5 	.word	0x08006fc5
 8006fac:	08006fbd 	.word	0x08006fbd
 8006fb0:	08006fcd 	.word	0x08006fcd
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fba:	e116      	b.n	80071ea <UART_SetConfig+0x2fe>
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fc2:	e112      	b.n	80071ea <UART_SetConfig+0x2fe>
 8006fc4:	2304      	movs	r3, #4
 8006fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fca:	e10e      	b.n	80071ea <UART_SetConfig+0x2fe>
 8006fcc:	2308      	movs	r3, #8
 8006fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fd2:	e10a      	b.n	80071ea <UART_SetConfig+0x2fe>
 8006fd4:	2310      	movs	r3, #16
 8006fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fda:	e106      	b.n	80071ea <UART_SetConfig+0x2fe>
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a7c      	ldr	r2, [pc, #496]	@ (80071d4 <UART_SetConfig+0x2e8>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d138      	bne.n	8007058 <UART_SetConfig+0x16c>
 8006fe6:	4b7a      	ldr	r3, [pc, #488]	@ (80071d0 <UART_SetConfig+0x2e4>)
 8006fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fec:	f003 030c 	and.w	r3, r3, #12
 8006ff0:	2b0c      	cmp	r3, #12
 8006ff2:	d82d      	bhi.n	8007050 <UART_SetConfig+0x164>
 8006ff4:	a201      	add	r2, pc, #4	@ (adr r2, 8006ffc <UART_SetConfig+0x110>)
 8006ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffa:	bf00      	nop
 8006ffc:	08007031 	.word	0x08007031
 8007000:	08007051 	.word	0x08007051
 8007004:	08007051 	.word	0x08007051
 8007008:	08007051 	.word	0x08007051
 800700c:	08007041 	.word	0x08007041
 8007010:	08007051 	.word	0x08007051
 8007014:	08007051 	.word	0x08007051
 8007018:	08007051 	.word	0x08007051
 800701c:	08007039 	.word	0x08007039
 8007020:	08007051 	.word	0x08007051
 8007024:	08007051 	.word	0x08007051
 8007028:	08007051 	.word	0x08007051
 800702c:	08007049 	.word	0x08007049
 8007030:	2300      	movs	r3, #0
 8007032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007036:	e0d8      	b.n	80071ea <UART_SetConfig+0x2fe>
 8007038:	2302      	movs	r3, #2
 800703a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800703e:	e0d4      	b.n	80071ea <UART_SetConfig+0x2fe>
 8007040:	2304      	movs	r3, #4
 8007042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007046:	e0d0      	b.n	80071ea <UART_SetConfig+0x2fe>
 8007048:	2308      	movs	r3, #8
 800704a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800704e:	e0cc      	b.n	80071ea <UART_SetConfig+0x2fe>
 8007050:	2310      	movs	r3, #16
 8007052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007056:	e0c8      	b.n	80071ea <UART_SetConfig+0x2fe>
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a5e      	ldr	r2, [pc, #376]	@ (80071d8 <UART_SetConfig+0x2ec>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d125      	bne.n	80070ae <UART_SetConfig+0x1c2>
 8007062:	4b5b      	ldr	r3, [pc, #364]	@ (80071d0 <UART_SetConfig+0x2e4>)
 8007064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007068:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800706c:	2b30      	cmp	r3, #48	@ 0x30
 800706e:	d016      	beq.n	800709e <UART_SetConfig+0x1b2>
 8007070:	2b30      	cmp	r3, #48	@ 0x30
 8007072:	d818      	bhi.n	80070a6 <UART_SetConfig+0x1ba>
 8007074:	2b20      	cmp	r3, #32
 8007076:	d00a      	beq.n	800708e <UART_SetConfig+0x1a2>
 8007078:	2b20      	cmp	r3, #32
 800707a:	d814      	bhi.n	80070a6 <UART_SetConfig+0x1ba>
 800707c:	2b00      	cmp	r3, #0
 800707e:	d002      	beq.n	8007086 <UART_SetConfig+0x19a>
 8007080:	2b10      	cmp	r3, #16
 8007082:	d008      	beq.n	8007096 <UART_SetConfig+0x1aa>
 8007084:	e00f      	b.n	80070a6 <UART_SetConfig+0x1ba>
 8007086:	2300      	movs	r3, #0
 8007088:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800708c:	e0ad      	b.n	80071ea <UART_SetConfig+0x2fe>
 800708e:	2302      	movs	r3, #2
 8007090:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007094:	e0a9      	b.n	80071ea <UART_SetConfig+0x2fe>
 8007096:	2304      	movs	r3, #4
 8007098:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800709c:	e0a5      	b.n	80071ea <UART_SetConfig+0x2fe>
 800709e:	2308      	movs	r3, #8
 80070a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070a4:	e0a1      	b.n	80071ea <UART_SetConfig+0x2fe>
 80070a6:	2310      	movs	r3, #16
 80070a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ac:	e09d      	b.n	80071ea <UART_SetConfig+0x2fe>
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a4a      	ldr	r2, [pc, #296]	@ (80071dc <UART_SetConfig+0x2f0>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d125      	bne.n	8007104 <UART_SetConfig+0x218>
 80070b8:	4b45      	ldr	r3, [pc, #276]	@ (80071d0 <UART_SetConfig+0x2e4>)
 80070ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80070c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80070c4:	d016      	beq.n	80070f4 <UART_SetConfig+0x208>
 80070c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80070c8:	d818      	bhi.n	80070fc <UART_SetConfig+0x210>
 80070ca:	2b80      	cmp	r3, #128	@ 0x80
 80070cc:	d00a      	beq.n	80070e4 <UART_SetConfig+0x1f8>
 80070ce:	2b80      	cmp	r3, #128	@ 0x80
 80070d0:	d814      	bhi.n	80070fc <UART_SetConfig+0x210>
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d002      	beq.n	80070dc <UART_SetConfig+0x1f0>
 80070d6:	2b40      	cmp	r3, #64	@ 0x40
 80070d8:	d008      	beq.n	80070ec <UART_SetConfig+0x200>
 80070da:	e00f      	b.n	80070fc <UART_SetConfig+0x210>
 80070dc:	2300      	movs	r3, #0
 80070de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070e2:	e082      	b.n	80071ea <UART_SetConfig+0x2fe>
 80070e4:	2302      	movs	r3, #2
 80070e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070ea:	e07e      	b.n	80071ea <UART_SetConfig+0x2fe>
 80070ec:	2304      	movs	r3, #4
 80070ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070f2:	e07a      	b.n	80071ea <UART_SetConfig+0x2fe>
 80070f4:	2308      	movs	r3, #8
 80070f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80070fa:	e076      	b.n	80071ea <UART_SetConfig+0x2fe>
 80070fc:	2310      	movs	r3, #16
 80070fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007102:	e072      	b.n	80071ea <UART_SetConfig+0x2fe>
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a35      	ldr	r2, [pc, #212]	@ (80071e0 <UART_SetConfig+0x2f4>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d12a      	bne.n	8007164 <UART_SetConfig+0x278>
 800710e:	4b30      	ldr	r3, [pc, #192]	@ (80071d0 <UART_SetConfig+0x2e4>)
 8007110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007114:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007118:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800711c:	d01a      	beq.n	8007154 <UART_SetConfig+0x268>
 800711e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007122:	d81b      	bhi.n	800715c <UART_SetConfig+0x270>
 8007124:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007128:	d00c      	beq.n	8007144 <UART_SetConfig+0x258>
 800712a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800712e:	d815      	bhi.n	800715c <UART_SetConfig+0x270>
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <UART_SetConfig+0x250>
 8007134:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007138:	d008      	beq.n	800714c <UART_SetConfig+0x260>
 800713a:	e00f      	b.n	800715c <UART_SetConfig+0x270>
 800713c:	2300      	movs	r3, #0
 800713e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007142:	e052      	b.n	80071ea <UART_SetConfig+0x2fe>
 8007144:	2302      	movs	r3, #2
 8007146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800714a:	e04e      	b.n	80071ea <UART_SetConfig+0x2fe>
 800714c:	2304      	movs	r3, #4
 800714e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007152:	e04a      	b.n	80071ea <UART_SetConfig+0x2fe>
 8007154:	2308      	movs	r3, #8
 8007156:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800715a:	e046      	b.n	80071ea <UART_SetConfig+0x2fe>
 800715c:	2310      	movs	r3, #16
 800715e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007162:	e042      	b.n	80071ea <UART_SetConfig+0x2fe>
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a17      	ldr	r2, [pc, #92]	@ (80071c8 <UART_SetConfig+0x2dc>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d13a      	bne.n	80071e4 <UART_SetConfig+0x2f8>
 800716e:	4b18      	ldr	r3, [pc, #96]	@ (80071d0 <UART_SetConfig+0x2e4>)
 8007170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007174:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007178:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800717c:	d01a      	beq.n	80071b4 <UART_SetConfig+0x2c8>
 800717e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007182:	d81b      	bhi.n	80071bc <UART_SetConfig+0x2d0>
 8007184:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007188:	d00c      	beq.n	80071a4 <UART_SetConfig+0x2b8>
 800718a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800718e:	d815      	bhi.n	80071bc <UART_SetConfig+0x2d0>
 8007190:	2b00      	cmp	r3, #0
 8007192:	d003      	beq.n	800719c <UART_SetConfig+0x2b0>
 8007194:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007198:	d008      	beq.n	80071ac <UART_SetConfig+0x2c0>
 800719a:	e00f      	b.n	80071bc <UART_SetConfig+0x2d0>
 800719c:	2300      	movs	r3, #0
 800719e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071a2:	e022      	b.n	80071ea <UART_SetConfig+0x2fe>
 80071a4:	2302      	movs	r3, #2
 80071a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071aa:	e01e      	b.n	80071ea <UART_SetConfig+0x2fe>
 80071ac:	2304      	movs	r3, #4
 80071ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071b2:	e01a      	b.n	80071ea <UART_SetConfig+0x2fe>
 80071b4:	2308      	movs	r3, #8
 80071b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071ba:	e016      	b.n	80071ea <UART_SetConfig+0x2fe>
 80071bc:	2310      	movs	r3, #16
 80071be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80071c2:	e012      	b.n	80071ea <UART_SetConfig+0x2fe>
 80071c4:	cfff69f3 	.word	0xcfff69f3
 80071c8:	40008000 	.word	0x40008000
 80071cc:	40013800 	.word	0x40013800
 80071d0:	40021000 	.word	0x40021000
 80071d4:	40004400 	.word	0x40004400
 80071d8:	40004800 	.word	0x40004800
 80071dc:	40004c00 	.word	0x40004c00
 80071e0:	40005000 	.word	0x40005000
 80071e4:	2310      	movs	r3, #16
 80071e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4aae      	ldr	r2, [pc, #696]	@ (80074a8 <UART_SetConfig+0x5bc>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	f040 8097 	bne.w	8007324 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80071fa:	2b08      	cmp	r3, #8
 80071fc:	d823      	bhi.n	8007246 <UART_SetConfig+0x35a>
 80071fe:	a201      	add	r2, pc, #4	@ (adr r2, 8007204 <UART_SetConfig+0x318>)
 8007200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007204:	08007229 	.word	0x08007229
 8007208:	08007247 	.word	0x08007247
 800720c:	08007231 	.word	0x08007231
 8007210:	08007247 	.word	0x08007247
 8007214:	08007237 	.word	0x08007237
 8007218:	08007247 	.word	0x08007247
 800721c:	08007247 	.word	0x08007247
 8007220:	08007247 	.word	0x08007247
 8007224:	0800723f 	.word	0x0800723f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007228:	f7fd fd88 	bl	8004d3c <HAL_RCC_GetPCLK1Freq>
 800722c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800722e:	e010      	b.n	8007252 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007230:	4b9e      	ldr	r3, [pc, #632]	@ (80074ac <UART_SetConfig+0x5c0>)
 8007232:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007234:	e00d      	b.n	8007252 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007236:	f7fd fd15 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 800723a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800723c:	e009      	b.n	8007252 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800723e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007242:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007244:	e005      	b.n	8007252 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007246:	2300      	movs	r3, #0
 8007248:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007250:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007254:	2b00      	cmp	r3, #0
 8007256:	f000 8130 	beq.w	80074ba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725e:	4a94      	ldr	r2, [pc, #592]	@ (80074b0 <UART_SetConfig+0x5c4>)
 8007260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007264:	461a      	mov	r2, r3
 8007266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007268:	fbb3 f3f2 	udiv	r3, r3, r2
 800726c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	685a      	ldr	r2, [r3, #4]
 8007272:	4613      	mov	r3, r2
 8007274:	005b      	lsls	r3, r3, #1
 8007276:	4413      	add	r3, r2
 8007278:	69ba      	ldr	r2, [r7, #24]
 800727a:	429a      	cmp	r2, r3
 800727c:	d305      	bcc.n	800728a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	429a      	cmp	r2, r3
 8007288:	d903      	bls.n	8007292 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007290:	e113      	b.n	80074ba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007294:	2200      	movs	r2, #0
 8007296:	60bb      	str	r3, [r7, #8]
 8007298:	60fa      	str	r2, [r7, #12]
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729e:	4a84      	ldr	r2, [pc, #528]	@ (80074b0 <UART_SetConfig+0x5c4>)
 80072a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	2200      	movs	r2, #0
 80072a8:	603b      	str	r3, [r7, #0]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80072b4:	f7f8 ffb0 	bl	8000218 <__aeabi_uldivmod>
 80072b8:	4602      	mov	r2, r0
 80072ba:	460b      	mov	r3, r1
 80072bc:	4610      	mov	r0, r2
 80072be:	4619      	mov	r1, r3
 80072c0:	f04f 0200 	mov.w	r2, #0
 80072c4:	f04f 0300 	mov.w	r3, #0
 80072c8:	020b      	lsls	r3, r1, #8
 80072ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80072ce:	0202      	lsls	r2, r0, #8
 80072d0:	6979      	ldr	r1, [r7, #20]
 80072d2:	6849      	ldr	r1, [r1, #4]
 80072d4:	0849      	lsrs	r1, r1, #1
 80072d6:	2000      	movs	r0, #0
 80072d8:	460c      	mov	r4, r1
 80072da:	4605      	mov	r5, r0
 80072dc:	eb12 0804 	adds.w	r8, r2, r4
 80072e0:	eb43 0905 	adc.w	r9, r3, r5
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	469a      	mov	sl, r3
 80072ec:	4693      	mov	fp, r2
 80072ee:	4652      	mov	r2, sl
 80072f0:	465b      	mov	r3, fp
 80072f2:	4640      	mov	r0, r8
 80072f4:	4649      	mov	r1, r9
 80072f6:	f7f8 ff8f 	bl	8000218 <__aeabi_uldivmod>
 80072fa:	4602      	mov	r2, r0
 80072fc:	460b      	mov	r3, r1
 80072fe:	4613      	mov	r3, r2
 8007300:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007302:	6a3b      	ldr	r3, [r7, #32]
 8007304:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007308:	d308      	bcc.n	800731c <UART_SetConfig+0x430>
 800730a:	6a3b      	ldr	r3, [r7, #32]
 800730c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007310:	d204      	bcs.n	800731c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	6a3a      	ldr	r2, [r7, #32]
 8007318:	60da      	str	r2, [r3, #12]
 800731a:	e0ce      	b.n	80074ba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007322:	e0ca      	b.n	80074ba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800732c:	d166      	bne.n	80073fc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800732e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007332:	2b08      	cmp	r3, #8
 8007334:	d827      	bhi.n	8007386 <UART_SetConfig+0x49a>
 8007336:	a201      	add	r2, pc, #4	@ (adr r2, 800733c <UART_SetConfig+0x450>)
 8007338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733c:	08007361 	.word	0x08007361
 8007340:	08007369 	.word	0x08007369
 8007344:	08007371 	.word	0x08007371
 8007348:	08007387 	.word	0x08007387
 800734c:	08007377 	.word	0x08007377
 8007350:	08007387 	.word	0x08007387
 8007354:	08007387 	.word	0x08007387
 8007358:	08007387 	.word	0x08007387
 800735c:	0800737f 	.word	0x0800737f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007360:	f7fd fcec 	bl	8004d3c <HAL_RCC_GetPCLK1Freq>
 8007364:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007366:	e014      	b.n	8007392 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007368:	f7fd fcfe 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 800736c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800736e:	e010      	b.n	8007392 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007370:	4b4e      	ldr	r3, [pc, #312]	@ (80074ac <UART_SetConfig+0x5c0>)
 8007372:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007374:	e00d      	b.n	8007392 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007376:	f7fd fc75 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 800737a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800737c:	e009      	b.n	8007392 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800737e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007382:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007384:	e005      	b.n	8007392 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007386:	2300      	movs	r3, #0
 8007388:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007390:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 8090 	beq.w	80074ba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800739e:	4a44      	ldr	r2, [pc, #272]	@ (80074b0 <UART_SetConfig+0x5c4>)
 80073a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073a4:	461a      	mov	r2, r3
 80073a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80073ac:	005a      	lsls	r2, r3, #1
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	085b      	lsrs	r3, r3, #1
 80073b4:	441a      	add	r2, r3
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80073be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073c0:	6a3b      	ldr	r3, [r7, #32]
 80073c2:	2b0f      	cmp	r3, #15
 80073c4:	d916      	bls.n	80073f4 <UART_SetConfig+0x508>
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073cc:	d212      	bcs.n	80073f4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	f023 030f 	bic.w	r3, r3, #15
 80073d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	085b      	lsrs	r3, r3, #1
 80073dc:	b29b      	uxth	r3, r3
 80073de:	f003 0307 	and.w	r3, r3, #7
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	8bfb      	ldrh	r3, [r7, #30]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	8bfa      	ldrh	r2, [r7, #30]
 80073f0:	60da      	str	r2, [r3, #12]
 80073f2:	e062      	b.n	80074ba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80073f4:	2301      	movs	r3, #1
 80073f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80073fa:	e05e      	b.n	80074ba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80073fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007400:	2b08      	cmp	r3, #8
 8007402:	d828      	bhi.n	8007456 <UART_SetConfig+0x56a>
 8007404:	a201      	add	r2, pc, #4	@ (adr r2, 800740c <UART_SetConfig+0x520>)
 8007406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740a:	bf00      	nop
 800740c:	08007431 	.word	0x08007431
 8007410:	08007439 	.word	0x08007439
 8007414:	08007441 	.word	0x08007441
 8007418:	08007457 	.word	0x08007457
 800741c:	08007447 	.word	0x08007447
 8007420:	08007457 	.word	0x08007457
 8007424:	08007457 	.word	0x08007457
 8007428:	08007457 	.word	0x08007457
 800742c:	0800744f 	.word	0x0800744f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007430:	f7fd fc84 	bl	8004d3c <HAL_RCC_GetPCLK1Freq>
 8007434:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007436:	e014      	b.n	8007462 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007438:	f7fd fc96 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 800743c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800743e:	e010      	b.n	8007462 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007440:	4b1a      	ldr	r3, [pc, #104]	@ (80074ac <UART_SetConfig+0x5c0>)
 8007442:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007444:	e00d      	b.n	8007462 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007446:	f7fd fc0d 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 800744a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800744c:	e009      	b.n	8007462 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800744e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007452:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007454:	e005      	b.n	8007462 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007456:	2300      	movs	r3, #0
 8007458:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007460:	bf00      	nop
    }

    if (pclk != 0U)
 8007462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007464:	2b00      	cmp	r3, #0
 8007466:	d028      	beq.n	80074ba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800746c:	4a10      	ldr	r2, [pc, #64]	@ (80074b0 <UART_SetConfig+0x5c4>)
 800746e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007472:	461a      	mov	r2, r3
 8007474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007476:	fbb3 f2f2 	udiv	r2, r3, r2
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	085b      	lsrs	r3, r3, #1
 8007480:	441a      	add	r2, r3
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	fbb2 f3f3 	udiv	r3, r2, r3
 800748a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	2b0f      	cmp	r3, #15
 8007490:	d910      	bls.n	80074b4 <UART_SetConfig+0x5c8>
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007498:	d20c      	bcs.n	80074b4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	b29a      	uxth	r2, r3
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	60da      	str	r2, [r3, #12]
 80074a4:	e009      	b.n	80074ba <UART_SetConfig+0x5ce>
 80074a6:	bf00      	nop
 80074a8:	40008000 	.word	0x40008000
 80074ac:	00f42400 	.word	0x00f42400
 80074b0:	0800bcb8 	.word	0x0800bcb8
      }
      else
      {
        ret = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	2201      	movs	r2, #1
 80074be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	2200      	movs	r2, #0
 80074ce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	2200      	movs	r2, #0
 80074d4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80074d6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3730      	adds	r7, #48	@ 0x30
 80074de:	46bd      	mov	sp, r7
 80074e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080074e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f0:	f003 0308 	and.w	r3, r3, #8
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00a      	beq.n	800750e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	430a      	orrs	r2, r1
 800750c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00a      	beq.n	8007530 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	430a      	orrs	r2, r1
 800752e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007534:	f003 0302 	and.w	r3, r3, #2
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00a      	beq.n	8007552 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007556:	f003 0304 	and.w	r3, r3, #4
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00a      	beq.n	8007574 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	430a      	orrs	r2, r1
 8007572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007578:	f003 0310 	and.w	r3, r3, #16
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00a      	beq.n	8007596 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	430a      	orrs	r2, r1
 8007594:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800759a:	f003 0320 	and.w	r3, r3, #32
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	430a      	orrs	r2, r1
 80075b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d01a      	beq.n	80075fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	430a      	orrs	r2, r1
 80075d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075e2:	d10a      	bne.n	80075fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	605a      	str	r2, [r3, #4]
  }
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b098      	sub	sp, #96	@ 0x60
 800762c:	af02      	add	r7, sp, #8
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007638:	f7fa fd46 	bl	80020c8 <HAL_GetTick>
 800763c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0308 	and.w	r3, r3, #8
 8007648:	2b08      	cmp	r3, #8
 800764a:	d12f      	bne.n	80076ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800764c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007654:	2200      	movs	r2, #0
 8007656:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f88e 	bl	800777c <UART_WaitOnFlagUntilTimeout>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d022      	beq.n	80076ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800766e:	e853 3f00 	ldrex	r3, [r3]
 8007672:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007676:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800767a:	653b      	str	r3, [r7, #80]	@ 0x50
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	461a      	mov	r2, r3
 8007682:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007684:	647b      	str	r3, [r7, #68]	@ 0x44
 8007686:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007688:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800768a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800768c:	e841 2300 	strex	r3, r2, [r1]
 8007690:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007694:	2b00      	cmp	r3, #0
 8007696:	d1e6      	bne.n	8007666 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2220      	movs	r2, #32
 800769c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e063      	b.n	8007774 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f003 0304 	and.w	r3, r3, #4
 80076b6:	2b04      	cmp	r3, #4
 80076b8:	d149      	bne.n	800774e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076c2:	2200      	movs	r2, #0
 80076c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f857 	bl	800777c <UART_WaitOnFlagUntilTimeout>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d03c      	beq.n	800774e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	e853 3f00 	ldrex	r3, [r3]
 80076e0:	623b      	str	r3, [r7, #32]
   return(result);
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	461a      	mov	r2, r3
 80076f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80076f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e6      	bne.n	80076d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3308      	adds	r3, #8
 800770c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	e853 3f00 	ldrex	r3, [r3]
 8007714:	60fb      	str	r3, [r7, #12]
   return(result);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	f023 0301 	bic.w	r3, r3, #1
 800771c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	3308      	adds	r3, #8
 8007724:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007726:	61fa      	str	r2, [r7, #28]
 8007728:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772a:	69b9      	ldr	r1, [r7, #24]
 800772c:	69fa      	ldr	r2, [r7, #28]
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	617b      	str	r3, [r7, #20]
   return(result);
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e5      	bne.n	8007706 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2220      	movs	r2, #32
 800773e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e012      	b.n	8007774 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2220      	movs	r2, #32
 8007752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2220      	movs	r2, #32
 800775a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3758      	adds	r7, #88	@ 0x58
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	603b      	str	r3, [r7, #0]
 8007788:	4613      	mov	r3, r2
 800778a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800778c:	e04f      	b.n	800782e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007794:	d04b      	beq.n	800782e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007796:	f7fa fc97 	bl	80020c8 <HAL_GetTick>
 800779a:	4602      	mov	r2, r0
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	69ba      	ldr	r2, [r7, #24]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d302      	bcc.n	80077ac <UART_WaitOnFlagUntilTimeout+0x30>
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d101      	bne.n	80077b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80077ac:	2303      	movs	r3, #3
 80077ae:	e04e      	b.n	800784e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f003 0304 	and.w	r3, r3, #4
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d037      	beq.n	800782e <UART_WaitOnFlagUntilTimeout+0xb2>
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2b80      	cmp	r3, #128	@ 0x80
 80077c2:	d034      	beq.n	800782e <UART_WaitOnFlagUntilTimeout+0xb2>
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	2b40      	cmp	r3, #64	@ 0x40
 80077c8:	d031      	beq.n	800782e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69db      	ldr	r3, [r3, #28]
 80077d0:	f003 0308 	and.w	r3, r3, #8
 80077d4:	2b08      	cmp	r3, #8
 80077d6:	d110      	bne.n	80077fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2208      	movs	r2, #8
 80077de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f000 f838 	bl	8007856 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2208      	movs	r2, #8
 80077ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e029      	b.n	800784e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	69db      	ldr	r3, [r3, #28]
 8007800:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007804:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007808:	d111      	bne.n	800782e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007812:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f000 f81e 	bl	8007856 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2220      	movs	r2, #32
 800781e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	e00f      	b.n	800784e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	69da      	ldr	r2, [r3, #28]
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	4013      	ands	r3, r2
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	429a      	cmp	r2, r3
 800783c:	bf0c      	ite	eq
 800783e:	2301      	moveq	r3, #1
 8007840:	2300      	movne	r3, #0
 8007842:	b2db      	uxtb	r3, r3
 8007844:	461a      	mov	r2, r3
 8007846:	79fb      	ldrb	r3, [r7, #7]
 8007848:	429a      	cmp	r2, r3
 800784a:	d0a0      	beq.n	800778e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007856:	b480      	push	{r7}
 8007858:	b095      	sub	sp, #84	@ 0x54
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007866:	e853 3f00 	ldrex	r3, [r3]
 800786a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800786c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800786e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007872:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	461a      	mov	r2, r3
 800787a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800787c:	643b      	str	r3, [r7, #64]	@ 0x40
 800787e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007880:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007882:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007884:	e841 2300 	strex	r3, r2, [r1]
 8007888:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800788a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1e6      	bne.n	800785e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3308      	adds	r3, #8
 8007896:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007898:	6a3b      	ldr	r3, [r7, #32]
 800789a:	e853 3f00 	ldrex	r3, [r3]
 800789e:	61fb      	str	r3, [r7, #28]
   return(result);
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078a6:	f023 0301 	bic.w	r3, r3, #1
 80078aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	3308      	adds	r3, #8
 80078b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078bc:	e841 2300 	strex	r3, r2, [r1]
 80078c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d1e3      	bne.n	8007890 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d118      	bne.n	8007902 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	e853 3f00 	ldrex	r3, [r3]
 80078dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	f023 0310 	bic.w	r3, r3, #16
 80078e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078ee:	61bb      	str	r3, [r7, #24]
 80078f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f2:	6979      	ldr	r1, [r7, #20]
 80078f4:	69ba      	ldr	r2, [r7, #24]
 80078f6:	e841 2300 	strex	r3, r2, [r1]
 80078fa:	613b      	str	r3, [r7, #16]
   return(result);
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1e6      	bne.n	80078d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2220      	movs	r2, #32
 8007906:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007916:	bf00      	nop
 8007918:	3754      	adds	r7, #84	@ 0x54
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b084      	sub	sp, #16
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800792e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2200      	movs	r2, #0
 8007934:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f7ff fac1 	bl	8006ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800793e:	bf00      	nop
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b088      	sub	sp, #32
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	e853 3f00 	ldrex	r3, [r3]
 800795a:	60bb      	str	r3, [r7, #8]
   return(result);
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007962:	61fb      	str	r3, [r7, #28]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	461a      	mov	r2, r3
 800796a:	69fb      	ldr	r3, [r7, #28]
 800796c:	61bb      	str	r3, [r7, #24]
 800796e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007970:	6979      	ldr	r1, [r7, #20]
 8007972:	69ba      	ldr	r2, [r7, #24]
 8007974:	e841 2300 	strex	r3, r2, [r1]
 8007978:	613b      	str	r3, [r7, #16]
   return(result);
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1e6      	bne.n	800794e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2220      	movs	r2, #32
 8007984:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7ff fa8c 	bl	8006eac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007994:	bf00      	nop
 8007996:	3720      	adds	r7, #32
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d101      	bne.n	80079ee <HAL_UARTEx_DisableFifoMode+0x16>
 80079ea:	2302      	movs	r3, #2
 80079ec:	e027      	b.n	8007a3e <HAL_UARTEx_DisableFifoMode+0x66>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2201      	movs	r2, #1
 80079f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2224      	movs	r2, #36	@ 0x24
 80079fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 0201 	bic.w	r2, r2, #1
 8007a14:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007a1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2220      	movs	r2, #32
 8007a30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a3c:	2300      	movs	r3, #0
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3714      	adds	r7, #20
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b084      	sub	sp, #16
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
 8007a52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d101      	bne.n	8007a62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a5e:	2302      	movs	r3, #2
 8007a60:	e02d      	b.n	8007abe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2224      	movs	r2, #36	@ 0x24
 8007a6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	681a      	ldr	r2, [r3, #0]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f022 0201 	bic.w	r2, r2, #1
 8007a88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	430a      	orrs	r2, r1
 8007a9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 f850 	bl	8007b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2220      	movs	r2, #32
 8007ab0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b084      	sub	sp, #16
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
 8007ace:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d101      	bne.n	8007ade <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ada:	2302      	movs	r3, #2
 8007adc:	e02d      	b.n	8007b3a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2224      	movs	r2, #36	@ 0x24
 8007aea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f022 0201 	bic.w	r2, r2, #1
 8007b04:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	683a      	ldr	r2, [r7, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f812 	bl	8007b44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2220      	movs	r2, #32
 8007b2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
	...

08007b44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b085      	sub	sp, #20
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d108      	bne.n	8007b66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b64:	e031      	b.n	8007bca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b66:	2308      	movs	r3, #8
 8007b68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b6a:	2308      	movs	r3, #8
 8007b6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	0e5b      	lsrs	r3, r3, #25
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	f003 0307 	and.w	r3, r3, #7
 8007b7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	0f5b      	lsrs	r3, r3, #29
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	f003 0307 	and.w	r3, r3, #7
 8007b8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b8e:	7bbb      	ldrb	r3, [r7, #14]
 8007b90:	7b3a      	ldrb	r2, [r7, #12]
 8007b92:	4911      	ldr	r1, [pc, #68]	@ (8007bd8 <UARTEx_SetNbDataToProcess+0x94>)
 8007b94:	5c8a      	ldrb	r2, [r1, r2]
 8007b96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b9a:	7b3a      	ldrb	r2, [r7, #12]
 8007b9c:	490f      	ldr	r1, [pc, #60]	@ (8007bdc <UARTEx_SetNbDataToProcess+0x98>)
 8007b9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ba0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
 8007bae:	7b7a      	ldrb	r2, [r7, #13]
 8007bb0:	4909      	ldr	r1, [pc, #36]	@ (8007bd8 <UARTEx_SetNbDataToProcess+0x94>)
 8007bb2:	5c8a      	ldrb	r2, [r1, r2]
 8007bb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007bb8:	7b7a      	ldrb	r2, [r7, #13]
 8007bba:	4908      	ldr	r1, [pc, #32]	@ (8007bdc <UARTEx_SetNbDataToProcess+0x98>)
 8007bbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007bca:	bf00      	nop
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	0800bcd0 	.word	0x0800bcd0
 8007bdc:	0800bcd8 	.word	0x0800bcd8

08007be0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b085      	sub	sp, #20
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007bf0:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007bf4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr

08007c0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b085      	sub	sp, #20
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007c16:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8007c1a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	43db      	mvns	r3, r3
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007c36:	2300      	movs	r3, #0
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3714      	adds	r7, #20
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	60f8      	str	r0, [r7, #12]
 8007c4c:	1d3b      	adds	r3, r7, #4
 8007c4e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3714      	adds	r7, #20
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b0a7      	sub	sp, #156	@ 0x9c
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4413      	add	r3, r2
 8007c9a:	881b      	ldrh	r3, [r3, #0]
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8007ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ca6:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	78db      	ldrb	r3, [r3, #3]
 8007cae:	2b03      	cmp	r3, #3
 8007cb0:	d81f      	bhi.n	8007cf2 <USB_ActivateEndpoint+0x72>
 8007cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb8 <USB_ActivateEndpoint+0x38>)
 8007cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb8:	08007cc9 	.word	0x08007cc9
 8007cbc:	08007ce5 	.word	0x08007ce5
 8007cc0:	08007cfb 	.word	0x08007cfb
 8007cc4:	08007cd7 	.word	0x08007cd7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007cc8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007ccc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007cd0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007cd4:	e012      	b.n	8007cfc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007cd6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007cda:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8007cde:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007ce2:	e00b      	b.n	8007cfc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007ce4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007ce8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007cec:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 8007cf0:	e004      	b.n	8007cfc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 8007cf8:	e000      	b.n	8007cfc <USB_ActivateEndpoint+0x7c>
      break;
 8007cfa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	441a      	add	r2, r3
 8007d06:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007d0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4413      	add	r3, r2
 8007d28:	881b      	ldrh	r3, [r3, #0]
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	b21b      	sxth	r3, r3
 8007d2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d36:	b21a      	sxth	r2, r3
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	b21b      	sxth	r3, r3
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	b21b      	sxth	r3, r3
 8007d42:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	441a      	add	r2, r3
 8007d50:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007d54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	7b1b      	ldrb	r3, [r3, #12]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f040 8180 	bne.w	8008072 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	785b      	ldrb	r3, [r3, #1]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	f000 8084 	beq.w	8007e84 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	61bb      	str	r3, [r7, #24]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d86:	b29b      	uxth	r3, r3
 8007d88:	461a      	mov	r2, r3
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	61bb      	str	r3, [r7, #24]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	00da      	lsls	r2, r3, #3
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	4413      	add	r3, r2
 8007d9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d9e:	617b      	str	r3, [r7, #20]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	88db      	ldrh	r3, [r3, #6]
 8007da4:	085b      	lsrs	r3, r3, #1
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	005b      	lsls	r3, r3, #1
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	4413      	add	r3, r2
 8007dba:	881b      	ldrh	r3, [r3, #0]
 8007dbc:	827b      	strh	r3, [r7, #18]
 8007dbe:	8a7b      	ldrh	r3, [r7, #18]
 8007dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d01b      	beq.n	8007e00 <USB_ActivateEndpoint+0x180>
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	4413      	add	r3, r2
 8007dd2:	881b      	ldrh	r3, [r3, #0]
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dde:	823b      	strh	r3, [r7, #16]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	441a      	add	r2, r3
 8007dea:	8a3b      	ldrh	r3, [r7, #16]
 8007dec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007df0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007df4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007df8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	78db      	ldrb	r3, [r3, #3]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d020      	beq.n	8007e4a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e1e:	81bb      	strh	r3, [r7, #12]
 8007e20:	89bb      	ldrh	r3, [r7, #12]
 8007e22:	f083 0320 	eor.w	r3, r3, #32
 8007e26:	81bb      	strh	r3, [r7, #12]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	441a      	add	r2, r3
 8007e32:	89bb      	ldrh	r3, [r7, #12]
 8007e34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	8013      	strh	r3, [r2, #0]
 8007e48:	e3f9      	b.n	800863e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	4413      	add	r3, r2
 8007e54:	881b      	ldrh	r3, [r3, #0]
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e60:	81fb      	strh	r3, [r7, #14]
 8007e62:	687a      	ldr	r2, [r7, #4]
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	441a      	add	r2, r3
 8007e6c:	89fb      	ldrh	r3, [r7, #14]
 8007e6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	8013      	strh	r3, [r2, #0]
 8007e82:	e3dc      	b.n	800863e <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	461a      	mov	r2, r3
 8007e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e94:	4413      	add	r3, r2
 8007e96:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	00da      	lsls	r2, r3, #3
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	88db      	ldrh	r3, [r3, #6]
 8007eac:	085b      	lsrs	r3, r3, #1
 8007eae:	b29b      	uxth	r3, r3
 8007eb0:	005b      	lsls	r3, r3, #1
 8007eb2:	b29a      	uxth	r2, r3
 8007eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec8:	4413      	add	r3, r2
 8007eca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	00da      	lsls	r2, r3, #3
 8007ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007eda:	627b      	str	r3, [r7, #36]	@ 0x24
 8007edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ede:	881b      	ldrh	r3, [r3, #0]
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eea:	801a      	strh	r2, [r3, #0]
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10a      	bne.n	8007f0a <USB_ActivateEndpoint+0x28a>
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef6:	881b      	ldrh	r3, [r3, #0]
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007efe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f06:	801a      	strh	r2, [r3, #0]
 8007f08:	e041      	b.n	8007f8e <USB_ActivateEndpoint+0x30e>
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f10:	d81c      	bhi.n	8007f4c <USB_ActivateEndpoint+0x2cc>
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	085b      	lsrs	r3, r3, #1
 8007f18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	f003 0301 	and.w	r3, r3, #1
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d004      	beq.n	8007f32 <USB_ActivateEndpoint+0x2b2>
 8007f28:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	029b      	lsls	r3, r3, #10
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	4313      	orrs	r3, r2
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f48:	801a      	strh	r2, [r3, #0]
 8007f4a:	e020      	b.n	8007f8e <USB_ActivateEndpoint+0x30e>
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	095b      	lsrs	r3, r3, #5
 8007f52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	f003 031f 	and.w	r3, r3, #31
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d104      	bne.n	8007f6c <USB_ActivateEndpoint+0x2ec>
 8007f62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f66:	3b01      	subs	r3, #1
 8007f68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6e:	881b      	ldrh	r3, [r3, #0]
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	029b      	lsls	r3, r3, #10
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	4313      	orrs	r3, r2
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f88:	b29a      	uxth	r2, r3
 8007f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007f9c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007f9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d01b      	beq.n	8007fde <USB_ActivateEndpoint+0x35e>
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	781b      	ldrb	r3, [r3, #0]
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	4413      	add	r3, r2
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fbc:	843b      	strh	r3, [r7, #32]
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	441a      	add	r2, r3
 8007fc8:	8c3b      	ldrh	r3, [r7, #32]
 8007fca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fd2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007fd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d124      	bne.n	8008030 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4413      	add	r3, r2
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ff8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ffc:	83bb      	strh	r3, [r7, #28]
 8007ffe:	8bbb      	ldrh	r3, [r7, #28]
 8008000:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008004:	83bb      	strh	r3, [r7, #28]
 8008006:	8bbb      	ldrh	r3, [r7, #28]
 8008008:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800800c:	83bb      	strh	r3, [r7, #28]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	009b      	lsls	r3, r3, #2
 8008016:	441a      	add	r2, r3
 8008018:	8bbb      	ldrh	r3, [r7, #28]
 800801a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800801e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800802a:	b29b      	uxth	r3, r3
 800802c:	8013      	strh	r3, [r2, #0]
 800802e:	e306      	b.n	800863e <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	b29b      	uxth	r3, r3
 800803e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008046:	83fb      	strh	r3, [r7, #30]
 8008048:	8bfb      	ldrh	r3, [r7, #30]
 800804a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800804e:	83fb      	strh	r3, [r7, #30]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	441a      	add	r2, r3
 800805a:	8bfb      	ldrh	r3, [r7, #30]
 800805c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008060:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800806c:	b29b      	uxth	r3, r3
 800806e:	8013      	strh	r3, [r2, #0]
 8008070:	e2e5      	b.n	800863e <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	78db      	ldrb	r3, [r3, #3]
 8008076:	2b02      	cmp	r3, #2
 8008078:	d11e      	bne.n	80080b8 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4413      	add	r3, r2
 8008084:	881b      	ldrh	r3, [r3, #0]
 8008086:	b29b      	uxth	r3, r3
 8008088:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800808c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008090:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	009b      	lsls	r3, r3, #2
 800809c:	441a      	add	r2, r3
 800809e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80080a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080aa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80080ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	8013      	strh	r3, [r2, #0]
 80080b6:	e01d      	b.n	80080f4 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	881b      	ldrh	r3, [r3, #0]
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 80080ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080ce:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	441a      	add	r2, r3
 80080dc:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 80080e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80080ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080fe:	b29b      	uxth	r3, r3
 8008100:	461a      	mov	r2, r3
 8008102:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008104:	4413      	add	r3, r2
 8008106:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	00da      	lsls	r2, r3, #3
 800810e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008110:	4413      	add	r3, r2
 8008112:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008116:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	891b      	ldrh	r3, [r3, #8]
 800811c:	085b      	lsrs	r3, r3, #1
 800811e:	b29b      	uxth	r3, r3
 8008120:	005b      	lsls	r3, r3, #1
 8008122:	b29a      	uxth	r2, r3
 8008124:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008126:	801a      	strh	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	677b      	str	r3, [r7, #116]	@ 0x74
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008132:	b29b      	uxth	r3, r3
 8008134:	461a      	mov	r2, r3
 8008136:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008138:	4413      	add	r3, r2
 800813a:	677b      	str	r3, [r7, #116]	@ 0x74
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	00da      	lsls	r2, r3, #3
 8008142:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008144:	4413      	add	r3, r2
 8008146:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800814a:	673b      	str	r3, [r7, #112]	@ 0x70
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	895b      	ldrh	r3, [r3, #10]
 8008150:	085b      	lsrs	r3, r3, #1
 8008152:	b29b      	uxth	r3, r3
 8008154:	005b      	lsls	r3, r3, #1
 8008156:	b29a      	uxth	r2, r3
 8008158:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800815a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	785b      	ldrb	r3, [r3, #1]
 8008160:	2b00      	cmp	r3, #0
 8008162:	f040 81af 	bne.w	80084c4 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	881b      	ldrh	r3, [r3, #0]
 8008172:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8008176:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800817a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d01d      	beq.n	80081be <USB_ActivateEndpoint+0x53e>
 8008182:	687a      	ldr	r2, [r7, #4]
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	009b      	lsls	r3, r3, #2
 800818a:	4413      	add	r3, r2
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	b29b      	uxth	r3, r3
 8008190:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008194:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008198:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	441a      	add	r2, r3
 80081a6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80081aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80081ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80081b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80081b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081ba:	b29b      	uxth	r3, r3
 80081bc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	4413      	add	r3, r2
 80081c8:	881b      	ldrh	r3, [r3, #0]
 80081ca:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 80081ce:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 80081d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d01d      	beq.n	8008216 <USB_ActivateEndpoint+0x596>
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	4413      	add	r3, r2
 80081e4:	881b      	ldrh	r3, [r3, #0]
 80081e6:	b29b      	uxth	r3, r3
 80081e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081f0:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	009b      	lsls	r3, r3, #2
 80081fc:	441a      	add	r2, r3
 80081fe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8008202:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008206:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800820a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800820e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008212:	b29b      	uxth	r3, r3
 8008214:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	785b      	ldrb	r3, [r3, #1]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d16b      	bne.n	80082f6 <USB_ActivateEndpoint+0x676>
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008228:	b29b      	uxth	r3, r3
 800822a:	461a      	mov	r2, r3
 800822c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800822e:	4413      	add	r3, r2
 8008230:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	00da      	lsls	r2, r3, #3
 8008238:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800823a:	4413      	add	r3, r2
 800823c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008240:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008242:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008244:	881b      	ldrh	r3, [r3, #0]
 8008246:	b29b      	uxth	r3, r3
 8008248:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800824c:	b29a      	uxth	r2, r3
 800824e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008250:	801a      	strh	r2, [r3, #0]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d10a      	bne.n	8008270 <USB_ActivateEndpoint+0x5f0>
 800825a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	b29b      	uxth	r3, r3
 8008260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008268:	b29a      	uxth	r2, r3
 800826a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800826c:	801a      	strh	r2, [r3, #0]
 800826e:	e05d      	b.n	800832c <USB_ActivateEndpoint+0x6ac>
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	2b3e      	cmp	r3, #62	@ 0x3e
 8008276:	d81c      	bhi.n	80082b2 <USB_ActivateEndpoint+0x632>
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	085b      	lsrs	r3, r3, #1
 800827e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	2b00      	cmp	r3, #0
 800828c:	d004      	beq.n	8008298 <USB_ActivateEndpoint+0x618>
 800828e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008292:	3301      	adds	r3, #1
 8008294:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008298:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800829a:	881b      	ldrh	r3, [r3, #0]
 800829c:	b29a      	uxth	r2, r3
 800829e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	029b      	lsls	r3, r3, #10
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	4313      	orrs	r3, r2
 80082aa:	b29a      	uxth	r2, r3
 80082ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082ae:	801a      	strh	r2, [r3, #0]
 80082b0:	e03c      	b.n	800832c <USB_ActivateEndpoint+0x6ac>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	095b      	lsrs	r3, r3, #5
 80082b8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	f003 031f 	and.w	r3, r3, #31
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d104      	bne.n	80082d2 <USB_ActivateEndpoint+0x652>
 80082c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082cc:	3b01      	subs	r3, #1
 80082ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80082d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082d4:	881b      	ldrh	r3, [r3, #0]
 80082d6:	b29a      	uxth	r2, r3
 80082d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80082dc:	b29b      	uxth	r3, r3
 80082de:	029b      	lsls	r3, r3, #10
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	4313      	orrs	r3, r2
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082f2:	801a      	strh	r2, [r3, #0]
 80082f4:	e01a      	b.n	800832c <USB_ActivateEndpoint+0x6ac>
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	785b      	ldrb	r3, [r3, #1]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d116      	bne.n	800832c <USB_ActivateEndpoint+0x6ac>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	657b      	str	r3, [r7, #84]	@ 0x54
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008308:	b29b      	uxth	r3, r3
 800830a:	461a      	mov	r2, r3
 800830c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800830e:	4413      	add	r3, r2
 8008310:	657b      	str	r3, [r7, #84]	@ 0x54
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	00da      	lsls	r2, r3, #3
 8008318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800831a:	4413      	add	r3, r2
 800831c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008320:	653b      	str	r3, [r7, #80]	@ 0x50
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	b29a      	uxth	r2, r3
 8008328:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800832a:	801a      	strh	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	785b      	ldrb	r3, [r3, #1]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d16b      	bne.n	8008410 <USB_ActivateEndpoint+0x790>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008342:	b29b      	uxth	r3, r3
 8008344:	461a      	mov	r2, r3
 8008346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008348:	4413      	add	r3, r2
 800834a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	00da      	lsls	r2, r3, #3
 8008352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008354:	4413      	add	r3, r2
 8008356:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800835a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800835c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800835e:	881b      	ldrh	r3, [r3, #0]
 8008360:	b29b      	uxth	r3, r3
 8008362:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008366:	b29a      	uxth	r2, r3
 8008368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800836a:	801a      	strh	r2, [r3, #0]
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d10a      	bne.n	800838a <USB_ActivateEndpoint+0x70a>
 8008374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008376:	881b      	ldrh	r3, [r3, #0]
 8008378:	b29b      	uxth	r3, r3
 800837a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800837e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008382:	b29a      	uxth	r2, r3
 8008384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008386:	801a      	strh	r2, [r3, #0]
 8008388:	e05b      	b.n	8008442 <USB_ActivateEndpoint+0x7c2>
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	691b      	ldr	r3, [r3, #16]
 800838e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008390:	d81c      	bhi.n	80083cc <USB_ActivateEndpoint+0x74c>
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	085b      	lsrs	r3, r3, #1
 8008398:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	f003 0301 	and.w	r3, r3, #1
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d004      	beq.n	80083b2 <USB_ActivateEndpoint+0x732>
 80083a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80083ac:	3301      	adds	r3, #1
 80083ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80083b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	b29a      	uxth	r2, r3
 80083b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80083bc:	b29b      	uxth	r3, r3
 80083be:	029b      	lsls	r3, r3, #10
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	4313      	orrs	r3, r2
 80083c4:	b29a      	uxth	r2, r3
 80083c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083c8:	801a      	strh	r2, [r3, #0]
 80083ca:	e03a      	b.n	8008442 <USB_ActivateEndpoint+0x7c2>
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	691b      	ldr	r3, [r3, #16]
 80083d0:	095b      	lsrs	r3, r3, #5
 80083d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	f003 031f 	and.w	r3, r3, #31
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d104      	bne.n	80083ec <USB_ActivateEndpoint+0x76c>
 80083e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80083e6:	3b01      	subs	r3, #1
 80083e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80083ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ee:	881b      	ldrh	r3, [r3, #0]
 80083f0:	b29a      	uxth	r2, r3
 80083f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	029b      	lsls	r3, r3, #10
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	4313      	orrs	r3, r2
 80083fe:	b29b      	uxth	r3, r3
 8008400:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008404:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008408:	b29a      	uxth	r2, r3
 800840a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800840c:	801a      	strh	r2, [r3, #0]
 800840e:	e018      	b.n	8008442 <USB_ActivateEndpoint+0x7c2>
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	785b      	ldrb	r3, [r3, #1]
 8008414:	2b01      	cmp	r3, #1
 8008416:	d114      	bne.n	8008442 <USB_ActivateEndpoint+0x7c2>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800841e:	b29b      	uxth	r3, r3
 8008420:	461a      	mov	r2, r3
 8008422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008424:	4413      	add	r3, r2
 8008426:	647b      	str	r3, [r7, #68]	@ 0x44
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	00da      	lsls	r2, r3, #3
 800842e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008430:	4413      	add	r3, r2
 8008432:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008436:	643b      	str	r3, [r7, #64]	@ 0x40
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	691b      	ldr	r3, [r3, #16]
 800843c:	b29a      	uxth	r2, r3
 800843e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008440:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4413      	add	r3, r2
 800844c:	881b      	ldrh	r3, [r3, #0]
 800844e:	b29b      	uxth	r3, r3
 8008450:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008454:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008458:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800845a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800845c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008460:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8008462:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008464:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008468:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	441a      	add	r2, r3
 8008474:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008476:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800847a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800847e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008486:	b29b      	uxth	r3, r3
 8008488:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4413      	add	r3, r2
 8008494:	881b      	ldrh	r3, [r3, #0]
 8008496:	b29b      	uxth	r3, r3
 8008498:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800849c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80084a0:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	441a      	add	r2, r3
 80084ac:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80084ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80084b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80084b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084be:	b29b      	uxth	r3, r3
 80084c0:	8013      	strh	r3, [r2, #0]
 80084c2:	e0bc      	b.n	800863e <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	881b      	ldrh	r3, [r3, #0]
 80084d0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80084d4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80084d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d01d      	beq.n	800851c <USB_ActivateEndpoint+0x89c>
 80084e0:	687a      	ldr	r2, [r7, #4]
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4413      	add	r3, r2
 80084ea:	881b      	ldrh	r3, [r3, #0]
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80084f6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	441a      	add	r2, r3
 8008504:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008508:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800850c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008510:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008518:	b29b      	uxth	r3, r3
 800851a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800851c:	687a      	ldr	r2, [r7, #4]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	881b      	ldrh	r3, [r3, #0]
 8008528:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800852c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8008530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008534:	2b00      	cmp	r3, #0
 8008536:	d01d      	beq.n	8008574 <USB_ActivateEndpoint+0x8f4>
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4413      	add	r3, r2
 8008542:	881b      	ldrh	r3, [r3, #0]
 8008544:	b29b      	uxth	r3, r3
 8008546:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800854a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800854e:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	441a      	add	r2, r3
 800855c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8008560:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008564:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008568:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800856c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008570:	b29b      	uxth	r3, r3
 8008572:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	78db      	ldrb	r3, [r3, #3]
 8008578:	2b01      	cmp	r3, #1
 800857a:	d024      	beq.n	80085c6 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	881b      	ldrh	r3, [r3, #0]
 8008588:	b29b      	uxth	r3, r3
 800858a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800858e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008592:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8008596:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800859a:	f083 0320 	eor.w	r3, r3, #32
 800859e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	441a      	add	r2, r3
 80085ac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 80085b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	8013      	strh	r3, [r2, #0]
 80085c4:	e01d      	b.n	8008602 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80085c6:	687a      	ldr	r2, [r7, #4]
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	4413      	add	r3, r2
 80085d0:	881b      	ldrh	r3, [r3, #0]
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085dc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	441a      	add	r2, r3
 80085ea:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 80085ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80085f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80085f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80085fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085fe:	b29b      	uxth	r3, r3
 8008600:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	4413      	add	r3, r2
 800860c:	881b      	ldrh	r3, [r3, #0]
 800860e:	b29b      	uxth	r3, r3
 8008610:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008618:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	441a      	add	r2, r3
 8008626:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800862a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800862e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800863a:	b29b      	uxth	r3, r3
 800863c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800863e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 8008642:	4618      	mov	r0, r3
 8008644:	379c      	adds	r7, #156	@ 0x9c
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop

08008650 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008650:	b480      	push	{r7}
 8008652:	b08d      	sub	sp, #52	@ 0x34
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	7b1b      	ldrb	r3, [r3, #12]
 800865e:	2b00      	cmp	r3, #0
 8008660:	f040 808e 	bne.w	8008780 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	785b      	ldrb	r3, [r3, #1]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d044      	beq.n	80086f6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	4413      	add	r3, r2
 8008676:	881b      	ldrh	r3, [r3, #0]
 8008678:	81bb      	strh	r3, [r7, #12]
 800867a:	89bb      	ldrh	r3, [r7, #12]
 800867c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008680:	2b00      	cmp	r3, #0
 8008682:	d01b      	beq.n	80086bc <USB_DeactivateEndpoint+0x6c>
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4413      	add	r3, r2
 800868e:	881b      	ldrh	r3, [r3, #0]
 8008690:	b29b      	uxth	r3, r3
 8008692:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800869a:	817b      	strh	r3, [r7, #10]
 800869c:	687a      	ldr	r2, [r7, #4]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	441a      	add	r2, r3
 80086a6:	897b      	ldrh	r3, [r7, #10]
 80086a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4413      	add	r3, r2
 80086c6:	881b      	ldrh	r3, [r3, #0]
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086d2:	813b      	strh	r3, [r7, #8]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	441a      	add	r2, r3
 80086de:	893b      	ldrh	r3, [r7, #8]
 80086e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	8013      	strh	r3, [r2, #0]
 80086f4:	e192      	b.n	8008a1c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	781b      	ldrb	r3, [r3, #0]
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	4413      	add	r3, r2
 8008700:	881b      	ldrh	r3, [r3, #0]
 8008702:	827b      	strh	r3, [r7, #18]
 8008704:	8a7b      	ldrh	r3, [r7, #18]
 8008706:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d01b      	beq.n	8008746 <USB_DeactivateEndpoint+0xf6>
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	881b      	ldrh	r3, [r3, #0]
 800871a:	b29b      	uxth	r3, r3
 800871c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008720:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008724:	823b      	strh	r3, [r7, #16]
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	441a      	add	r2, r3
 8008730:	8a3b      	ldrh	r3, [r7, #16]
 8008732:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008736:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800873a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800873e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008742:	b29b      	uxth	r3, r3
 8008744:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008746:	687a      	ldr	r2, [r7, #4]
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	009b      	lsls	r3, r3, #2
 800874e:	4413      	add	r3, r2
 8008750:	881b      	ldrh	r3, [r3, #0]
 8008752:	b29b      	uxth	r3, r3
 8008754:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008758:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800875c:	81fb      	strh	r3, [r7, #14]
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	009b      	lsls	r3, r3, #2
 8008766:	441a      	add	r2, r3
 8008768:	89fb      	ldrh	r3, [r7, #14]
 800876a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800876e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800877a:	b29b      	uxth	r3, r3
 800877c:	8013      	strh	r3, [r2, #0]
 800877e:	e14d      	b.n	8008a1c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	785b      	ldrb	r3, [r3, #1]
 8008784:	2b00      	cmp	r3, #0
 8008786:	f040 80a5 	bne.w	80088d4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	881b      	ldrh	r3, [r3, #0]
 8008796:	843b      	strh	r3, [r7, #32]
 8008798:	8c3b      	ldrh	r3, [r7, #32]
 800879a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d01b      	beq.n	80087da <USB_DeactivateEndpoint+0x18a>
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4413      	add	r3, r2
 80087ac:	881b      	ldrh	r3, [r3, #0]
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087b8:	83fb      	strh	r3, [r7, #30]
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	441a      	add	r2, r3
 80087c4:	8bfb      	ldrh	r3, [r7, #30]
 80087c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087ce:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80087d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	4413      	add	r3, r2
 80087e4:	881b      	ldrh	r3, [r3, #0]
 80087e6:	83bb      	strh	r3, [r7, #28]
 80087e8:	8bbb      	ldrh	r3, [r7, #28]
 80087ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d01b      	beq.n	800882a <USB_DeactivateEndpoint+0x1da>
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	009b      	lsls	r3, r3, #2
 80087fa:	4413      	add	r3, r2
 80087fc:	881b      	ldrh	r3, [r3, #0]
 80087fe:	b29b      	uxth	r3, r3
 8008800:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008804:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008808:	837b      	strh	r3, [r7, #26]
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	781b      	ldrb	r3, [r3, #0]
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	441a      	add	r2, r3
 8008814:	8b7b      	ldrh	r3, [r7, #26]
 8008816:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800881a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800881e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008822:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008826:	b29b      	uxth	r3, r3
 8008828:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	4413      	add	r3, r2
 8008834:	881b      	ldrh	r3, [r3, #0]
 8008836:	b29b      	uxth	r3, r3
 8008838:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800883c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008840:	833b      	strh	r3, [r7, #24]
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	009b      	lsls	r3, r3, #2
 800884a:	441a      	add	r2, r3
 800884c:	8b3b      	ldrh	r3, [r7, #24]
 800884e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008852:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008856:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800885a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800885e:	b29b      	uxth	r3, r3
 8008860:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	781b      	ldrb	r3, [r3, #0]
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	4413      	add	r3, r2
 800886c:	881b      	ldrh	r3, [r3, #0]
 800886e:	b29b      	uxth	r3, r3
 8008870:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008878:	82fb      	strh	r3, [r7, #22]
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	441a      	add	r2, r3
 8008884:	8afb      	ldrh	r3, [r7, #22]
 8008886:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800888a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800888e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008896:	b29b      	uxth	r3, r3
 8008898:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	881b      	ldrh	r3, [r3, #0]
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088b0:	82bb      	strh	r3, [r7, #20]
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	441a      	add	r2, r3
 80088bc:	8abb      	ldrh	r3, [r7, #20]
 80088be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088ce:	b29b      	uxth	r3, r3
 80088d0:	8013      	strh	r3, [r2, #0]
 80088d2:	e0a3      	b.n	8008a1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	009b      	lsls	r3, r3, #2
 80088dc:	4413      	add	r3, r2
 80088de:	881b      	ldrh	r3, [r3, #0]
 80088e0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80088e2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80088e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d01b      	beq.n	8008924 <USB_DeactivateEndpoint+0x2d4>
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	009b      	lsls	r3, r3, #2
 80088f4:	4413      	add	r3, r2
 80088f6:	881b      	ldrh	r3, [r3, #0]
 80088f8:	b29b      	uxth	r3, r3
 80088fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008902:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	441a      	add	r2, r3
 800890e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8008910:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008914:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008918:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800891c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008920:	b29b      	uxth	r3, r3
 8008922:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008924:	687a      	ldr	r2, [r7, #4]
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	4413      	add	r3, r2
 800892e:	881b      	ldrh	r3, [r3, #0]
 8008930:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8008932:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008938:	2b00      	cmp	r3, #0
 800893a:	d01b      	beq.n	8008974 <USB_DeactivateEndpoint+0x324>
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	781b      	ldrb	r3, [r3, #0]
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4413      	add	r3, r2
 8008946:	881b      	ldrh	r3, [r3, #0]
 8008948:	b29b      	uxth	r3, r3
 800894a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800894e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008952:	853b      	strh	r3, [r7, #40]	@ 0x28
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	441a      	add	r2, r3
 800895e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008960:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008964:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008968:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800896c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008970:	b29b      	uxth	r3, r3
 8008972:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	4413      	add	r3, r2
 800897e:	881b      	ldrh	r3, [r3, #0]
 8008980:	b29b      	uxth	r3, r3
 8008982:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800898a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	441a      	add	r2, r3
 8008996:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008998:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800899c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80089a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089a8:	b29b      	uxth	r3, r3
 80089aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	4413      	add	r3, r2
 80089b6:	881b      	ldrh	r3, [r3, #0]
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089c2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80089c4:	687a      	ldr	r2, [r7, #4]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	441a      	add	r2, r3
 80089ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089e0:	b29b      	uxth	r3, r3
 80089e2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80089e4:	687a      	ldr	r2, [r7, #4]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4413      	add	r3, r2
 80089ee:	881b      	ldrh	r3, [r3, #0]
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80089f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089fa:	847b      	strh	r3, [r7, #34]	@ 0x22
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	441a      	add	r2, r3
 8008a06:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008a08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3734      	adds	r7, #52	@ 0x34
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b0ac      	sub	sp, #176	@ 0xb0
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	785b      	ldrb	r3, [r3, #1]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	f040 84ca 	bne.w	80093d2 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	699a      	ldr	r2, [r3, #24]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d904      	bls.n	8008a54 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a52:	e003      	b.n	8008a5c <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	7b1b      	ldrb	r3, [r3, #12]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d122      	bne.n	8008aaa <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	6959      	ldr	r1, [r3, #20]
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	88da      	ldrh	r2, [r3, #6]
 8008a6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008a70:	b29b      	uxth	r3, r3
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 febd 	bl	80097f2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	613b      	str	r3, [r7, #16]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a82:	b29b      	uxth	r3, r3
 8008a84:	461a      	mov	r2, r3
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	4413      	add	r3, r2
 8008a8a:	613b      	str	r3, [r7, #16]
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	00da      	lsls	r2, r3, #3
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	4413      	add	r3, r2
 8008a96:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a9a:	60fb      	str	r3, [r7, #12]
 8008a9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	801a      	strh	r2, [r3, #0]
 8008aa6:	f000 bc6f 	b.w	8009388 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	78db      	ldrb	r3, [r3, #3]
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	f040 831e 	bne.w	80090f0 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	6a1a      	ldr	r2, [r3, #32]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	f240 82cf 	bls.w	8009060 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4413      	add	r3, r2
 8008acc:	881b      	ldrh	r3, [r3, #0]
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008ad4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ad8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	441a      	add	r2, r3
 8008ae6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008aea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008aee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008af2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8008af6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	6a1a      	ldr	r2, [r3, #32]
 8008b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b06:	1ad2      	subs	r2, r2, r3
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	881b      	ldrh	r3, [r3, #0]
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	f000 814f 	beq.w	8008dc2 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	785b      	ldrb	r3, [r3, #1]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d16b      	bne.n	8008c08 <USB_EPStartXfer+0x1de>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b40:	4413      	add	r3, r2
 8008b42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	00da      	lsls	r2, r3, #3
 8008b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b56:	881b      	ldrh	r3, [r3, #0]
 8008b58:	b29b      	uxth	r3, r3
 8008b5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b5e:	b29a      	uxth	r2, r3
 8008b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b62:	801a      	strh	r2, [r3, #0]
 8008b64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10a      	bne.n	8008b82 <USB_EPStartXfer+0x158>
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6e:	881b      	ldrh	r3, [r3, #0]
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b7a:	b29a      	uxth	r2, r3
 8008b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7e:	801a      	strh	r2, [r3, #0]
 8008b80:	e05b      	b.n	8008c3a <USB_EPStartXfer+0x210>
 8008b82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b86:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b88:	d81c      	bhi.n	8008bc4 <USB_EPStartXfer+0x19a>
 8008b8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b8e:	085b      	lsrs	r3, r3, #1
 8008b90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008b94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b98:	f003 0301 	and.w	r3, r3, #1
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d004      	beq.n	8008baa <USB_EPStartXfer+0x180>
 8008ba0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bac:	881b      	ldrh	r3, [r3, #0]
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	029b      	lsls	r3, r3, #10
 8008bb8:	b29b      	uxth	r3, r3
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	b29a      	uxth	r2, r3
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc0:	801a      	strh	r2, [r3, #0]
 8008bc2:	e03a      	b.n	8008c3a <USB_EPStartXfer+0x210>
 8008bc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008bc8:	095b      	lsrs	r3, r3, #5
 8008bca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008bce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008bd2:	f003 031f 	and.w	r3, r3, #31
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d104      	bne.n	8008be4 <USB_EPStartXfer+0x1ba>
 8008bda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008bde:	3b01      	subs	r3, #1
 8008be0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be6:	881b      	ldrh	r3, [r3, #0]
 8008be8:	b29a      	uxth	r2, r3
 8008bea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	029b      	lsls	r3, r3, #10
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c04:	801a      	strh	r2, [r3, #0]
 8008c06:	e018      	b.n	8008c3a <USB_EPStartXfer+0x210>
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	785b      	ldrb	r3, [r3, #1]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d114      	bne.n	8008c3a <USB_EPStartXfer+0x210>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	461a      	mov	r2, r3
 8008c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1c:	4413      	add	r3, r2
 8008c1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	00da      	lsls	r2, r3, #3
 8008c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c28:	4413      	add	r3, r2
 8008c2a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c38:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	895b      	ldrh	r3, [r3, #10]
 8008c3e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	6959      	ldr	r1, [r3, #20]
 8008c46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c4a:	b29b      	uxth	r3, r3
 8008c4c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fdce 	bl	80097f2 <USB_WritePMA>
            ep->xfer_buff += len;
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	695a      	ldr	r2, [r3, #20]
 8008c5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c5e:	441a      	add	r2, r3
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	6a1a      	ldr	r2, [r3, #32]
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d907      	bls.n	8008c80 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	6a1a      	ldr	r2, [r3, #32]
 8008c74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008c78:	1ad2      	subs	r2, r2, r3
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	621a      	str	r2, [r3, #32]
 8008c7e:	e006      	b.n	8008c8e <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	6a1b      	ldr	r3, [r3, #32]
 8008c84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	785b      	ldrb	r3, [r3, #1]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d16b      	bne.n	8008d6e <USB_EPStartXfer+0x344>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	61bb      	str	r3, [r7, #24]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	61bb      	str	r3, [r7, #24]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	781b      	ldrb	r3, [r3, #0]
 8008cae:	00da      	lsls	r2, r3, #3
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	4413      	add	r3, r2
 8008cb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008cb8:	617b      	str	r3, [r7, #20]
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	881b      	ldrh	r3, [r3, #0]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cc4:	b29a      	uxth	r2, r3
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	801a      	strh	r2, [r3, #0]
 8008cca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10a      	bne.n	8008ce8 <USB_EPStartXfer+0x2be>
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ce0:	b29a      	uxth	r2, r3
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	801a      	strh	r2, [r3, #0]
 8008ce6:	e05d      	b.n	8008da4 <USB_EPStartXfer+0x37a>
 8008ce8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cec:	2b3e      	cmp	r3, #62	@ 0x3e
 8008cee:	d81c      	bhi.n	8008d2a <USB_EPStartXfer+0x300>
 8008cf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cf4:	085b      	lsrs	r3, r3, #1
 8008cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008cfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d004      	beq.n	8008d10 <USB_EPStartXfer+0x2e6>
 8008d06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	881b      	ldrh	r3, [r3, #0]
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	029b      	lsls	r3, r3, #10
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	4313      	orrs	r3, r2
 8008d22:	b29a      	uxth	r2, r3
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	801a      	strh	r2, [r3, #0]
 8008d28:	e03c      	b.n	8008da4 <USB_EPStartXfer+0x37a>
 8008d2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d2e:	095b      	lsrs	r3, r3, #5
 8008d30:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008d34:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d38:	f003 031f 	and.w	r3, r3, #31
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d104      	bne.n	8008d4a <USB_EPStartXfer+0x320>
 8008d40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008d44:	3b01      	subs	r3, #1
 8008d46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	881b      	ldrh	r3, [r3, #0]
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008d54:	b29b      	uxth	r3, r3
 8008d56:	029b      	lsls	r3, r3, #10
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	801a      	strh	r2, [r3, #0]
 8008d6c:	e01a      	b.n	8008da4 <USB_EPStartXfer+0x37a>
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	785b      	ldrb	r3, [r3, #1]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d116      	bne.n	8008da4 <USB_EPStartXfer+0x37a>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	623b      	str	r3, [r7, #32]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	461a      	mov	r2, r3
 8008d84:	6a3b      	ldr	r3, [r7, #32]
 8008d86:	4413      	add	r3, r2
 8008d88:	623b      	str	r3, [r7, #32]
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	00da      	lsls	r2, r3, #3
 8008d90:	6a3b      	ldr	r3, [r7, #32]
 8008d92:	4413      	add	r3, r2
 8008d94:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008d98:	61fb      	str	r3, [r7, #28]
 8008d9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	69fb      	ldr	r3, [r7, #28]
 8008da2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	891b      	ldrh	r3, [r3, #8]
 8008da8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	6959      	ldr	r1, [r3, #20]
 8008db0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fd19 	bl	80097f2 <USB_WritePMA>
 8008dc0:	e2e2      	b.n	8009388 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	785b      	ldrb	r3, [r3, #1]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d16b      	bne.n	8008ea2 <USB_EPStartXfer+0x478>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dda:	4413      	add	r3, r2
 8008ddc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	00da      	lsls	r2, r3, #3
 8008de4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008de6:	4413      	add	r3, r2
 8008de8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008dec:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008df0:	881b      	ldrh	r3, [r3, #0]
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008df8:	b29a      	uxth	r2, r3
 8008dfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dfc:	801a      	strh	r2, [r3, #0]
 8008dfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d10a      	bne.n	8008e1c <USB_EPStartXfer+0x3f2>
 8008e06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e08:	881b      	ldrh	r3, [r3, #0]
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e14:	b29a      	uxth	r2, r3
 8008e16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e18:	801a      	strh	r2, [r3, #0]
 8008e1a:	e05d      	b.n	8008ed8 <USB_EPStartXfer+0x4ae>
 8008e1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e20:	2b3e      	cmp	r3, #62	@ 0x3e
 8008e22:	d81c      	bhi.n	8008e5e <USB_EPStartXfer+0x434>
 8008e24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e28:	085b      	lsrs	r3, r3, #1
 8008e2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008e2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e32:	f003 0301 	and.w	r3, r3, #1
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d004      	beq.n	8008e44 <USB_EPStartXfer+0x41a>
 8008e3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e3e:	3301      	adds	r3, #1
 8008e40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e46:	881b      	ldrh	r3, [r3, #0]
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	029b      	lsls	r3, r3, #10
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	4313      	orrs	r3, r2
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e5a:	801a      	strh	r2, [r3, #0]
 8008e5c:	e03c      	b.n	8008ed8 <USB_EPStartXfer+0x4ae>
 8008e5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e62:	095b      	lsrs	r3, r3, #5
 8008e64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008e68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008e6c:	f003 031f 	and.w	r3, r3, #31
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d104      	bne.n	8008e7e <USB_EPStartXfer+0x454>
 8008e74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008e7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e80:	881b      	ldrh	r3, [r3, #0]
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	029b      	lsls	r3, r3, #10
 8008e8c:	b29b      	uxth	r3, r3
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e9e:	801a      	strh	r2, [r3, #0]
 8008ea0:	e01a      	b.n	8008ed8 <USB_EPStartXfer+0x4ae>
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	785b      	ldrb	r3, [r3, #1]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d116      	bne.n	8008ed8 <USB_EPStartXfer+0x4ae>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	653b      	str	r3, [r7, #80]	@ 0x50
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008eb4:	b29b      	uxth	r3, r3
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008eba:	4413      	add	r3, r2
 8008ebc:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	00da      	lsls	r2, r3, #3
 8008ec4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ec6:	4413      	add	r3, r2
 8008ec8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008ecc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ece:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ed6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	891b      	ldrh	r3, [r3, #8]
 8008edc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	6959      	ldr	r1, [r3, #20]
 8008ee4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 fc7f 	bl	80097f2 <USB_WritePMA>
            ep->xfer_buff += len;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	695a      	ldr	r2, [r3, #20]
 8008ef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008efc:	441a      	add	r2, r3
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	6a1a      	ldr	r2, [r3, #32]
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d907      	bls.n	8008f1e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	6a1a      	ldr	r2, [r3, #32]
 8008f12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f16:	1ad2      	subs	r2, r2, r3
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	621a      	str	r2, [r3, #32]
 8008f1c:	e006      	b.n	8008f2c <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	6a1b      	ldr	r3, [r3, #32]
 8008f22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	785b      	ldrb	r3, [r3, #1]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d16b      	bne.n	8009010 <USB_EPStartXfer+0x5e6>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	461a      	mov	r2, r3
 8008f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f48:	4413      	add	r3, r2
 8008f4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	00da      	lsls	r2, r3, #3
 8008f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f54:	4413      	add	r3, r2
 8008f56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f5e:	881b      	ldrh	r3, [r3, #0]
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f66:	b29a      	uxth	r2, r3
 8008f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f6a:	801a      	strh	r2, [r3, #0]
 8008f6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10a      	bne.n	8008f8a <USB_EPStartXfer+0x560>
 8008f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f76:	881b      	ldrh	r3, [r3, #0]
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f86:	801a      	strh	r2, [r3, #0]
 8008f88:	e05b      	b.n	8009042 <USB_EPStartXfer+0x618>
 8008f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f8e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f90:	d81c      	bhi.n	8008fcc <USB_EPStartXfer+0x5a2>
 8008f92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008f96:	085b      	lsrs	r3, r3, #1
 8008f98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008f9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fa0:	f003 0301 	and.w	r3, r3, #1
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d004      	beq.n	8008fb2 <USB_EPStartXfer+0x588>
 8008fa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008fac:	3301      	adds	r3, #1
 8008fae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fb4:	881b      	ldrh	r3, [r3, #0]
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	029b      	lsls	r3, r3, #10
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	b29a      	uxth	r2, r3
 8008fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fc8:	801a      	strh	r2, [r3, #0]
 8008fca:	e03a      	b.n	8009042 <USB_EPStartXfer+0x618>
 8008fcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fd0:	095b      	lsrs	r3, r3, #5
 8008fd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008fda:	f003 031f 	and.w	r3, r3, #31
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d104      	bne.n	8008fec <USB_EPStartXfer+0x5c2>
 8008fe2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fee:	881b      	ldrh	r3, [r3, #0]
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	029b      	lsls	r3, r3, #10
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009008:	b29a      	uxth	r2, r3
 800900a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800900c:	801a      	strh	r2, [r3, #0]
 800900e:	e018      	b.n	8009042 <USB_EPStartXfer+0x618>
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	785b      	ldrb	r3, [r3, #1]
 8009014:	2b01      	cmp	r3, #1
 8009016:	d114      	bne.n	8009042 <USB_EPStartXfer+0x618>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800901e:	b29b      	uxth	r3, r3
 8009020:	461a      	mov	r2, r3
 8009022:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009024:	4413      	add	r3, r2
 8009026:	643b      	str	r3, [r7, #64]	@ 0x40
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	00da      	lsls	r2, r3, #3
 800902e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009030:	4413      	add	r3, r2
 8009032:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009036:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009038:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800903c:	b29a      	uxth	r2, r3
 800903e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009040:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	895b      	ldrh	r3, [r3, #10]
 8009046:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	6959      	ldr	r1, [r3, #20]
 800904e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009052:	b29b      	uxth	r3, r3
 8009054:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 fbca 	bl	80097f2 <USB_WritePMA>
 800905e:	e193      	b.n	8009388 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	6a1b      	ldr	r3, [r3, #32]
 8009064:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	881b      	ldrh	r3, [r3, #0]
 8009074:	b29b      	uxth	r3, r3
 8009076:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800907a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800907e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	441a      	add	r2, r3
 800908c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009090:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009094:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009098:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800909c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	461a      	mov	r2, r3
 80090b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090b4:	4413      	add	r3, r2
 80090b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	00da      	lsls	r2, r3, #3
 80090be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80090c0:	4413      	add	r3, r2
 80090c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80090c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80090c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090cc:	b29a      	uxth	r2, r3
 80090ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80090d0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	891b      	ldrh	r3, [r3, #8]
 80090d6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	6959      	ldr	r1, [r3, #20]
 80090de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 fb82 	bl	80097f2 <USB_WritePMA>
 80090ee:	e14b      	b.n	8009388 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	6a1a      	ldr	r2, [r3, #32]
 80090f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090f8:	1ad2      	subs	r2, r2, r3
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	009b      	lsls	r3, r3, #2
 8009106:	4413      	add	r3, r2
 8009108:	881b      	ldrh	r3, [r3, #0]
 800910a:	b29b      	uxth	r3, r3
 800910c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009110:	2b00      	cmp	r3, #0
 8009112:	f000 809a 	beq.w	800924a <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	673b      	str	r3, [r7, #112]	@ 0x70
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	785b      	ldrb	r3, [r3, #1]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d16b      	bne.n	80091fa <USB_EPStartXfer+0x7d0>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800912c:	b29b      	uxth	r3, r3
 800912e:	461a      	mov	r2, r3
 8009130:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009132:	4413      	add	r3, r2
 8009134:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	00da      	lsls	r2, r3, #3
 800913c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800913e:	4413      	add	r3, r2
 8009140:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009144:	667b      	str	r3, [r7, #100]	@ 0x64
 8009146:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	b29b      	uxth	r3, r3
 800914c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009150:	b29a      	uxth	r2, r3
 8009152:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009154:	801a      	strh	r2, [r3, #0]
 8009156:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800915a:	2b00      	cmp	r3, #0
 800915c:	d10a      	bne.n	8009174 <USB_EPStartXfer+0x74a>
 800915e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009160:	881b      	ldrh	r3, [r3, #0]
 8009162:	b29b      	uxth	r3, r3
 8009164:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009168:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800916c:	b29a      	uxth	r2, r3
 800916e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009170:	801a      	strh	r2, [r3, #0]
 8009172:	e05b      	b.n	800922c <USB_EPStartXfer+0x802>
 8009174:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009178:	2b3e      	cmp	r3, #62	@ 0x3e
 800917a:	d81c      	bhi.n	80091b6 <USB_EPStartXfer+0x78c>
 800917c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009180:	085b      	lsrs	r3, r3, #1
 8009182:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009186:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800918a:	f003 0301 	and.w	r3, r3, #1
 800918e:	2b00      	cmp	r3, #0
 8009190:	d004      	beq.n	800919c <USB_EPStartXfer+0x772>
 8009192:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009196:	3301      	adds	r3, #1
 8009198:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800919c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800919e:	881b      	ldrh	r3, [r3, #0]
 80091a0:	b29a      	uxth	r2, r3
 80091a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	029b      	lsls	r3, r3, #10
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	4313      	orrs	r3, r2
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80091b2:	801a      	strh	r2, [r3, #0]
 80091b4:	e03a      	b.n	800922c <USB_EPStartXfer+0x802>
 80091b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091ba:	095b      	lsrs	r3, r3, #5
 80091bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80091c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091c4:	f003 031f 	and.w	r3, r3, #31
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d104      	bne.n	80091d6 <USB_EPStartXfer+0x7ac>
 80091cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80091d0:	3b01      	subs	r3, #1
 80091d2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80091d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	b29a      	uxth	r2, r3
 80091dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	029b      	lsls	r3, r3, #10
 80091e4:	b29b      	uxth	r3, r3
 80091e6:	4313      	orrs	r3, r2
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091f2:	b29a      	uxth	r2, r3
 80091f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80091f6:	801a      	strh	r2, [r3, #0]
 80091f8:	e018      	b.n	800922c <USB_EPStartXfer+0x802>
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	785b      	ldrb	r3, [r3, #1]
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d114      	bne.n	800922c <USB_EPStartXfer+0x802>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009208:	b29b      	uxth	r3, r3
 800920a:	461a      	mov	r2, r3
 800920c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800920e:	4413      	add	r3, r2
 8009210:	673b      	str	r3, [r7, #112]	@ 0x70
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	00da      	lsls	r2, r3, #3
 8009218:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800921a:	4413      	add	r3, r2
 800921c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009220:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009222:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009226:	b29a      	uxth	r2, r3
 8009228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800922a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	895b      	ldrh	r3, [r3, #10]
 8009230:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	6959      	ldr	r1, [r3, #20]
 8009238:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800923c:	b29b      	uxth	r3, r3
 800923e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fad5 	bl	80097f2 <USB_WritePMA>
 8009248:	e09e      	b.n	8009388 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	785b      	ldrb	r3, [r3, #1]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d16b      	bne.n	800932a <USB_EPStartXfer+0x900>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800925c:	b29b      	uxth	r3, r3
 800925e:	461a      	mov	r2, r3
 8009260:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009262:	4413      	add	r3, r2
 8009264:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	781b      	ldrb	r3, [r3, #0]
 800926a:	00da      	lsls	r2, r3, #3
 800926c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800926e:	4413      	add	r3, r2
 8009270:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009274:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009276:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009278:	881b      	ldrh	r3, [r3, #0]
 800927a:	b29b      	uxth	r3, r3
 800927c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009280:	b29a      	uxth	r2, r3
 8009282:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009284:	801a      	strh	r2, [r3, #0]
 8009286:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10a      	bne.n	80092a4 <USB_EPStartXfer+0x87a>
 800928e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009290:	881b      	ldrh	r3, [r3, #0]
 8009292:	b29b      	uxth	r3, r3
 8009294:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009298:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800929c:	b29a      	uxth	r2, r3
 800929e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092a0:	801a      	strh	r2, [r3, #0]
 80092a2:	e063      	b.n	800936c <USB_EPStartXfer+0x942>
 80092a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80092aa:	d81c      	bhi.n	80092e6 <USB_EPStartXfer+0x8bc>
 80092ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092b0:	085b      	lsrs	r3, r3, #1
 80092b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80092b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092ba:	f003 0301 	and.w	r3, r3, #1
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d004      	beq.n	80092cc <USB_EPStartXfer+0x8a2>
 80092c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80092c6:	3301      	adds	r3, #1
 80092c8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80092cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092ce:	881b      	ldrh	r3, [r3, #0]
 80092d0:	b29a      	uxth	r2, r3
 80092d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	029b      	lsls	r3, r3, #10
 80092da:	b29b      	uxth	r3, r3
 80092dc:	4313      	orrs	r3, r2
 80092de:	b29a      	uxth	r2, r3
 80092e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80092e2:	801a      	strh	r2, [r3, #0]
 80092e4:	e042      	b.n	800936c <USB_EPStartXfer+0x942>
 80092e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092ea:	095b      	lsrs	r3, r3, #5
 80092ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80092f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092f4:	f003 031f 	and.w	r3, r3, #31
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d104      	bne.n	8009306 <USB_EPStartXfer+0x8dc>
 80092fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009300:	3b01      	subs	r3, #1
 8009302:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009306:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009308:	881b      	ldrh	r3, [r3, #0]
 800930a:	b29a      	uxth	r2, r3
 800930c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009310:	b29b      	uxth	r3, r3
 8009312:	029b      	lsls	r3, r3, #10
 8009314:	b29b      	uxth	r3, r3
 8009316:	4313      	orrs	r3, r2
 8009318:	b29b      	uxth	r3, r3
 800931a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800931e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009322:	b29a      	uxth	r2, r3
 8009324:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009326:	801a      	strh	r2, [r3, #0]
 8009328:	e020      	b.n	800936c <USB_EPStartXfer+0x942>
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	785b      	ldrb	r3, [r3, #1]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d11c      	bne.n	800936c <USB_EPStartXfer+0x942>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800933e:	b29b      	uxth	r3, r3
 8009340:	461a      	mov	r2, r3
 8009342:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009346:	4413      	add	r3, r2
 8009348:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	00da      	lsls	r2, r3, #3
 8009352:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009356:	4413      	add	r3, r2
 8009358:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800935c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009360:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009364:	b29a      	uxth	r2, r3
 8009366:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800936a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	891b      	ldrh	r3, [r3, #8]
 8009370:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	6959      	ldr	r1, [r3, #20]
 8009378:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800937c:	b29b      	uxth	r3, r3
 800937e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fa35 	bl	80097f2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	4413      	add	r3, r2
 8009392:	881b      	ldrh	r3, [r3, #0]
 8009394:	b29b      	uxth	r3, r3
 8009396:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800939a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800939e:	817b      	strh	r3, [r7, #10]
 80093a0:	897b      	ldrh	r3, [r7, #10]
 80093a2:	f083 0310 	eor.w	r3, r3, #16
 80093a6:	817b      	strh	r3, [r7, #10]
 80093a8:	897b      	ldrh	r3, [r7, #10]
 80093aa:	f083 0320 	eor.w	r3, r3, #32
 80093ae:	817b      	strh	r3, [r7, #10]
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	441a      	add	r2, r3
 80093ba:	897b      	ldrh	r3, [r7, #10]
 80093bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80093c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80093c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80093c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093cc:	b29b      	uxth	r3, r3
 80093ce:	8013      	strh	r3, [r2, #0]
 80093d0:	e0d5      	b.n	800957e <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	7b1b      	ldrb	r3, [r3, #12]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d156      	bne.n	8009488 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	699b      	ldr	r3, [r3, #24]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d122      	bne.n	8009428 <USB_EPStartXfer+0x9fe>
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	78db      	ldrb	r3, [r3, #3]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d11e      	bne.n	8009428 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 80093ea:	687a      	ldr	r2, [r7, #4]
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	4413      	add	r3, r2
 80093f4:	881b      	ldrh	r3, [r3, #0]
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009400:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8009404:	687a      	ldr	r2, [r7, #4]
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	441a      	add	r2, r3
 800940e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009412:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009416:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800941a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800941e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009422:	b29b      	uxth	r3, r3
 8009424:	8013      	strh	r3, [r2, #0]
 8009426:	e01d      	b.n	8009464 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	781b      	ldrb	r3, [r3, #0]
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	881b      	ldrh	r3, [r3, #0]
 8009434:	b29b      	uxth	r3, r3
 8009436:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800943a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800943e:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	441a      	add	r2, r3
 800944c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8009450:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009454:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009458:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800945c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009460:	b29b      	uxth	r3, r3
 8009462:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	699a      	ldr	r2, [r3, #24]
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	691b      	ldr	r3, [r3, #16]
 800946c:	429a      	cmp	r2, r3
 800946e:	d907      	bls.n	8009480 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	699a      	ldr	r2, [r3, #24]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	1ad2      	subs	r2, r2, r3
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	619a      	str	r2, [r3, #24]
 800947e:	e054      	b.n	800952a <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	2200      	movs	r2, #0
 8009484:	619a      	str	r2, [r3, #24]
 8009486:	e050      	b.n	800952a <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	78db      	ldrb	r3, [r3, #3]
 800948c:	2b02      	cmp	r3, #2
 800948e:	d142      	bne.n	8009516 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	69db      	ldr	r3, [r3, #28]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d048      	beq.n	800952a <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	4413      	add	r3, r2
 80094a2:	881b      	ldrh	r3, [r3, #0]
 80094a4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80094a8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80094ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d005      	beq.n	80094c0 <USB_EPStartXfer+0xa96>
 80094b4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80094b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d10b      	bne.n	80094d8 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80094c0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80094c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d12e      	bne.n	800952a <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80094cc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 80094d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d128      	bne.n	800952a <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	781b      	ldrb	r3, [r3, #0]
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	4413      	add	r3, r2
 80094e2:	881b      	ldrh	r3, [r3, #0]
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094ee:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 80094f2:	687a      	ldr	r2, [r7, #4]
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	441a      	add	r2, r3
 80094fc:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 8009500:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009504:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009508:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800950c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009510:	b29b      	uxth	r3, r3
 8009512:	8013      	strh	r3, [r2, #0]
 8009514:	e009      	b.n	800952a <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	78db      	ldrb	r3, [r3, #3]
 800951a:	2b01      	cmp	r3, #1
 800951c:	d103      	bne.n	8009526 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	2200      	movs	r2, #0
 8009522:	619a      	str	r2, [r3, #24]
 8009524:	e001      	b.n	800952a <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	e02a      	b.n	8009580 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800952a:	687a      	ldr	r2, [r7, #4]
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	881b      	ldrh	r3, [r3, #0]
 8009536:	b29b      	uxth	r3, r3
 8009538:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800953c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009540:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009544:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009548:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800954c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009550:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009554:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009558:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	441a      	add	r2, r3
 8009566:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800956a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800956e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009576:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800957a:	b29b      	uxth	r3, r3
 800957c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	4618      	mov	r0, r3
 8009582:	37b0      	adds	r7, #176	@ 0xb0
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	785b      	ldrb	r3, [r3, #1]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d020      	beq.n	80095dc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4413      	add	r3, r2
 80095a4:	881b      	ldrh	r3, [r3, #0]
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095b0:	81bb      	strh	r3, [r7, #12]
 80095b2:	89bb      	ldrh	r3, [r7, #12]
 80095b4:	f083 0310 	eor.w	r3, r3, #16
 80095b8:	81bb      	strh	r3, [r7, #12]
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	441a      	add	r2, r3
 80095c4:	89bb      	ldrh	r3, [r7, #12]
 80095c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80095ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80095ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	8013      	strh	r3, [r2, #0]
 80095da:	e01f      	b.n	800961c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4413      	add	r3, r2
 80095e6:	881b      	ldrh	r3, [r3, #0]
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80095ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095f2:	81fb      	strh	r3, [r7, #14]
 80095f4:	89fb      	ldrh	r3, [r7, #14]
 80095f6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80095fa:	81fb      	strh	r3, [r7, #14]
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	441a      	add	r2, r3
 8009606:	89fb      	ldrh	r3, [r7, #14]
 8009608:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800960c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009610:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009618:	b29b      	uxth	r3, r3
 800961a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3714      	adds	r7, #20
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr

0800962a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800962a:	b480      	push	{r7}
 800962c:	b087      	sub	sp, #28
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
 8009632:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	785b      	ldrb	r3, [r3, #1]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d04c      	beq.n	80096d6 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	4413      	add	r3, r2
 8009646:	881b      	ldrh	r3, [r3, #0]
 8009648:	823b      	strh	r3, [r7, #16]
 800964a:	8a3b      	ldrh	r3, [r7, #16]
 800964c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009650:	2b00      	cmp	r3, #0
 8009652:	d01b      	beq.n	800968c <USB_EPClearStall+0x62>
 8009654:	687a      	ldr	r2, [r7, #4]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	781b      	ldrb	r3, [r3, #0]
 800965a:	009b      	lsls	r3, r3, #2
 800965c:	4413      	add	r3, r2
 800965e:	881b      	ldrh	r3, [r3, #0]
 8009660:	b29b      	uxth	r3, r3
 8009662:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800966a:	81fb      	strh	r3, [r7, #14]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	781b      	ldrb	r3, [r3, #0]
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	441a      	add	r2, r3
 8009676:	89fb      	ldrh	r3, [r7, #14]
 8009678:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800967c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009680:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009684:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009688:	b29b      	uxth	r3, r3
 800968a:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	78db      	ldrb	r3, [r3, #3]
 8009690:	2b01      	cmp	r3, #1
 8009692:	d06c      	beq.n	800976e <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	781b      	ldrb	r3, [r3, #0]
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	4413      	add	r3, r2
 800969e:	881b      	ldrh	r3, [r3, #0]
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80096a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096aa:	81bb      	strh	r3, [r7, #12]
 80096ac:	89bb      	ldrh	r3, [r7, #12]
 80096ae:	f083 0320 	eor.w	r3, r3, #32
 80096b2:	81bb      	strh	r3, [r7, #12]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	781b      	ldrb	r3, [r3, #0]
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	441a      	add	r2, r3
 80096be:	89bb      	ldrh	r3, [r7, #12]
 80096c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80096c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	8013      	strh	r3, [r2, #0]
 80096d4:	e04b      	b.n	800976e <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	4413      	add	r3, r2
 80096e0:	881b      	ldrh	r3, [r3, #0]
 80096e2:	82fb      	strh	r3, [r7, #22]
 80096e4:	8afb      	ldrh	r3, [r7, #22]
 80096e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d01b      	beq.n	8009726 <USB_EPClearStall+0xfc>
 80096ee:	687a      	ldr	r2, [r7, #4]
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	881b      	ldrh	r3, [r3, #0]
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009700:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009704:	82bb      	strh	r3, [r7, #20]
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	441a      	add	r2, r3
 8009710:	8abb      	ldrh	r3, [r7, #20]
 8009712:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009716:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800971a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800971e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009722:	b29b      	uxth	r3, r3
 8009724:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	009b      	lsls	r3, r3, #2
 800972e:	4413      	add	r3, r2
 8009730:	881b      	ldrh	r3, [r3, #0]
 8009732:	b29b      	uxth	r3, r3
 8009734:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009738:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800973c:	827b      	strh	r3, [r7, #18]
 800973e:	8a7b      	ldrh	r3, [r7, #18]
 8009740:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009744:	827b      	strh	r3, [r7, #18]
 8009746:	8a7b      	ldrh	r3, [r7, #18]
 8009748:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800974c:	827b      	strh	r3, [r7, #18]
 800974e:	687a      	ldr	r2, [r7, #4]
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	441a      	add	r2, r3
 8009758:	8a7b      	ldrh	r3, [r7, #18]
 800975a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800975e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009766:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800976a:	b29b      	uxth	r3, r3
 800976c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	371c      	adds	r7, #28
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
 8009784:	460b      	mov	r3, r1
 8009786:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009788:	78fb      	ldrb	r3, [r7, #3]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d103      	bne.n	8009796 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2280      	movs	r2, #128	@ 0x80
 8009792:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8009796:	2300      	movs	r3, #0
}
 8009798:	4618      	mov	r0, r3
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097bc:	b29a      	uxth	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 80097c4:	2300      	movs	r3, #0
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	370c      	adds	r7, #12
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b085      	sub	sp, #20
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80097e4:	68fb      	ldr	r3, [r7, #12]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3714      	adds	r7, #20
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80097f2:	b480      	push	{r7}
 80097f4:	b08b      	sub	sp, #44	@ 0x2c
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	60f8      	str	r0, [r7, #12]
 80097fa:	60b9      	str	r1, [r7, #8]
 80097fc:	4611      	mov	r1, r2
 80097fe:	461a      	mov	r2, r3
 8009800:	460b      	mov	r3, r1
 8009802:	80fb      	strh	r3, [r7, #6]
 8009804:	4613      	mov	r3, r2
 8009806:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009808:	88bb      	ldrh	r3, [r7, #4]
 800980a:	3301      	adds	r3, #1
 800980c:	085b      	lsrs	r3, r3, #1
 800980e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009818:	88fa      	ldrh	r2, [r7, #6]
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	4413      	add	r3, r2
 800981e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009822:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	627b      	str	r3, [r7, #36]	@ 0x24
 8009828:	e01b      	b.n	8009862 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800982a:	69fb      	ldr	r3, [r7, #28]
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	3301      	adds	r3, #1
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	021b      	lsls	r3, r3, #8
 8009838:	b21a      	sxth	r2, r3
 800983a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800983e:	4313      	orrs	r3, r2
 8009840:	b21b      	sxth	r3, r3
 8009842:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009844:	6a3b      	ldr	r3, [r7, #32]
 8009846:	8a7a      	ldrh	r2, [r7, #18]
 8009848:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800984a:	6a3b      	ldr	r3, [r7, #32]
 800984c:	3302      	adds	r3, #2
 800984e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	3301      	adds	r3, #1
 8009854:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	3301      	adds	r3, #1
 800985a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800985c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800985e:	3b01      	subs	r3, #1
 8009860:	627b      	str	r3, [r7, #36]	@ 0x24
 8009862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1e0      	bne.n	800982a <USB_WritePMA+0x38>
  }
}
 8009868:	bf00      	nop
 800986a:	bf00      	nop
 800986c:	372c      	adds	r7, #44	@ 0x2c
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009876:	b480      	push	{r7}
 8009878:	b08b      	sub	sp, #44	@ 0x2c
 800987a:	af00      	add	r7, sp, #0
 800987c:	60f8      	str	r0, [r7, #12]
 800987e:	60b9      	str	r1, [r7, #8]
 8009880:	4611      	mov	r1, r2
 8009882:	461a      	mov	r2, r3
 8009884:	460b      	mov	r3, r1
 8009886:	80fb      	strh	r3, [r7, #6]
 8009888:	4613      	mov	r3, r2
 800988a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800988c:	88bb      	ldrh	r3, [r7, #4]
 800988e:	085b      	lsrs	r3, r3, #1
 8009890:	b29b      	uxth	r3, r3
 8009892:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800989c:	88fa      	ldrh	r2, [r7, #6]
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	4413      	add	r3, r2
 80098a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80098a6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80098a8:	69bb      	ldr	r3, [r7, #24]
 80098aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80098ac:	e018      	b.n	80098e0 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80098ae:	6a3b      	ldr	r3, [r7, #32]
 80098b0:	881b      	ldrh	r3, [r3, #0]
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80098b6:	6a3b      	ldr	r3, [r7, #32]
 80098b8:	3302      	adds	r3, #2
 80098ba:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	b2da      	uxtb	r2, r3
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	3301      	adds	r3, #1
 80098c8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	0a1b      	lsrs	r3, r3, #8
 80098ce:	b2da      	uxtb	r2, r3
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	3301      	adds	r3, #1
 80098d8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80098da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098dc:	3b01      	subs	r3, #1
 80098de:	627b      	str	r3, [r7, #36]	@ 0x24
 80098e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1e3      	bne.n	80098ae <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80098e6:	88bb      	ldrh	r3, [r7, #4]
 80098e8:	f003 0301 	and.w	r3, r3, #1
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d007      	beq.n	8009902 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 80098f2:	6a3b      	ldr	r3, [r7, #32]
 80098f4:	881b      	ldrh	r3, [r3, #0]
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	701a      	strb	r2, [r3, #0]
  }
}
 8009902:	bf00      	nop
 8009904:	372c      	adds	r7, #44	@ 0x2c
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr

0800990e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b084      	sub	sp, #16
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	460b      	mov	r3, r1
 8009918:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800991a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800991e:	f002 f903 	bl	800bb28 <USBD_static_malloc>
 8009922:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d105      	bne.n	8009936 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 8009932:	2302      	movs	r3, #2
 8009934:	e066      	b.n	8009a04 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	7c1b      	ldrb	r3, [r3, #16]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d119      	bne.n	800997a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009946:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800994a:	2202      	movs	r2, #2
 800994c:	2181      	movs	r1, #129	@ 0x81
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f001 ff91 	bl	800b876 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800995a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800995e:	2202      	movs	r2, #2
 8009960:	2101      	movs	r1, #1
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f001 ff87 	bl	800b876 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2210      	movs	r2, #16
 8009974:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 8009978:	e016      	b.n	80099a8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800997a:	2340      	movs	r3, #64	@ 0x40
 800997c:	2202      	movs	r2, #2
 800997e:	2181      	movs	r1, #129	@ 0x81
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f001 ff78 	bl	800b876 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2201      	movs	r2, #1
 800998a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800998c:	2340      	movs	r3, #64	@ 0x40
 800998e:	2202      	movs	r2, #2
 8009990:	2101      	movs	r1, #1
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f001 ff6f 	bl	800b876 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2210      	movs	r2, #16
 80099a4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80099a8:	2308      	movs	r3, #8
 80099aa:	2203      	movs	r2, #3
 80099ac:	2182      	movs	r1, #130	@ 0x82
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f001 ff61 	bl	800b876 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	7c1b      	ldrb	r3, [r3, #16]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d109      	bne.n	80099f2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80099e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80099e8:	2101      	movs	r1, #1
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f002 f832 	bl	800ba54 <USBD_LL_PrepareReceive>
 80099f0:	e007      	b.n	8009a02 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80099f8:	2340      	movs	r3, #64	@ 0x40
 80099fa:	2101      	movs	r1, #1
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f002 f829 	bl	800ba54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009a02:	2300      	movs	r3, #0
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3710      	adds	r7, #16
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}

08009a0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	460b      	mov	r3, r1
 8009a16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009a18:	2181      	movs	r1, #129	@ 0x81
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f001 ff51 	bl	800b8c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2200      	movs	r2, #0
 8009a24:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009a26:	2101      	movs	r1, #1
 8009a28:	6878      	ldr	r0, [r7, #4]
 8009a2a:	f001 ff4a 	bl	800b8c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009a36:	2182      	movs	r1, #130	@ 0x82
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f001 ff42 	bl	800b8c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d00e      	beq.n	8009a76 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f002 f86b 	bl	800bb44 <USBD_static_free>
    pdev->pClassData = NULL;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2200      	movs	r2, #0
 8009a72:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009a76:	2300      	movs	r3, #0
}
 8009a78:	4618      	mov	r0, r3
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b086      	sub	sp, #24
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009a90:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009a92:	2300      	movs	r3, #0
 8009a94:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009a96:	2300      	movs	r3, #0
 8009a98:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d101      	bne.n	8009aa8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	e0af      	b.n	8009c08 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d03f      	beq.n	8009b34 <USBD_CDC_Setup+0xb4>
 8009ab4:	2b20      	cmp	r3, #32
 8009ab6:	f040 809f 	bne.w	8009bf8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	88db      	ldrh	r3, [r3, #6]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d02e      	beq.n	8009b20 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	b25b      	sxtb	r3, r3
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	da16      	bge.n	8009afa <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	683a      	ldr	r2, [r7, #0]
 8009ad6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009ad8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	88d2      	ldrh	r2, [r2, #6]
 8009ade:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	88db      	ldrh	r3, [r3, #6]
 8009ae4:	2b07      	cmp	r3, #7
 8009ae6:	bf28      	it	cs
 8009ae8:	2307      	movcs	r3, #7
 8009aea:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	89fa      	ldrh	r2, [r7, #14]
 8009af0:	4619      	mov	r1, r3
 8009af2:	6878      	ldr	r0, [r7, #4]
 8009af4:	f001 facd 	bl	800b092 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009af8:	e085      	b.n	8009c06 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	785a      	ldrb	r2, [r3, #1]
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	88db      	ldrh	r3, [r3, #6]
 8009b08:	b2da      	uxtb	r2, r3
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009b10:	6939      	ldr	r1, [r7, #16]
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	88db      	ldrh	r3, [r3, #6]
 8009b16:	461a      	mov	r2, r3
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f001 fae6 	bl	800b0ea <USBD_CtlPrepareRx>
      break;
 8009b1e:	e072      	b.n	8009c06 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009b26:	689b      	ldr	r3, [r3, #8]
 8009b28:	683a      	ldr	r2, [r7, #0]
 8009b2a:	7850      	ldrb	r0, [r2, #1]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	6839      	ldr	r1, [r7, #0]
 8009b30:	4798      	blx	r3
      break;
 8009b32:	e068      	b.n	8009c06 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	785b      	ldrb	r3, [r3, #1]
 8009b38:	2b0b      	cmp	r3, #11
 8009b3a:	d852      	bhi.n	8009be2 <USBD_CDC_Setup+0x162>
 8009b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8009b44 <USBD_CDC_Setup+0xc4>)
 8009b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b42:	bf00      	nop
 8009b44:	08009b75 	.word	0x08009b75
 8009b48:	08009bf1 	.word	0x08009bf1
 8009b4c:	08009be3 	.word	0x08009be3
 8009b50:	08009be3 	.word	0x08009be3
 8009b54:	08009be3 	.word	0x08009be3
 8009b58:	08009be3 	.word	0x08009be3
 8009b5c:	08009be3 	.word	0x08009be3
 8009b60:	08009be3 	.word	0x08009be3
 8009b64:	08009be3 	.word	0x08009be3
 8009b68:	08009be3 	.word	0x08009be3
 8009b6c:	08009b9f 	.word	0x08009b9f
 8009b70:	08009bc9 	.word	0x08009bc9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	2b03      	cmp	r3, #3
 8009b7e:	d107      	bne.n	8009b90 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009b80:	f107 030a 	add.w	r3, r7, #10
 8009b84:	2202      	movs	r2, #2
 8009b86:	4619      	mov	r1, r3
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f001 fa82 	bl	800b092 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b8e:	e032      	b.n	8009bf6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009b90:	6839      	ldr	r1, [r7, #0]
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f001 fa0c 	bl	800afb0 <USBD_CtlError>
            ret = USBD_FAIL;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	75fb      	strb	r3, [r7, #23]
          break;
 8009b9c:	e02b      	b.n	8009bf6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ba4:	b2db      	uxtb	r3, r3
 8009ba6:	2b03      	cmp	r3, #3
 8009ba8:	d107      	bne.n	8009bba <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009baa:	f107 030d 	add.w	r3, r7, #13
 8009bae:	2201      	movs	r2, #1
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f001 fa6d 	bl	800b092 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009bb8:	e01d      	b.n	8009bf6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009bba:	6839      	ldr	r1, [r7, #0]
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f001 f9f7 	bl	800afb0 <USBD_CtlError>
            ret = USBD_FAIL;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	75fb      	strb	r3, [r7, #23]
          break;
 8009bc6:	e016      	b.n	8009bf6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	2b03      	cmp	r3, #3
 8009bd2:	d00f      	beq.n	8009bf4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009bd4:	6839      	ldr	r1, [r7, #0]
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f001 f9ea 	bl	800afb0 <USBD_CtlError>
            ret = USBD_FAIL;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009be0:	e008      	b.n	8009bf4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009be2:	6839      	ldr	r1, [r7, #0]
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f001 f9e3 	bl	800afb0 <USBD_CtlError>
          ret = USBD_FAIL;
 8009bea:	2303      	movs	r3, #3
 8009bec:	75fb      	strb	r3, [r7, #23]
          break;
 8009bee:	e002      	b.n	8009bf6 <USBD_CDC_Setup+0x176>
          break;
 8009bf0:	bf00      	nop
 8009bf2:	e008      	b.n	8009c06 <USBD_CDC_Setup+0x186>
          break;
 8009bf4:	bf00      	nop
      }
      break;
 8009bf6:	e006      	b.n	8009c06 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009bf8:	6839      	ldr	r1, [r7, #0]
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f001 f9d8 	bl	800afb0 <USBD_CtlError>
      ret = USBD_FAIL;
 8009c00:	2303      	movs	r3, #3
 8009c02:	75fb      	strb	r3, [r7, #23]
      break;
 8009c04:	bf00      	nop
  }

  return (uint8_t)ret;
 8009c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3718      	adds	r7, #24
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	460b      	mov	r3, r1
 8009c1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8009c22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d101      	bne.n	8009c32 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009c2e:	2303      	movs	r3, #3
 8009c30:	e04f      	b.n	8009cd2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009c38:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009c3a:	78fa      	ldrb	r2, [r7, #3]
 8009c3c:	6879      	ldr	r1, [r7, #4]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	4413      	add	r3, r2
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	440b      	add	r3, r1
 8009c48:	3318      	adds	r3, #24
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d029      	beq.n	8009ca4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009c50:	78fa      	ldrb	r2, [r7, #3]
 8009c52:	6879      	ldr	r1, [r7, #4]
 8009c54:	4613      	mov	r3, r2
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	4413      	add	r3, r2
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	440b      	add	r3, r1
 8009c5e:	3318      	adds	r3, #24
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	78f9      	ldrb	r1, [r7, #3]
 8009c64:	68f8      	ldr	r0, [r7, #12]
 8009c66:	460b      	mov	r3, r1
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	440b      	add	r3, r1
 8009c6c:	00db      	lsls	r3, r3, #3
 8009c6e:	4403      	add	r3, r0
 8009c70:	3320      	adds	r3, #32
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	fbb2 f1f3 	udiv	r1, r2, r3
 8009c78:	fb01 f303 	mul.w	r3, r1, r3
 8009c7c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d110      	bne.n	8009ca4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009c82:	78fa      	ldrb	r2, [r7, #3]
 8009c84:	6879      	ldr	r1, [r7, #4]
 8009c86:	4613      	mov	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	440b      	add	r3, r1
 8009c90:	3318      	adds	r3, #24
 8009c92:	2200      	movs	r2, #0
 8009c94:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009c96:	78f9      	ldrb	r1, [r7, #3]
 8009c98:	2300      	movs	r3, #0
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f001 feb8 	bl	800ba12 <USBD_LL_Transmit>
 8009ca2:	e015      	b.n	8009cd0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009cb2:	691b      	ldr	r3, [r3, #16]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00b      	beq.n	8009cd0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009cbe:	691b      	ldr	r3, [r3, #16]
 8009cc0:	68ba      	ldr	r2, [r7, #8]
 8009cc2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009ccc:	78fa      	ldrb	r2, [r7, #3]
 8009cce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b084      	sub	sp, #16
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009cec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d101      	bne.n	8009cfc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009cf8:	2303      	movs	r3, #3
 8009cfa:	e015      	b.n	8009d28 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009cfc:	78fb      	ldrb	r3, [r7, #3]
 8009cfe:	4619      	mov	r1, r3
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f001 fec8 	bl	800ba96 <USBD_LL_GetRxDataSize>
 8009d06:	4602      	mov	r2, r0
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009d22:	4611      	mov	r1, r2
 8009d24:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009d3e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d101      	bne.n	8009d4a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009d46:	2303      	movs	r3, #3
 8009d48:	e01a      	b.n	8009d80 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d014      	beq.n	8009d7e <USBD_CDC_EP0_RxReady+0x4e>
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009d5a:	2bff      	cmp	r3, #255	@ 0xff
 8009d5c:	d00f      	beq.n	8009d7e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 8009d6c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009d74:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	22ff      	movs	r2, #255	@ 0xff
 8009d7a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3710      	adds	r7, #16
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}

08009d88 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2243      	movs	r2, #67	@ 0x43
 8009d94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009d96:	4b03      	ldr	r3, [pc, #12]	@ (8009da4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	370c      	adds	r7, #12
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr
 8009da4:	200000a4 	.word	0x200000a4

08009da8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2243      	movs	r2, #67	@ 0x43
 8009db4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009db6:	4b03      	ldr	r3, [pc, #12]	@ (8009dc4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr
 8009dc4:	20000060 	.word	0x20000060

08009dc8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2243      	movs	r2, #67	@ 0x43
 8009dd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009dd6:	4b03      	ldr	r3, [pc, #12]	@ (8009de4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	370c      	adds	r7, #12
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr
 8009de4:	200000e8 	.word	0x200000e8

08009de8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b083      	sub	sp, #12
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	220a      	movs	r2, #10
 8009df4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009df6:	4b03      	ldr	r3, [pc, #12]	@ (8009e04 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr
 8009e04:	2000001c 	.word	0x2000001c

08009e08 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b083      	sub	sp, #12
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d101      	bne.n	8009e1c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009e18:	2303      	movs	r3, #3
 8009e1a:	e004      	b.n	8009e26 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	683a      	ldr	r2, [r7, #0]
 8009e20:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 8009e24:	2300      	movs	r3, #0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	370c      	adds	r7, #12
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr

08009e32 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009e32:	b480      	push	{r7}
 8009e34:	b087      	sub	sp, #28
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	60f8      	str	r0, [r7, #12]
 8009e3a:	60b9      	str	r1, [r7, #8]
 8009e3c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009e44:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d101      	bne.n	8009e50 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	e008      	b.n	8009e62 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	68ba      	ldr	r2, [r7, #8]
 8009e54:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	371c      	adds	r7, #28
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr

08009e6e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009e6e:	b480      	push	{r7}
 8009e70:	b085      	sub	sp, #20
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	6078      	str	r0, [r7, #4]
 8009e76:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009e7e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d101      	bne.n	8009e8a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009e86:	2303      	movs	r3, #3
 8009e88:	e004      	b.n	8009e94 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3714      	adds	r7, #20
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9e:	4770      	bx	lr

08009ea0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009eae:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d101      	bne.n	8009ec2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009ebe:	2303      	movs	r3, #3
 8009ec0:	e01a      	b.n	8009ef8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d114      	bne.n	8009ef6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009eea:	2181      	movs	r1, #129	@ 0x81
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f001 fd90 	bl	800ba12 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f0e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d101      	bne.n	8009f1e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009f1a:	2303      	movs	r3, #3
 8009f1c:	e016      	b.n	8009f4c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	7c1b      	ldrb	r3, [r3, #16]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d109      	bne.n	8009f3a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009f2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009f30:	2101      	movs	r1, #1
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f001 fd8e 	bl	800ba54 <USBD_LL_PrepareReceive>
 8009f38:	e007      	b.n	8009f4a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009f40:	2340      	movs	r3, #64	@ 0x40
 8009f42:	2101      	movs	r1, #1
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f001 fd85 	bl	800ba54 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3710      	adds	r7, #16
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}

08009f54 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d101      	bne.n	8009f6c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	e01f      	b.n	8009fac <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d003      	beq.n	8009f92 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	68ba      	ldr	r2, [r7, #8]
 8009f8e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2201      	movs	r2, #1
 8009f96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	79fa      	ldrb	r2, [r7, #7]
 8009f9e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009fa0:	68f8      	ldr	r0, [r7, #12]
 8009fa2:	f001 fbed 	bl	800b780 <USBD_LL_Init>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	3718      	adds	r7, #24
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d101      	bne.n	8009fcc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	e016      	b.n	8009ffa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	683a      	ldr	r2, [r7, #0]
 8009fd0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00b      	beq.n	8009ff8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe8:	f107 020e 	add.w	r2, r7, #14
 8009fec:	4610      	mov	r0, r2
 8009fee:	4798      	blx	r3
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3710      	adds	r7, #16
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b082      	sub	sp, #8
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f001 fc18 	bl	800b840 <USBD_LL_Start>
 800a010:	4603      	mov	r3, r0
}
 800a012:	4618      	mov	r0, r3
 800a014:	3708      	adds	r7, #8
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a01a:	b480      	push	{r7}
 800a01c:	b083      	sub	sp, #12
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	460b      	mov	r3, r1
 800a03a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a03c:	2303      	movs	r3, #3
 800a03e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a046:	2b00      	cmp	r3, #0
 800a048:	d009      	beq.n	800a05e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	78fa      	ldrb	r2, [r7, #3]
 800a054:	4611      	mov	r1, r2
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	4798      	blx	r3
 800a05a:	4603      	mov	r3, r0
 800a05c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a05e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a060:	4618      	mov	r0, r3
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}

0800a068 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	460b      	mov	r3, r1
 800a072:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d007      	beq.n	800a08e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	78fa      	ldrb	r2, [r7, #3]
 800a088:	4611      	mov	r1, r2
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	4798      	blx	r3
  }

  return USBD_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3708      	adds	r7, #8
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a0a8:	6839      	ldr	r1, [r7, #0]
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f000 ff46 	bl	800af3c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a0be:	461a      	mov	r2, r3
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a0cc:	f003 031f 	and.w	r3, r3, #31
 800a0d0:	2b02      	cmp	r3, #2
 800a0d2:	d01a      	beq.n	800a10a <USBD_LL_SetupStage+0x72>
 800a0d4:	2b02      	cmp	r3, #2
 800a0d6:	d822      	bhi.n	800a11e <USBD_LL_SetupStage+0x86>
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d002      	beq.n	800a0e2 <USBD_LL_SetupStage+0x4a>
 800a0dc:	2b01      	cmp	r3, #1
 800a0de:	d00a      	beq.n	800a0f6 <USBD_LL_SetupStage+0x5e>
 800a0e0:	e01d      	b.n	800a11e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f000 f9ee 	bl	800a4cc <USBD_StdDevReq>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	73fb      	strb	r3, [r7, #15]
      break;
 800a0f4:	e020      	b.n	800a138 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 fa52 	bl	800a5a8 <USBD_StdItfReq>
 800a104:	4603      	mov	r3, r0
 800a106:	73fb      	strb	r3, [r7, #15]
      break;
 800a108:	e016      	b.n	800a138 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a110:	4619      	mov	r1, r3
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 fa91 	bl	800a63a <USBD_StdEPReq>
 800a118:	4603      	mov	r3, r0
 800a11a:	73fb      	strb	r3, [r7, #15]
      break;
 800a11c:	e00c      	b.n	800a138 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a124:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	4619      	mov	r1, r3
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f001 fbe7 	bl	800b900 <USBD_LL_StallEP>
 800a132:	4603      	mov	r3, r0
 800a134:	73fb      	strb	r3, [r7, #15]
      break;
 800a136:	bf00      	nop
  }

  return ret;
 800a138:	7bfb      	ldrb	r3, [r7, #15]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}

0800a142 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a142:	b580      	push	{r7, lr}
 800a144:	b086      	sub	sp, #24
 800a146:	af00      	add	r7, sp, #0
 800a148:	60f8      	str	r0, [r7, #12]
 800a14a:	460b      	mov	r3, r1
 800a14c:	607a      	str	r2, [r7, #4]
 800a14e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a150:	7afb      	ldrb	r3, [r7, #11]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d138      	bne.n	800a1c8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a15c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a164:	2b03      	cmp	r3, #3
 800a166:	d14a      	bne.n	800a1fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	689a      	ldr	r2, [r3, #8]
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	429a      	cmp	r2, r3
 800a172:	d913      	bls.n	800a19c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	689a      	ldr	r2, [r3, #8]
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	68db      	ldr	r3, [r3, #12]
 800a17c:	1ad2      	subs	r2, r2, r3
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	68da      	ldr	r2, [r3, #12]
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	4293      	cmp	r3, r2
 800a18c:	bf28      	it	cs
 800a18e:	4613      	movcs	r3, r2
 800a190:	461a      	mov	r2, r3
 800a192:	6879      	ldr	r1, [r7, #4]
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f000 ffc5 	bl	800b124 <USBD_CtlContinueRx>
 800a19a:	e030      	b.n	800a1fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	2b03      	cmp	r3, #3
 800a1a6:	d10b      	bne.n	800a1c0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1ae:	691b      	ldr	r3, [r3, #16]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d005      	beq.n	800a1c0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	68f8      	ldr	r0, [r7, #12]
 800a1be:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f000 ffc0 	bl	800b146 <USBD_CtlSendStatus>
 800a1c6:	e01a      	b.n	800a1fe <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1ce:	b2db      	uxtb	r3, r3
 800a1d0:	2b03      	cmp	r3, #3
 800a1d2:	d114      	bne.n	800a1fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00e      	beq.n	800a1fe <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1e6:	699b      	ldr	r3, [r3, #24]
 800a1e8:	7afa      	ldrb	r2, [r7, #11]
 800a1ea:	4611      	mov	r1, r2
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	4798      	blx	r3
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a1f4:	7dfb      	ldrb	r3, [r7, #23]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d001      	beq.n	800a1fe <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a1fa:	7dfb      	ldrb	r3, [r7, #23]
 800a1fc:	e000      	b.n	800a200 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a1fe:	2300      	movs	r3, #0
}
 800a200:	4618      	mov	r0, r3
 800a202:	3718      	adds	r7, #24
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b086      	sub	sp, #24
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	460b      	mov	r3, r1
 800a212:	607a      	str	r2, [r7, #4]
 800a214:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a216:	7afb      	ldrb	r3, [r7, #11]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d16b      	bne.n	800a2f4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	3314      	adds	r3, #20
 800a220:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a228:	2b02      	cmp	r3, #2
 800a22a:	d156      	bne.n	800a2da <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	689a      	ldr	r2, [r3, #8]
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	429a      	cmp	r2, r3
 800a236:	d914      	bls.n	800a262 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	689a      	ldr	r2, [r3, #8]
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	1ad2      	subs	r2, r2, r3
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	461a      	mov	r2, r3
 800a24c:	6879      	ldr	r1, [r7, #4]
 800a24e:	68f8      	ldr	r0, [r7, #12]
 800a250:	f000 ff3a 	bl	800b0c8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a254:	2300      	movs	r3, #0
 800a256:	2200      	movs	r2, #0
 800a258:	2100      	movs	r1, #0
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f001 fbfa 	bl	800ba54 <USBD_LL_PrepareReceive>
 800a260:	e03b      	b.n	800a2da <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	68da      	ldr	r2, [r3, #12]
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	689b      	ldr	r3, [r3, #8]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d11c      	bne.n	800a2a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	685a      	ldr	r2, [r3, #4]
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a276:	429a      	cmp	r2, r3
 800a278:	d316      	bcc.n	800a2a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	685a      	ldr	r2, [r3, #4]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a284:	429a      	cmp	r2, r3
 800a286:	d20f      	bcs.n	800a2a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a288:	2200      	movs	r2, #0
 800a28a:	2100      	movs	r1, #0
 800a28c:	68f8      	ldr	r0, [r7, #12]
 800a28e:	f000 ff1b 	bl	800b0c8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	2200      	movs	r2, #0
 800a296:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a29a:	2300      	movs	r3, #0
 800a29c:	2200      	movs	r2, #0
 800a29e:	2100      	movs	r1, #0
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f001 fbd7 	bl	800ba54 <USBD_LL_PrepareReceive>
 800a2a6:	e018      	b.n	800a2da <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2ae:	b2db      	uxtb	r3, r3
 800a2b0:	2b03      	cmp	r3, #3
 800a2b2:	d10b      	bne.n	800a2cc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d005      	beq.n	800a2cc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a2cc:	2180      	movs	r1, #128	@ 0x80
 800a2ce:	68f8      	ldr	r0, [r7, #12]
 800a2d0:	f001 fb16 	bl	800b900 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a2d4:	68f8      	ldr	r0, [r7, #12]
 800a2d6:	f000 ff49 	bl	800b16c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d122      	bne.n	800a32a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f7ff fe98 	bl	800a01a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a2f2:	e01a      	b.n	800a32a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2fa:	b2db      	uxtb	r3, r3
 800a2fc:	2b03      	cmp	r3, #3
 800a2fe:	d114      	bne.n	800a32a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a306:	695b      	ldr	r3, [r3, #20]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d00e      	beq.n	800a32a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a312:	695b      	ldr	r3, [r3, #20]
 800a314:	7afa      	ldrb	r2, [r7, #11]
 800a316:	4611      	mov	r1, r2
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	4798      	blx	r3
 800a31c:	4603      	mov	r3, r0
 800a31e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a320:	7dfb      	ldrb	r3, [r7, #23]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d001      	beq.n	800a32a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a326:	7dfb      	ldrb	r3, [r7, #23]
 800a328:	e000      	b.n	800a32c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3718      	adds	r7, #24
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}

0800a334 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2201      	movs	r2, #1
 800a340:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a360:	2b00      	cmp	r3, #0
 800a362:	d101      	bne.n	800a368 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a364:	2303      	movs	r3, #3
 800a366:	e02f      	b.n	800a3c8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d00f      	beq.n	800a392 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d009      	beq.n	800a392 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	6852      	ldr	r2, [r2, #4]
 800a38a:	b2d2      	uxtb	r2, r2
 800a38c:	4611      	mov	r1, r2
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a392:	2340      	movs	r3, #64	@ 0x40
 800a394:	2200      	movs	r2, #0
 800a396:	2100      	movs	r1, #0
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f001 fa6c 	bl	800b876 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2240      	movs	r2, #64	@ 0x40
 800a3aa:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a3ae:	2340      	movs	r3, #64	@ 0x40
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	2180      	movs	r1, #128	@ 0x80
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f001 fa5e 	bl	800b876 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2240      	movs	r2, #64	@ 0x40
 800a3c4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3708      	adds	r7, #8
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	460b      	mov	r3, r1
 800a3da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	78fa      	ldrb	r2, [r7, #3]
 800a3e0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3fe:	b2da      	uxtb	r2, r3
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2204      	movs	r2, #4
 800a40a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	370c      	adds	r7, #12
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	2b04      	cmp	r3, #4
 800a42e:	d106      	bne.n	800a43e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a436:	b2da      	uxtb	r2, r3
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr

0800a44c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d101      	bne.n	800a462 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a45e:	2303      	movs	r3, #3
 800a460:	e012      	b.n	800a488 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	2b03      	cmp	r3, #3
 800a46c:	d10b      	bne.n	800a486 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a474:	69db      	ldr	r3, [r3, #28]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d005      	beq.n	800a486 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a480:	69db      	ldr	r3, [r3, #28]
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3708      	adds	r7, #8
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a490:	b480      	push	{r7}
 800a492:	b087      	sub	sp, #28
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	781b      	ldrb	r3, [r3, #0]
 800a4a0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	3301      	adds	r3, #1
 800a4a6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a4ae:	8a3b      	ldrh	r3, [r7, #16]
 800a4b0:	021b      	lsls	r3, r3, #8
 800a4b2:	b21a      	sxth	r2, r3
 800a4b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	b21b      	sxth	r3, r3
 800a4bc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a4be:	89fb      	ldrh	r3, [r7, #14]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	371c      	adds	r7, #28
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a4e2:	2b40      	cmp	r3, #64	@ 0x40
 800a4e4:	d005      	beq.n	800a4f2 <USBD_StdDevReq+0x26>
 800a4e6:	2b40      	cmp	r3, #64	@ 0x40
 800a4e8:	d853      	bhi.n	800a592 <USBD_StdDevReq+0xc6>
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d00b      	beq.n	800a506 <USBD_StdDevReq+0x3a>
 800a4ee:	2b20      	cmp	r3, #32
 800a4f0:	d14f      	bne.n	800a592 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a4f8:	689b      	ldr	r3, [r3, #8]
 800a4fa:	6839      	ldr	r1, [r7, #0]
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	4798      	blx	r3
 800a500:	4603      	mov	r3, r0
 800a502:	73fb      	strb	r3, [r7, #15]
      break;
 800a504:	e04a      	b.n	800a59c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	785b      	ldrb	r3, [r3, #1]
 800a50a:	2b09      	cmp	r3, #9
 800a50c:	d83b      	bhi.n	800a586 <USBD_StdDevReq+0xba>
 800a50e:	a201      	add	r2, pc, #4	@ (adr r2, 800a514 <USBD_StdDevReq+0x48>)
 800a510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a514:	0800a569 	.word	0x0800a569
 800a518:	0800a57d 	.word	0x0800a57d
 800a51c:	0800a587 	.word	0x0800a587
 800a520:	0800a573 	.word	0x0800a573
 800a524:	0800a587 	.word	0x0800a587
 800a528:	0800a547 	.word	0x0800a547
 800a52c:	0800a53d 	.word	0x0800a53d
 800a530:	0800a587 	.word	0x0800a587
 800a534:	0800a55f 	.word	0x0800a55f
 800a538:	0800a551 	.word	0x0800a551
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a53c:	6839      	ldr	r1, [r7, #0]
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 f9de 	bl	800a900 <USBD_GetDescriptor>
          break;
 800a544:	e024      	b.n	800a590 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a546:	6839      	ldr	r1, [r7, #0]
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 fb6d 	bl	800ac28 <USBD_SetAddress>
          break;
 800a54e:	e01f      	b.n	800a590 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a550:	6839      	ldr	r1, [r7, #0]
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 fbac 	bl	800acb0 <USBD_SetConfig>
 800a558:	4603      	mov	r3, r0
 800a55a:	73fb      	strb	r3, [r7, #15]
          break;
 800a55c:	e018      	b.n	800a590 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a55e:	6839      	ldr	r1, [r7, #0]
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 fc4b 	bl	800adfc <USBD_GetConfig>
          break;
 800a566:	e013      	b.n	800a590 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a568:	6839      	ldr	r1, [r7, #0]
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f000 fc7c 	bl	800ae68 <USBD_GetStatus>
          break;
 800a570:	e00e      	b.n	800a590 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a572:	6839      	ldr	r1, [r7, #0]
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 fcab 	bl	800aed0 <USBD_SetFeature>
          break;
 800a57a:	e009      	b.n	800a590 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a57c:	6839      	ldr	r1, [r7, #0]
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 fcba 	bl	800aef8 <USBD_ClrFeature>
          break;
 800a584:	e004      	b.n	800a590 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a586:	6839      	ldr	r1, [r7, #0]
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f000 fd11 	bl	800afb0 <USBD_CtlError>
          break;
 800a58e:	bf00      	nop
      }
      break;
 800a590:	e004      	b.n	800a59c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a592:	6839      	ldr	r1, [r7, #0]
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 fd0b 	bl	800afb0 <USBD_CtlError>
      break;
 800a59a:	bf00      	nop
  }

  return ret;
 800a59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3710      	adds	r7, #16
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop

0800a5a8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a5be:	2b40      	cmp	r3, #64	@ 0x40
 800a5c0:	d005      	beq.n	800a5ce <USBD_StdItfReq+0x26>
 800a5c2:	2b40      	cmp	r3, #64	@ 0x40
 800a5c4:	d82f      	bhi.n	800a626 <USBD_StdItfReq+0x7e>
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d001      	beq.n	800a5ce <USBD_StdItfReq+0x26>
 800a5ca:	2b20      	cmp	r3, #32
 800a5cc:	d12b      	bne.n	800a626 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	2b02      	cmp	r3, #2
 800a5da:	d81d      	bhi.n	800a618 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	889b      	ldrh	r3, [r3, #4]
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d813      	bhi.n	800a60e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	6839      	ldr	r1, [r7, #0]
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	4798      	blx	r3
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	88db      	ldrh	r3, [r3, #6]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d110      	bne.n	800a622 <USBD_StdItfReq+0x7a>
 800a600:	7bfb      	ldrb	r3, [r7, #15]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d10d      	bne.n	800a622 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 fd9d 	bl	800b146 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a60c:	e009      	b.n	800a622 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a60e:	6839      	ldr	r1, [r7, #0]
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fccd 	bl	800afb0 <USBD_CtlError>
          break;
 800a616:	e004      	b.n	800a622 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a618:	6839      	ldr	r1, [r7, #0]
 800a61a:	6878      	ldr	r0, [r7, #4]
 800a61c:	f000 fcc8 	bl	800afb0 <USBD_CtlError>
          break;
 800a620:	e000      	b.n	800a624 <USBD_StdItfReq+0x7c>
          break;
 800a622:	bf00      	nop
      }
      break;
 800a624:	e004      	b.n	800a630 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a626:	6839      	ldr	r1, [r7, #0]
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 fcc1 	bl	800afb0 <USBD_CtlError>
      break;
 800a62e:	bf00      	nop
  }

  return ret;
 800a630:	7bfb      	ldrb	r3, [r7, #15]
}
 800a632:	4618      	mov	r0, r3
 800a634:	3710      	adds	r7, #16
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}

0800a63a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a63a:	b580      	push	{r7, lr}
 800a63c:	b084      	sub	sp, #16
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
 800a642:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a644:	2300      	movs	r3, #0
 800a646:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	889b      	ldrh	r3, [r3, #4]
 800a64c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a656:	2b40      	cmp	r3, #64	@ 0x40
 800a658:	d007      	beq.n	800a66a <USBD_StdEPReq+0x30>
 800a65a:	2b40      	cmp	r3, #64	@ 0x40
 800a65c:	f200 8145 	bhi.w	800a8ea <USBD_StdEPReq+0x2b0>
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00c      	beq.n	800a67e <USBD_StdEPReq+0x44>
 800a664:	2b20      	cmp	r3, #32
 800a666:	f040 8140 	bne.w	800a8ea <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a670:	689b      	ldr	r3, [r3, #8]
 800a672:	6839      	ldr	r1, [r7, #0]
 800a674:	6878      	ldr	r0, [r7, #4]
 800a676:	4798      	blx	r3
 800a678:	4603      	mov	r3, r0
 800a67a:	73fb      	strb	r3, [r7, #15]
      break;
 800a67c:	e13a      	b.n	800a8f4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	785b      	ldrb	r3, [r3, #1]
 800a682:	2b03      	cmp	r3, #3
 800a684:	d007      	beq.n	800a696 <USBD_StdEPReq+0x5c>
 800a686:	2b03      	cmp	r3, #3
 800a688:	f300 8129 	bgt.w	800a8de <USBD_StdEPReq+0x2a4>
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d07f      	beq.n	800a790 <USBD_StdEPReq+0x156>
 800a690:	2b01      	cmp	r3, #1
 800a692:	d03c      	beq.n	800a70e <USBD_StdEPReq+0xd4>
 800a694:	e123      	b.n	800a8de <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	2b02      	cmp	r3, #2
 800a6a0:	d002      	beq.n	800a6a8 <USBD_StdEPReq+0x6e>
 800a6a2:	2b03      	cmp	r3, #3
 800a6a4:	d016      	beq.n	800a6d4 <USBD_StdEPReq+0x9a>
 800a6a6:	e02c      	b.n	800a702 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6a8:	7bbb      	ldrb	r3, [r7, #14]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00d      	beq.n	800a6ca <USBD_StdEPReq+0x90>
 800a6ae:	7bbb      	ldrb	r3, [r7, #14]
 800a6b0:	2b80      	cmp	r3, #128	@ 0x80
 800a6b2:	d00a      	beq.n	800a6ca <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a6b4:	7bbb      	ldrb	r3, [r7, #14]
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f001 f921 	bl	800b900 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6be:	2180      	movs	r1, #128	@ 0x80
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f001 f91d 	bl	800b900 <USBD_LL_StallEP>
 800a6c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a6c8:	e020      	b.n	800a70c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a6ca:	6839      	ldr	r1, [r7, #0]
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 fc6f 	bl	800afb0 <USBD_CtlError>
              break;
 800a6d2:	e01b      	b.n	800a70c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	885b      	ldrh	r3, [r3, #2]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d10e      	bne.n	800a6fa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a6dc:	7bbb      	ldrb	r3, [r7, #14]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00b      	beq.n	800a6fa <USBD_StdEPReq+0xc0>
 800a6e2:	7bbb      	ldrb	r3, [r7, #14]
 800a6e4:	2b80      	cmp	r3, #128	@ 0x80
 800a6e6:	d008      	beq.n	800a6fa <USBD_StdEPReq+0xc0>
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	88db      	ldrh	r3, [r3, #6]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d104      	bne.n	800a6fa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a6f0:	7bbb      	ldrb	r3, [r7, #14]
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f001 f903 	bl	800b900 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 fd23 	bl	800b146 <USBD_CtlSendStatus>

              break;
 800a700:	e004      	b.n	800a70c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a702:	6839      	ldr	r1, [r7, #0]
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 fc53 	bl	800afb0 <USBD_CtlError>
              break;
 800a70a:	bf00      	nop
          }
          break;
 800a70c:	e0ec      	b.n	800a8e8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a714:	b2db      	uxtb	r3, r3
 800a716:	2b02      	cmp	r3, #2
 800a718:	d002      	beq.n	800a720 <USBD_StdEPReq+0xe6>
 800a71a:	2b03      	cmp	r3, #3
 800a71c:	d016      	beq.n	800a74c <USBD_StdEPReq+0x112>
 800a71e:	e030      	b.n	800a782 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a720:	7bbb      	ldrb	r3, [r7, #14]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d00d      	beq.n	800a742 <USBD_StdEPReq+0x108>
 800a726:	7bbb      	ldrb	r3, [r7, #14]
 800a728:	2b80      	cmp	r3, #128	@ 0x80
 800a72a:	d00a      	beq.n	800a742 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a72c:	7bbb      	ldrb	r3, [r7, #14]
 800a72e:	4619      	mov	r1, r3
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f001 f8e5 	bl	800b900 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a736:	2180      	movs	r1, #128	@ 0x80
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f001 f8e1 	bl	800b900 <USBD_LL_StallEP>
 800a73e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a740:	e025      	b.n	800a78e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a742:	6839      	ldr	r1, [r7, #0]
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 fc33 	bl	800afb0 <USBD_CtlError>
              break;
 800a74a:	e020      	b.n	800a78e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	885b      	ldrh	r3, [r3, #2]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d11b      	bne.n	800a78c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a754:	7bbb      	ldrb	r3, [r7, #14]
 800a756:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d004      	beq.n	800a768 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a75e:	7bbb      	ldrb	r3, [r7, #14]
 800a760:	4619      	mov	r1, r3
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f001 f8eb 	bl	800b93e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 fcec 	bl	800b146 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	6839      	ldr	r1, [r7, #0]
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	4798      	blx	r3
 800a77c:	4603      	mov	r3, r0
 800a77e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a780:	e004      	b.n	800a78c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fc13 	bl	800afb0 <USBD_CtlError>
              break;
 800a78a:	e000      	b.n	800a78e <USBD_StdEPReq+0x154>
              break;
 800a78c:	bf00      	nop
          }
          break;
 800a78e:	e0ab      	b.n	800a8e8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a796:	b2db      	uxtb	r3, r3
 800a798:	2b02      	cmp	r3, #2
 800a79a:	d002      	beq.n	800a7a2 <USBD_StdEPReq+0x168>
 800a79c:	2b03      	cmp	r3, #3
 800a79e:	d032      	beq.n	800a806 <USBD_StdEPReq+0x1cc>
 800a7a0:	e097      	b.n	800a8d2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7a2:	7bbb      	ldrb	r3, [r7, #14]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d007      	beq.n	800a7b8 <USBD_StdEPReq+0x17e>
 800a7a8:	7bbb      	ldrb	r3, [r7, #14]
 800a7aa:	2b80      	cmp	r3, #128	@ 0x80
 800a7ac:	d004      	beq.n	800a7b8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a7ae:	6839      	ldr	r1, [r7, #0]
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 fbfd 	bl	800afb0 <USBD_CtlError>
                break;
 800a7b6:	e091      	b.n	800a8dc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	da0b      	bge.n	800a7d8 <USBD_StdEPReq+0x19e>
 800a7c0:	7bbb      	ldrb	r3, [r7, #14]
 800a7c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a7c6:	4613      	mov	r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	4413      	add	r3, r2
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	3310      	adds	r3, #16
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	3304      	adds	r3, #4
 800a7d6:	e00b      	b.n	800a7f0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a7d8:	7bbb      	ldrb	r3, [r7, #14]
 800a7da:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7de:	4613      	mov	r3, r2
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	4413      	add	r3, r2
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	4413      	add	r3, r2
 800a7ee:	3304      	adds	r3, #4
 800a7f0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	2202      	movs	r2, #2
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 fc47 	bl	800b092 <USBD_CtlSendData>
              break;
 800a804:	e06a      	b.n	800a8dc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a806:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	da11      	bge.n	800a832 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a80e:	7bbb      	ldrb	r3, [r7, #14]
 800a810:	f003 020f 	and.w	r2, r3, #15
 800a814:	6879      	ldr	r1, [r7, #4]
 800a816:	4613      	mov	r3, r2
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	4413      	add	r3, r2
 800a81c:	009b      	lsls	r3, r3, #2
 800a81e:	440b      	add	r3, r1
 800a820:	3324      	adds	r3, #36	@ 0x24
 800a822:	881b      	ldrh	r3, [r3, #0]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d117      	bne.n	800a858 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a828:	6839      	ldr	r1, [r7, #0]
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 fbc0 	bl	800afb0 <USBD_CtlError>
                  break;
 800a830:	e054      	b.n	800a8dc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a832:	7bbb      	ldrb	r3, [r7, #14]
 800a834:	f003 020f 	and.w	r2, r3, #15
 800a838:	6879      	ldr	r1, [r7, #4]
 800a83a:	4613      	mov	r3, r2
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	4413      	add	r3, r2
 800a840:	009b      	lsls	r3, r3, #2
 800a842:	440b      	add	r3, r1
 800a844:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a848:	881b      	ldrh	r3, [r3, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d104      	bne.n	800a858 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a84e:	6839      	ldr	r1, [r7, #0]
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 fbad 	bl	800afb0 <USBD_CtlError>
                  break;
 800a856:	e041      	b.n	800a8dc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a858:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	da0b      	bge.n	800a878 <USBD_StdEPReq+0x23e>
 800a860:	7bbb      	ldrb	r3, [r7, #14]
 800a862:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a866:	4613      	mov	r3, r2
 800a868:	009b      	lsls	r3, r3, #2
 800a86a:	4413      	add	r3, r2
 800a86c:	009b      	lsls	r3, r3, #2
 800a86e:	3310      	adds	r3, #16
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	4413      	add	r3, r2
 800a874:	3304      	adds	r3, #4
 800a876:	e00b      	b.n	800a890 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a878:	7bbb      	ldrb	r3, [r7, #14]
 800a87a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a87e:	4613      	mov	r3, r2
 800a880:	009b      	lsls	r3, r3, #2
 800a882:	4413      	add	r3, r2
 800a884:	009b      	lsls	r3, r3, #2
 800a886:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	4413      	add	r3, r2
 800a88e:	3304      	adds	r3, #4
 800a890:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a892:	7bbb      	ldrb	r3, [r7, #14]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d002      	beq.n	800a89e <USBD_StdEPReq+0x264>
 800a898:	7bbb      	ldrb	r3, [r7, #14]
 800a89a:	2b80      	cmp	r3, #128	@ 0x80
 800a89c:	d103      	bne.n	800a8a6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	601a      	str	r2, [r3, #0]
 800a8a4:	e00e      	b.n	800a8c4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a8a6:	7bbb      	ldrb	r3, [r7, #14]
 800a8a8:	4619      	mov	r1, r3
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f001 f866 	bl	800b97c <USBD_LL_IsStallEP>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d003      	beq.n	800a8be <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	2201      	movs	r2, #1
 800a8ba:	601a      	str	r2, [r3, #0]
 800a8bc:	e002      	b.n	800a8c4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	2202      	movs	r2, #2
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 fbe1 	bl	800b092 <USBD_CtlSendData>
              break;
 800a8d0:	e004      	b.n	800a8dc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a8d2:	6839      	ldr	r1, [r7, #0]
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 fb6b 	bl	800afb0 <USBD_CtlError>
              break;
 800a8da:	bf00      	nop
          }
          break;
 800a8dc:	e004      	b.n	800a8e8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a8de:	6839      	ldr	r1, [r7, #0]
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f000 fb65 	bl	800afb0 <USBD_CtlError>
          break;
 800a8e6:	bf00      	nop
      }
      break;
 800a8e8:	e004      	b.n	800a8f4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a8ea:	6839      	ldr	r1, [r7, #0]
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 fb5f 	bl	800afb0 <USBD_CtlError>
      break;
 800a8f2:	bf00      	nop
  }

  return ret;
 800a8f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3710      	adds	r7, #16
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
	...

0800a900 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b084      	sub	sp, #16
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
 800a908:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a90a:	2300      	movs	r3, #0
 800a90c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a90e:	2300      	movs	r3, #0
 800a910:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a912:	2300      	movs	r3, #0
 800a914:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	885b      	ldrh	r3, [r3, #2]
 800a91a:	0a1b      	lsrs	r3, r3, #8
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	3b01      	subs	r3, #1
 800a920:	2b0e      	cmp	r3, #14
 800a922:	f200 8152 	bhi.w	800abca <USBD_GetDescriptor+0x2ca>
 800a926:	a201      	add	r2, pc, #4	@ (adr r2, 800a92c <USBD_GetDescriptor+0x2c>)
 800a928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a92c:	0800a99d 	.word	0x0800a99d
 800a930:	0800a9b5 	.word	0x0800a9b5
 800a934:	0800a9f5 	.word	0x0800a9f5
 800a938:	0800abcb 	.word	0x0800abcb
 800a93c:	0800abcb 	.word	0x0800abcb
 800a940:	0800ab6b 	.word	0x0800ab6b
 800a944:	0800ab97 	.word	0x0800ab97
 800a948:	0800abcb 	.word	0x0800abcb
 800a94c:	0800abcb 	.word	0x0800abcb
 800a950:	0800abcb 	.word	0x0800abcb
 800a954:	0800abcb 	.word	0x0800abcb
 800a958:	0800abcb 	.word	0x0800abcb
 800a95c:	0800abcb 	.word	0x0800abcb
 800a960:	0800abcb 	.word	0x0800abcb
 800a964:	0800a969 	.word	0x0800a969
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a96e:	69db      	ldr	r3, [r3, #28]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d00b      	beq.n	800a98c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a97a:	69db      	ldr	r3, [r3, #28]
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	7c12      	ldrb	r2, [r2, #16]
 800a980:	f107 0108 	add.w	r1, r7, #8
 800a984:	4610      	mov	r0, r2
 800a986:	4798      	blx	r3
 800a988:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a98a:	e126      	b.n	800abda <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a98c:	6839      	ldr	r1, [r7, #0]
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 fb0e 	bl	800afb0 <USBD_CtlError>
        err++;
 800a994:	7afb      	ldrb	r3, [r7, #11]
 800a996:	3301      	adds	r3, #1
 800a998:	72fb      	strb	r3, [r7, #11]
      break;
 800a99a:	e11e      	b.n	800abda <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	687a      	ldr	r2, [r7, #4]
 800a9a6:	7c12      	ldrb	r2, [r2, #16]
 800a9a8:	f107 0108 	add.w	r1, r7, #8
 800a9ac:	4610      	mov	r0, r2
 800a9ae:	4798      	blx	r3
 800a9b0:	60f8      	str	r0, [r7, #12]
      break;
 800a9b2:	e112      	b.n	800abda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	7c1b      	ldrb	r3, [r3, #16]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10d      	bne.n	800a9d8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9c4:	f107 0208 	add.w	r2, r7, #8
 800a9c8:	4610      	mov	r0, r2
 800a9ca:	4798      	blx	r3
 800a9cc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	3301      	adds	r3, #1
 800a9d2:	2202      	movs	r2, #2
 800a9d4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a9d6:	e100      	b.n	800abda <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a9de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9e0:	f107 0208 	add.w	r2, r7, #8
 800a9e4:	4610      	mov	r0, r2
 800a9e6:	4798      	blx	r3
 800a9e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	2202      	movs	r2, #2
 800a9f0:	701a      	strb	r2, [r3, #0]
      break;
 800a9f2:	e0f2      	b.n	800abda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	885b      	ldrh	r3, [r3, #2]
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	2b05      	cmp	r3, #5
 800a9fc:	f200 80ac 	bhi.w	800ab58 <USBD_GetDescriptor+0x258>
 800aa00:	a201      	add	r2, pc, #4	@ (adr r2, 800aa08 <USBD_GetDescriptor+0x108>)
 800aa02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa06:	bf00      	nop
 800aa08:	0800aa21 	.word	0x0800aa21
 800aa0c:	0800aa55 	.word	0x0800aa55
 800aa10:	0800aa89 	.word	0x0800aa89
 800aa14:	0800aabd 	.word	0x0800aabd
 800aa18:	0800aaf1 	.word	0x0800aaf1
 800aa1c:	0800ab25 	.word	0x0800ab25
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d00b      	beq.n	800aa44 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	7c12      	ldrb	r2, [r2, #16]
 800aa38:	f107 0108 	add.w	r1, r7, #8
 800aa3c:	4610      	mov	r0, r2
 800aa3e:	4798      	blx	r3
 800aa40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa42:	e091      	b.n	800ab68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa44:	6839      	ldr	r1, [r7, #0]
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 fab2 	bl	800afb0 <USBD_CtlError>
            err++;
 800aa4c:	7afb      	ldrb	r3, [r7, #11]
 800aa4e:	3301      	adds	r3, #1
 800aa50:	72fb      	strb	r3, [r7, #11]
          break;
 800aa52:	e089      	b.n	800ab68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d00b      	beq.n	800aa78 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	7c12      	ldrb	r2, [r2, #16]
 800aa6c:	f107 0108 	add.w	r1, r7, #8
 800aa70:	4610      	mov	r0, r2
 800aa72:	4798      	blx	r3
 800aa74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa76:	e077      	b.n	800ab68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa78:	6839      	ldr	r1, [r7, #0]
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	f000 fa98 	bl	800afb0 <USBD_CtlError>
            err++;
 800aa80:	7afb      	ldrb	r3, [r7, #11]
 800aa82:	3301      	adds	r3, #1
 800aa84:	72fb      	strb	r3, [r7, #11]
          break;
 800aa86:	e06f      	b.n	800ab68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d00b      	beq.n	800aaac <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	7c12      	ldrb	r2, [r2, #16]
 800aaa0:	f107 0108 	add.w	r1, r7, #8
 800aaa4:	4610      	mov	r0, r2
 800aaa6:	4798      	blx	r3
 800aaa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aaaa:	e05d      	b.n	800ab68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aaac:	6839      	ldr	r1, [r7, #0]
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f000 fa7e 	bl	800afb0 <USBD_CtlError>
            err++;
 800aab4:	7afb      	ldrb	r3, [r7, #11]
 800aab6:	3301      	adds	r3, #1
 800aab8:	72fb      	strb	r3, [r7, #11]
          break;
 800aaba:	e055      	b.n	800ab68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aac2:	691b      	ldr	r3, [r3, #16]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d00b      	beq.n	800aae0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aace:	691b      	ldr	r3, [r3, #16]
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	7c12      	ldrb	r2, [r2, #16]
 800aad4:	f107 0108 	add.w	r1, r7, #8
 800aad8:	4610      	mov	r0, r2
 800aada:	4798      	blx	r3
 800aadc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aade:	e043      	b.n	800ab68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aae0:	6839      	ldr	r1, [r7, #0]
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 fa64 	bl	800afb0 <USBD_CtlError>
            err++;
 800aae8:	7afb      	ldrb	r3, [r7, #11]
 800aaea:	3301      	adds	r3, #1
 800aaec:	72fb      	strb	r3, [r7, #11]
          break;
 800aaee:	e03b      	b.n	800ab68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aaf6:	695b      	ldr	r3, [r3, #20]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00b      	beq.n	800ab14 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab02:	695b      	ldr	r3, [r3, #20]
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	7c12      	ldrb	r2, [r2, #16]
 800ab08:	f107 0108 	add.w	r1, r7, #8
 800ab0c:	4610      	mov	r0, r2
 800ab0e:	4798      	blx	r3
 800ab10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab12:	e029      	b.n	800ab68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab14:	6839      	ldr	r1, [r7, #0]
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 fa4a 	bl	800afb0 <USBD_CtlError>
            err++;
 800ab1c:	7afb      	ldrb	r3, [r7, #11]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	72fb      	strb	r3, [r7, #11]
          break;
 800ab22:	e021      	b.n	800ab68 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab2a:	699b      	ldr	r3, [r3, #24]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d00b      	beq.n	800ab48 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab36:	699b      	ldr	r3, [r3, #24]
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	7c12      	ldrb	r2, [r2, #16]
 800ab3c:	f107 0108 	add.w	r1, r7, #8
 800ab40:	4610      	mov	r0, r2
 800ab42:	4798      	blx	r3
 800ab44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab46:	e00f      	b.n	800ab68 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ab48:	6839      	ldr	r1, [r7, #0]
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 fa30 	bl	800afb0 <USBD_CtlError>
            err++;
 800ab50:	7afb      	ldrb	r3, [r7, #11]
 800ab52:	3301      	adds	r3, #1
 800ab54:	72fb      	strb	r3, [r7, #11]
          break;
 800ab56:	e007      	b.n	800ab68 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 fa28 	bl	800afb0 <USBD_CtlError>
          err++;
 800ab60:	7afb      	ldrb	r3, [r7, #11]
 800ab62:	3301      	adds	r3, #1
 800ab64:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ab66:	bf00      	nop
      }
      break;
 800ab68:	e037      	b.n	800abda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	7c1b      	ldrb	r3, [r3, #16]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d109      	bne.n	800ab86 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab7a:	f107 0208 	add.w	r2, r7, #8
 800ab7e:	4610      	mov	r0, r2
 800ab80:	4798      	blx	r3
 800ab82:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab84:	e029      	b.n	800abda <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ab86:	6839      	ldr	r1, [r7, #0]
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 fa11 	bl	800afb0 <USBD_CtlError>
        err++;
 800ab8e:	7afb      	ldrb	r3, [r7, #11]
 800ab90:	3301      	adds	r3, #1
 800ab92:	72fb      	strb	r3, [r7, #11]
      break;
 800ab94:	e021      	b.n	800abda <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	7c1b      	ldrb	r3, [r3, #16]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10d      	bne.n	800abba <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aba6:	f107 0208 	add.w	r2, r7, #8
 800abaa:	4610      	mov	r0, r2
 800abac:	4798      	blx	r3
 800abae:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	3301      	adds	r3, #1
 800abb4:	2207      	movs	r2, #7
 800abb6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800abb8:	e00f      	b.n	800abda <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800abba:	6839      	ldr	r1, [r7, #0]
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	f000 f9f7 	bl	800afb0 <USBD_CtlError>
        err++;
 800abc2:	7afb      	ldrb	r3, [r7, #11]
 800abc4:	3301      	adds	r3, #1
 800abc6:	72fb      	strb	r3, [r7, #11]
      break;
 800abc8:	e007      	b.n	800abda <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800abca:	6839      	ldr	r1, [r7, #0]
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f000 f9ef 	bl	800afb0 <USBD_CtlError>
      err++;
 800abd2:	7afb      	ldrb	r3, [r7, #11]
 800abd4:	3301      	adds	r3, #1
 800abd6:	72fb      	strb	r3, [r7, #11]
      break;
 800abd8:	bf00      	nop
  }

  if (err != 0U)
 800abda:	7afb      	ldrb	r3, [r7, #11]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d11e      	bne.n	800ac1e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	88db      	ldrh	r3, [r3, #6]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d016      	beq.n	800ac16 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800abe8:	893b      	ldrh	r3, [r7, #8]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d00e      	beq.n	800ac0c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	88da      	ldrh	r2, [r3, #6]
 800abf2:	893b      	ldrh	r3, [r7, #8]
 800abf4:	4293      	cmp	r3, r2
 800abf6:	bf28      	it	cs
 800abf8:	4613      	movcs	r3, r2
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800abfe:	893b      	ldrh	r3, [r7, #8]
 800ac00:	461a      	mov	r2, r3
 800ac02:	68f9      	ldr	r1, [r7, #12]
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 fa44 	bl	800b092 <USBD_CtlSendData>
 800ac0a:	e009      	b.n	800ac20 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ac0c:	6839      	ldr	r1, [r7, #0]
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 f9ce 	bl	800afb0 <USBD_CtlError>
 800ac14:	e004      	b.n	800ac20 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fa95 	bl	800b146 <USBD_CtlSendStatus>
 800ac1c:	e000      	b.n	800ac20 <USBD_GetDescriptor+0x320>
    return;
 800ac1e:	bf00      	nop
  }
}
 800ac20:	3710      	adds	r7, #16
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop

0800ac28 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	889b      	ldrh	r3, [r3, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d131      	bne.n	800ac9e <USBD_SetAddress+0x76>
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	88db      	ldrh	r3, [r3, #6]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d12d      	bne.n	800ac9e <USBD_SetAddress+0x76>
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	885b      	ldrh	r3, [r3, #2]
 800ac46:	2b7f      	cmp	r3, #127	@ 0x7f
 800ac48:	d829      	bhi.n	800ac9e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	885b      	ldrh	r3, [r3, #2]
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	2b03      	cmp	r3, #3
 800ac60:	d104      	bne.n	800ac6c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ac62:	6839      	ldr	r1, [r7, #0]
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 f9a3 	bl	800afb0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac6a:	e01d      	b.n	800aca8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	7bfa      	ldrb	r2, [r7, #15]
 800ac70:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ac74:	7bfb      	ldrb	r3, [r7, #15]
 800ac76:	4619      	mov	r1, r3
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 feab 	bl	800b9d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f000 fa61 	bl	800b146 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ac84:	7bfb      	ldrb	r3, [r7, #15]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d004      	beq.n	800ac94 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	2202      	movs	r2, #2
 800ac8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac92:	e009      	b.n	800aca8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2201      	movs	r2, #1
 800ac98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac9c:	e004      	b.n	800aca8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ac9e:	6839      	ldr	r1, [r7, #0]
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 f985 	bl	800afb0 <USBD_CtlError>
  }
}
 800aca6:	bf00      	nop
 800aca8:	bf00      	nop
 800acaa:	3710      	adds	r7, #16
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
 800acb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800acba:	2300      	movs	r3, #0
 800acbc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	885b      	ldrh	r3, [r3, #2]
 800acc2:	b2da      	uxtb	r2, r3
 800acc4:	4b4c      	ldr	r3, [pc, #304]	@ (800adf8 <USBD_SetConfig+0x148>)
 800acc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800acc8:	4b4b      	ldr	r3, [pc, #300]	@ (800adf8 <USBD_SetConfig+0x148>)
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	2b01      	cmp	r3, #1
 800acce:	d905      	bls.n	800acdc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800acd0:	6839      	ldr	r1, [r7, #0]
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 f96c 	bl	800afb0 <USBD_CtlError>
    return USBD_FAIL;
 800acd8:	2303      	movs	r3, #3
 800acda:	e088      	b.n	800adee <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ace2:	b2db      	uxtb	r3, r3
 800ace4:	2b02      	cmp	r3, #2
 800ace6:	d002      	beq.n	800acee <USBD_SetConfig+0x3e>
 800ace8:	2b03      	cmp	r3, #3
 800acea:	d025      	beq.n	800ad38 <USBD_SetConfig+0x88>
 800acec:	e071      	b.n	800add2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800acee:	4b42      	ldr	r3, [pc, #264]	@ (800adf8 <USBD_SetConfig+0x148>)
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d01c      	beq.n	800ad30 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800acf6:	4b40      	ldr	r3, [pc, #256]	@ (800adf8 <USBD_SetConfig+0x148>)
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	461a      	mov	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad00:	4b3d      	ldr	r3, [pc, #244]	@ (800adf8 <USBD_SetConfig+0x148>)
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	4619      	mov	r1, r3
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f7ff f992 	bl	800a030 <USBD_SetClassConfig>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d004      	beq.n	800ad20 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800ad16:	6839      	ldr	r1, [r7, #0]
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f949 	bl	800afb0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ad1e:	e065      	b.n	800adec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 fa10 	bl	800b146 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2203      	movs	r2, #3
 800ad2a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ad2e:	e05d      	b.n	800adec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 fa08 	bl	800b146 <USBD_CtlSendStatus>
      break;
 800ad36:	e059      	b.n	800adec <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ad38:	4b2f      	ldr	r3, [pc, #188]	@ (800adf8 <USBD_SetConfig+0x148>)
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d112      	bne.n	800ad66 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2202      	movs	r2, #2
 800ad44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ad48:	4b2b      	ldr	r3, [pc, #172]	@ (800adf8 <USBD_SetConfig+0x148>)
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad52:	4b29      	ldr	r3, [pc, #164]	@ (800adf8 <USBD_SetConfig+0x148>)
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	4619      	mov	r1, r3
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f7ff f985 	bl	800a068 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 f9f1 	bl	800b146 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ad64:	e042      	b.n	800adec <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800ad66:	4b24      	ldr	r3, [pc, #144]	@ (800adf8 <USBD_SetConfig+0x148>)
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d02a      	beq.n	800adca <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f7ff f973 	bl	800a068 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ad82:	4b1d      	ldr	r3, [pc, #116]	@ (800adf8 <USBD_SetConfig+0x148>)
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	461a      	mov	r2, r3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad8c:	4b1a      	ldr	r3, [pc, #104]	@ (800adf8 <USBD_SetConfig+0x148>)
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	4619      	mov	r1, r3
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f7ff f94c 	bl	800a030 <USBD_SetClassConfig>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ad9c:	7bfb      	ldrb	r3, [r7, #15]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00f      	beq.n	800adc2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ada2:	6839      	ldr	r1, [r7, #0]
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 f903 	bl	800afb0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	4619      	mov	r1, r3
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f7ff f958 	bl	800a068 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2202      	movs	r2, #2
 800adbc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800adc0:	e014      	b.n	800adec <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 f9bf 	bl	800b146 <USBD_CtlSendStatus>
      break;
 800adc8:	e010      	b.n	800adec <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 f9bb 	bl	800b146 <USBD_CtlSendStatus>
      break;
 800add0:	e00c      	b.n	800adec <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800add2:	6839      	ldr	r1, [r7, #0]
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 f8eb 	bl	800afb0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800adda:	4b07      	ldr	r3, [pc, #28]	@ (800adf8 <USBD_SetConfig+0x148>)
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	4619      	mov	r1, r3
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f7ff f941 	bl	800a068 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ade6:	2303      	movs	r3, #3
 800ade8:	73fb      	strb	r3, [r7, #15]
      break;
 800adea:	bf00      	nop
  }

  return ret;
 800adec:	7bfb      	ldrb	r3, [r7, #15]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3710      	adds	r7, #16
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	20000624 	.word	0x20000624

0800adfc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b082      	sub	sp, #8
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	88db      	ldrh	r3, [r3, #6]
 800ae0a:	2b01      	cmp	r3, #1
 800ae0c:	d004      	beq.n	800ae18 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ae0e:	6839      	ldr	r1, [r7, #0]
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 f8cd 	bl	800afb0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ae16:	e023      	b.n	800ae60 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	2b02      	cmp	r3, #2
 800ae22:	dc02      	bgt.n	800ae2a <USBD_GetConfig+0x2e>
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	dc03      	bgt.n	800ae30 <USBD_GetConfig+0x34>
 800ae28:	e015      	b.n	800ae56 <USBD_GetConfig+0x5a>
 800ae2a:	2b03      	cmp	r3, #3
 800ae2c:	d00b      	beq.n	800ae46 <USBD_GetConfig+0x4a>
 800ae2e:	e012      	b.n	800ae56 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2200      	movs	r2, #0
 800ae34:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	3308      	adds	r3, #8
 800ae3a:	2201      	movs	r2, #1
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 f927 	bl	800b092 <USBD_CtlSendData>
        break;
 800ae44:	e00c      	b.n	800ae60 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	3304      	adds	r3, #4
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 f91f 	bl	800b092 <USBD_CtlSendData>
        break;
 800ae54:	e004      	b.n	800ae60 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ae56:	6839      	ldr	r1, [r7, #0]
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 f8a9 	bl	800afb0 <USBD_CtlError>
        break;
 800ae5e:	bf00      	nop
}
 800ae60:	bf00      	nop
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	3b01      	subs	r3, #1
 800ae7c:	2b02      	cmp	r3, #2
 800ae7e:	d81e      	bhi.n	800aebe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	88db      	ldrh	r3, [r3, #6]
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d004      	beq.n	800ae92 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ae88:	6839      	ldr	r1, [r7, #0]
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 f890 	bl	800afb0 <USBD_CtlError>
        break;
 800ae90:	e01a      	b.n	800aec8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2201      	movs	r2, #1
 800ae96:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d005      	beq.n	800aeae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	68db      	ldr	r3, [r3, #12]
 800aea6:	f043 0202 	orr.w	r2, r3, #2
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	330c      	adds	r3, #12
 800aeb2:	2202      	movs	r2, #2
 800aeb4:	4619      	mov	r1, r3
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 f8eb 	bl	800b092 <USBD_CtlSendData>
      break;
 800aebc:	e004      	b.n	800aec8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800aebe:	6839      	ldr	r1, [r7, #0]
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 f875 	bl	800afb0 <USBD_CtlError>
      break;
 800aec6:	bf00      	nop
  }
}
 800aec8:	bf00      	nop
 800aeca:	3708      	adds	r7, #8
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	885b      	ldrh	r3, [r3, #2]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d106      	bne.n	800aef0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2201      	movs	r2, #1
 800aee6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f000 f92b 	bl	800b146 <USBD_CtlSendStatus>
  }
}
 800aef0:	bf00      	nop
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	3b01      	subs	r3, #1
 800af0c:	2b02      	cmp	r3, #2
 800af0e:	d80b      	bhi.n	800af28 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	885b      	ldrh	r3, [r3, #2]
 800af14:	2b01      	cmp	r3, #1
 800af16:	d10c      	bne.n	800af32 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 f910 	bl	800b146 <USBD_CtlSendStatus>
      }
      break;
 800af26:	e004      	b.n	800af32 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800af28:	6839      	ldr	r1, [r7, #0]
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 f840 	bl	800afb0 <USBD_CtlError>
      break;
 800af30:	e000      	b.n	800af34 <USBD_ClrFeature+0x3c>
      break;
 800af32:	bf00      	nop
  }
}
 800af34:	bf00      	nop
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	781a      	ldrb	r2, [r3, #0]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	3301      	adds	r3, #1
 800af56:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	781a      	ldrb	r2, [r3, #0]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	3301      	adds	r3, #1
 800af64:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f7ff fa92 	bl	800a490 <SWAPBYTE>
 800af6c:	4603      	mov	r3, r0
 800af6e:	461a      	mov	r2, r3
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	3301      	adds	r3, #1
 800af78:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	3301      	adds	r3, #1
 800af7e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800af80:	68f8      	ldr	r0, [r7, #12]
 800af82:	f7ff fa85 	bl	800a490 <SWAPBYTE>
 800af86:	4603      	mov	r3, r0
 800af88:	461a      	mov	r2, r3
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	3301      	adds	r3, #1
 800af92:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	3301      	adds	r3, #1
 800af98:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800af9a:	68f8      	ldr	r0, [r7, #12]
 800af9c:	f7ff fa78 	bl	800a490 <SWAPBYTE>
 800afa0:	4603      	mov	r3, r0
 800afa2:	461a      	mov	r2, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	80da      	strh	r2, [r3, #6]
}
 800afa8:	bf00      	nop
 800afaa:	3710      	adds	r7, #16
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800afba:	2180      	movs	r1, #128	@ 0x80
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 fc9f 	bl	800b900 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800afc2:	2100      	movs	r1, #0
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 fc9b 	bl	800b900 <USBD_LL_StallEP>
}
 800afca:	bf00      	nop
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800afd2:	b580      	push	{r7, lr}
 800afd4:	b086      	sub	sp, #24
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	60f8      	str	r0, [r7, #12]
 800afda:	60b9      	str	r1, [r7, #8]
 800afdc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800afde:	2300      	movs	r3, #0
 800afe0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d036      	beq.n	800b056 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800afec:	6938      	ldr	r0, [r7, #16]
 800afee:	f000 f836 	bl	800b05e <USBD_GetLen>
 800aff2:	4603      	mov	r3, r0
 800aff4:	3301      	adds	r3, #1
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	005b      	lsls	r3, r3, #1
 800affa:	b29a      	uxth	r2, r3
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b000:	7dfb      	ldrb	r3, [r7, #23]
 800b002:	68ba      	ldr	r2, [r7, #8]
 800b004:	4413      	add	r3, r2
 800b006:	687a      	ldr	r2, [r7, #4]
 800b008:	7812      	ldrb	r2, [r2, #0]
 800b00a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b00c:	7dfb      	ldrb	r3, [r7, #23]
 800b00e:	3301      	adds	r3, #1
 800b010:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b012:	7dfb      	ldrb	r3, [r7, #23]
 800b014:	68ba      	ldr	r2, [r7, #8]
 800b016:	4413      	add	r3, r2
 800b018:	2203      	movs	r2, #3
 800b01a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b01c:	7dfb      	ldrb	r3, [r7, #23]
 800b01e:	3301      	adds	r3, #1
 800b020:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b022:	e013      	b.n	800b04c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b024:	7dfb      	ldrb	r3, [r7, #23]
 800b026:	68ba      	ldr	r2, [r7, #8]
 800b028:	4413      	add	r3, r2
 800b02a:	693a      	ldr	r2, [r7, #16]
 800b02c:	7812      	ldrb	r2, [r2, #0]
 800b02e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	3301      	adds	r3, #1
 800b034:	613b      	str	r3, [r7, #16]
    idx++;
 800b036:	7dfb      	ldrb	r3, [r7, #23]
 800b038:	3301      	adds	r3, #1
 800b03a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b03c:	7dfb      	ldrb	r3, [r7, #23]
 800b03e:	68ba      	ldr	r2, [r7, #8]
 800b040:	4413      	add	r3, r2
 800b042:	2200      	movs	r2, #0
 800b044:	701a      	strb	r2, [r3, #0]
    idx++;
 800b046:	7dfb      	ldrb	r3, [r7, #23]
 800b048:	3301      	adds	r3, #1
 800b04a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b04c:	693b      	ldr	r3, [r7, #16]
 800b04e:	781b      	ldrb	r3, [r3, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d1e7      	bne.n	800b024 <USBD_GetString+0x52>
 800b054:	e000      	b.n	800b058 <USBD_GetString+0x86>
    return;
 800b056:	bf00      	nop
  }
}
 800b058:	3718      	adds	r7, #24
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b05e:	b480      	push	{r7}
 800b060:	b085      	sub	sp, #20
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b066:	2300      	movs	r3, #0
 800b068:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b06e:	e005      	b.n	800b07c <USBD_GetLen+0x1e>
  {
    len++;
 800b070:	7bfb      	ldrb	r3, [r7, #15]
 800b072:	3301      	adds	r3, #1
 800b074:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	3301      	adds	r3, #1
 800b07a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d1f5      	bne.n	800b070 <USBD_GetLen+0x12>
  }

  return len;
 800b084:	7bfb      	ldrb	r3, [r7, #15]
}
 800b086:	4618      	mov	r0, r3
 800b088:	3714      	adds	r7, #20
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr

0800b092 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b092:	b580      	push	{r7, lr}
 800b094:	b084      	sub	sp, #16
 800b096:	af00      	add	r7, sp, #0
 800b098:	60f8      	str	r0, [r7, #12]
 800b09a:	60b9      	str	r1, [r7, #8]
 800b09c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2202      	movs	r2, #2
 800b0a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	687a      	ldr	r2, [r7, #4]
 800b0aa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	68ba      	ldr	r2, [r7, #8]
 800b0b6:	2100      	movs	r1, #0
 800b0b8:	68f8      	ldr	r0, [r7, #12]
 800b0ba:	f000 fcaa 	bl	800ba12 <USBD_LL_Transmit>

  return USBD_OK;
 800b0be:	2300      	movs	r3, #0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	68ba      	ldr	r2, [r7, #8]
 800b0d8:	2100      	movs	r1, #0
 800b0da:	68f8      	ldr	r0, [r7, #12]
 800b0dc:	f000 fc99 	bl	800ba12 <USBD_LL_Transmit>

  return USBD_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3710      	adds	r7, #16
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b084      	sub	sp, #16
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	60f8      	str	r0, [r7, #12]
 800b0f2:	60b9      	str	r1, [r7, #8]
 800b0f4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2203      	movs	r2, #3
 800b0fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	68ba      	ldr	r2, [r7, #8]
 800b112:	2100      	movs	r1, #0
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	f000 fc9d 	bl	800ba54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b11a:	2300      	movs	r3, #0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3710      	adds	r7, #16
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	60b9      	str	r1, [r7, #8]
 800b12e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	68ba      	ldr	r2, [r7, #8]
 800b134:	2100      	movs	r1, #0
 800b136:	68f8      	ldr	r0, [r7, #12]
 800b138:	f000 fc8c 	bl	800ba54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b13c:	2300      	movs	r3, #0
}
 800b13e:	4618      	mov	r0, r3
 800b140:	3710      	adds	r7, #16
 800b142:	46bd      	mov	sp, r7
 800b144:	bd80      	pop	{r7, pc}

0800b146 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b146:	b580      	push	{r7, lr}
 800b148:	b082      	sub	sp, #8
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2204      	movs	r2, #4
 800b152:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b156:	2300      	movs	r3, #0
 800b158:	2200      	movs	r2, #0
 800b15a:	2100      	movs	r1, #0
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 fc58 	bl	800ba12 <USBD_LL_Transmit>

  return USBD_OK;
 800b162:	2300      	movs	r3, #0
}
 800b164:	4618      	mov	r0, r3
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2205      	movs	r2, #5
 800b178:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b17c:	2300      	movs	r3, #0
 800b17e:	2200      	movs	r2, #0
 800b180:	2100      	movs	r1, #0
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 fc66 	bl	800ba54 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3708      	adds	r7, #8
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
	...

0800b194 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b198:	2200      	movs	r2, #0
 800b19a:	4912      	ldr	r1, [pc, #72]	@ (800b1e4 <MX_USB_Device_Init+0x50>)
 800b19c:	4812      	ldr	r0, [pc, #72]	@ (800b1e8 <MX_USB_Device_Init+0x54>)
 800b19e:	f7fe fed9 	bl	8009f54 <USBD_Init>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d001      	beq.n	800b1ac <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b1a8:	f7f6 fb54 	bl	8001854 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b1ac:	490f      	ldr	r1, [pc, #60]	@ (800b1ec <MX_USB_Device_Init+0x58>)
 800b1ae:	480e      	ldr	r0, [pc, #56]	@ (800b1e8 <MX_USB_Device_Init+0x54>)
 800b1b0:	f7fe ff00 	bl	8009fb4 <USBD_RegisterClass>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d001      	beq.n	800b1be <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b1ba:	f7f6 fb4b 	bl	8001854 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b1be:	490c      	ldr	r1, [pc, #48]	@ (800b1f0 <MX_USB_Device_Init+0x5c>)
 800b1c0:	4809      	ldr	r0, [pc, #36]	@ (800b1e8 <MX_USB_Device_Init+0x54>)
 800b1c2:	f7fe fe21 	bl	8009e08 <USBD_CDC_RegisterInterface>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d001      	beq.n	800b1d0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b1cc:	f7f6 fb42 	bl	8001854 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b1d0:	4805      	ldr	r0, [pc, #20]	@ (800b1e8 <MX_USB_Device_Init+0x54>)
 800b1d2:	f7fe ff16 	bl	800a002 <USBD_Start>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d001      	beq.n	800b1e0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b1dc:	f7f6 fb3a 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b1e0:	bf00      	nop
 800b1e2:	bd80      	pop	{r7, pc}
 800b1e4:	20000140 	.word	0x20000140
 800b1e8:	20000628 	.word	0x20000628
 800b1ec:	20000028 	.word	0x20000028
 800b1f0:	2000012c 	.word	0x2000012c

0800b1f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	4905      	ldr	r1, [pc, #20]	@ (800b210 <CDC_Init_FS+0x1c>)
 800b1fc:	4805      	ldr	r0, [pc, #20]	@ (800b214 <CDC_Init_FS+0x20>)
 800b1fe:	f7fe fe18 	bl	8009e32 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b202:	4905      	ldr	r1, [pc, #20]	@ (800b218 <CDC_Init_FS+0x24>)
 800b204:	4803      	ldr	r0, [pc, #12]	@ (800b214 <CDC_Init_FS+0x20>)
 800b206:	f7fe fe32 	bl	8009e6e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b20a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	200010f8 	.word	0x200010f8
 800b214:	20000628 	.word	0x20000628
 800b218:	200008f8 	.word	0x200008f8

0800b21c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b21c:	b480      	push	{r7}
 800b21e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b220:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b222:	4618      	mov	r0, r3
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b22c:	b480      	push	{r7}
 800b22e:	b083      	sub	sp, #12
 800b230:	af00      	add	r7, sp, #0
 800b232:	4603      	mov	r3, r0
 800b234:	6039      	str	r1, [r7, #0]
 800b236:	71fb      	strb	r3, [r7, #7]
 800b238:	4613      	mov	r3, r2
 800b23a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b23c:	79fb      	ldrb	r3, [r7, #7]
 800b23e:	2b23      	cmp	r3, #35	@ 0x23
 800b240:	d84a      	bhi.n	800b2d8 <CDC_Control_FS+0xac>
 800b242:	a201      	add	r2, pc, #4	@ (adr r2, 800b248 <CDC_Control_FS+0x1c>)
 800b244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b248:	0800b2d9 	.word	0x0800b2d9
 800b24c:	0800b2d9 	.word	0x0800b2d9
 800b250:	0800b2d9 	.word	0x0800b2d9
 800b254:	0800b2d9 	.word	0x0800b2d9
 800b258:	0800b2d9 	.word	0x0800b2d9
 800b25c:	0800b2d9 	.word	0x0800b2d9
 800b260:	0800b2d9 	.word	0x0800b2d9
 800b264:	0800b2d9 	.word	0x0800b2d9
 800b268:	0800b2d9 	.word	0x0800b2d9
 800b26c:	0800b2d9 	.word	0x0800b2d9
 800b270:	0800b2d9 	.word	0x0800b2d9
 800b274:	0800b2d9 	.word	0x0800b2d9
 800b278:	0800b2d9 	.word	0x0800b2d9
 800b27c:	0800b2d9 	.word	0x0800b2d9
 800b280:	0800b2d9 	.word	0x0800b2d9
 800b284:	0800b2d9 	.word	0x0800b2d9
 800b288:	0800b2d9 	.word	0x0800b2d9
 800b28c:	0800b2d9 	.word	0x0800b2d9
 800b290:	0800b2d9 	.word	0x0800b2d9
 800b294:	0800b2d9 	.word	0x0800b2d9
 800b298:	0800b2d9 	.word	0x0800b2d9
 800b29c:	0800b2d9 	.word	0x0800b2d9
 800b2a0:	0800b2d9 	.word	0x0800b2d9
 800b2a4:	0800b2d9 	.word	0x0800b2d9
 800b2a8:	0800b2d9 	.word	0x0800b2d9
 800b2ac:	0800b2d9 	.word	0x0800b2d9
 800b2b0:	0800b2d9 	.word	0x0800b2d9
 800b2b4:	0800b2d9 	.word	0x0800b2d9
 800b2b8:	0800b2d9 	.word	0x0800b2d9
 800b2bc:	0800b2d9 	.word	0x0800b2d9
 800b2c0:	0800b2d9 	.word	0x0800b2d9
 800b2c4:	0800b2d9 	.word	0x0800b2d9
 800b2c8:	0800b2d9 	.word	0x0800b2d9
 800b2cc:	0800b2d9 	.word	0x0800b2d9
 800b2d0:	0800b2d9 	.word	0x0800b2d9
 800b2d4:	0800b2d9 	.word	0x0800b2d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b2d8:	bf00      	nop
  }

  return (USBD_OK);
 800b2da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b2f2:	6879      	ldr	r1, [r7, #4]
 800b2f4:	4809      	ldr	r0, [pc, #36]	@ (800b31c <CDC_Receive_FS+0x34>)
 800b2f6:	f7fe fdba 	bl	8009e6e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b2fa:	4808      	ldr	r0, [pc, #32]	@ (800b31c <CDC_Receive_FS+0x34>)
 800b2fc:	f7fe fe00 	bl	8009f00 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	73fb      	strb	r3, [r7, #15]
  memcpy (usbBuffer, Buf, len);
 800b306:	7bfb      	ldrb	r3, [r7, #15]
 800b308:	461a      	mov	r2, r3
 800b30a:	6879      	ldr	r1, [r7, #4]
 800b30c:	4804      	ldr	r0, [pc, #16]	@ (800b320 <CDC_Receive_FS+0x38>)
 800b30e:	f000 fc81 	bl	800bc14 <memcpy>
  return (USBD_OK);
 800b312:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b314:	4618      	mov	r0, r3
 800b316:	3710      	adds	r7, #16
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	20000628 	.word	0x20000628
 800b320:	200005d4 	.word	0x200005d4

0800b324 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	460b      	mov	r3, r1
 800b32e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b330:	2300      	movs	r3, #0
 800b332:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b334:	4b0d      	ldr	r3, [pc, #52]	@ (800b36c <CDC_Transmit_FS+0x48>)
 800b336:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800b33a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b342:	2b00      	cmp	r3, #0
 800b344:	d001      	beq.n	800b34a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b346:	2301      	movs	r3, #1
 800b348:	e00b      	b.n	800b362 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b34a:	887b      	ldrh	r3, [r7, #2]
 800b34c:	461a      	mov	r2, r3
 800b34e:	6879      	ldr	r1, [r7, #4]
 800b350:	4806      	ldr	r0, [pc, #24]	@ (800b36c <CDC_Transmit_FS+0x48>)
 800b352:	f7fe fd6e 	bl	8009e32 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b356:	4805      	ldr	r0, [pc, #20]	@ (800b36c <CDC_Transmit_FS+0x48>)
 800b358:	f7fe fda2 	bl	8009ea0 <USBD_CDC_TransmitPacket>
 800b35c:	4603      	mov	r3, r0
 800b35e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b360:	7bfb      	ldrb	r3, [r7, #15]
}
 800b362:	4618      	mov	r0, r3
 800b364:	3710      	adds	r7, #16
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	20000628 	.word	0x20000628

0800b370 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b370:	b480      	push	{r7}
 800b372:	b087      	sub	sp, #28
 800b374:	af00      	add	r7, sp, #0
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	60b9      	str	r1, [r7, #8]
 800b37a:	4613      	mov	r3, r2
 800b37c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b37e:	2300      	movs	r3, #0
 800b380:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b382:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b386:	4618      	mov	r0, r3
 800b388:	371c      	adds	r7, #28
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr
	...

0800b394 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	4603      	mov	r3, r0
 800b39c:	6039      	str	r1, [r7, #0]
 800b39e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	2212      	movs	r2, #18
 800b3a4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b3a6:	4b03      	ldr	r3, [pc, #12]	@ (800b3b4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr
 800b3b4:	20000160 	.word	0x20000160

0800b3b8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	4603      	mov	r3, r0
 800b3c0:	6039      	str	r1, [r7, #0]
 800b3c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	2204      	movs	r2, #4
 800b3c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b3ca:	4b03      	ldr	r3, [pc, #12]	@ (800b3d8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	370c      	adds	r7, #12
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d6:	4770      	bx	lr
 800b3d8:	20000174 	.word	0x20000174

0800b3dc <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	6039      	str	r1, [r7, #0]
 800b3e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b3e8:	79fb      	ldrb	r3, [r7, #7]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d105      	bne.n	800b3fa <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	4907      	ldr	r1, [pc, #28]	@ (800b410 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b3f2:	4808      	ldr	r0, [pc, #32]	@ (800b414 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b3f4:	f7ff fded 	bl	800afd2 <USBD_GetString>
 800b3f8:	e004      	b.n	800b404 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b3fa:	683a      	ldr	r2, [r7, #0]
 800b3fc:	4904      	ldr	r1, [pc, #16]	@ (800b410 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b3fe:	4805      	ldr	r0, [pc, #20]	@ (800b414 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b400:	f7ff fde7 	bl	800afd2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b404:	4b02      	ldr	r3, [pc, #8]	@ (800b410 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b406:	4618      	mov	r0, r3
 800b408:	3708      	adds	r7, #8
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}
 800b40e:	bf00      	nop
 800b410:	200018f8 	.word	0x200018f8
 800b414:	0800bc58 	.word	0x0800bc58

0800b418 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	4603      	mov	r3, r0
 800b420:	6039      	str	r1, [r7, #0]
 800b422:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b424:	683a      	ldr	r2, [r7, #0]
 800b426:	4904      	ldr	r1, [pc, #16]	@ (800b438 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b428:	4804      	ldr	r0, [pc, #16]	@ (800b43c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b42a:	f7ff fdd2 	bl	800afd2 <USBD_GetString>
  return USBD_StrDesc;
 800b42e:	4b02      	ldr	r3, [pc, #8]	@ (800b438 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b430:	4618      	mov	r0, r3
 800b432:	3708      	adds	r7, #8
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}
 800b438:	200018f8 	.word	0x200018f8
 800b43c:	0800bc70 	.word	0x0800bc70

0800b440 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	4603      	mov	r3, r0
 800b448:	6039      	str	r1, [r7, #0]
 800b44a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	221a      	movs	r2, #26
 800b450:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b452:	f000 f843 	bl	800b4dc <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b456:	4b02      	ldr	r3, [pc, #8]	@ (800b460 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3708      	adds	r7, #8
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}
 800b460:	20000178 	.word	0x20000178

0800b464 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	4603      	mov	r3, r0
 800b46c:	6039      	str	r1, [r7, #0]
 800b46e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b470:	79fb      	ldrb	r3, [r7, #7]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d105      	bne.n	800b482 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b476:	683a      	ldr	r2, [r7, #0]
 800b478:	4907      	ldr	r1, [pc, #28]	@ (800b498 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b47a:	4808      	ldr	r0, [pc, #32]	@ (800b49c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b47c:	f7ff fda9 	bl	800afd2 <USBD_GetString>
 800b480:	e004      	b.n	800b48c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b482:	683a      	ldr	r2, [r7, #0]
 800b484:	4904      	ldr	r1, [pc, #16]	@ (800b498 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b486:	4805      	ldr	r0, [pc, #20]	@ (800b49c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b488:	f7ff fda3 	bl	800afd2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b48c:	4b02      	ldr	r3, [pc, #8]	@ (800b498 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3708      	adds	r7, #8
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	200018f8 	.word	0x200018f8
 800b49c:	0800bc84 	.word	0x0800bc84

0800b4a0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	4603      	mov	r3, r0
 800b4a8:	6039      	str	r1, [r7, #0]
 800b4aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b4ac:	79fb      	ldrb	r3, [r7, #7]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d105      	bne.n	800b4be <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b4b2:	683a      	ldr	r2, [r7, #0]
 800b4b4:	4907      	ldr	r1, [pc, #28]	@ (800b4d4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b4b6:	4808      	ldr	r0, [pc, #32]	@ (800b4d8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b4b8:	f7ff fd8b 	bl	800afd2 <USBD_GetString>
 800b4bc:	e004      	b.n	800b4c8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b4be:	683a      	ldr	r2, [r7, #0]
 800b4c0:	4904      	ldr	r1, [pc, #16]	@ (800b4d4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b4c2:	4805      	ldr	r0, [pc, #20]	@ (800b4d8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b4c4:	f7ff fd85 	bl	800afd2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4c8:	4b02      	ldr	r3, [pc, #8]	@ (800b4d4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3708      	adds	r7, #8
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
 800b4d2:	bf00      	nop
 800b4d4:	200018f8 	.word	0x200018f8
 800b4d8:	0800bc90 	.word	0x0800bc90

0800b4dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b4e2:	4b0f      	ldr	r3, [pc, #60]	@ (800b520 <Get_SerialNum+0x44>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b4e8:	4b0e      	ldr	r3, [pc, #56]	@ (800b524 <Get_SerialNum+0x48>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b4ee:	4b0e      	ldr	r3, [pc, #56]	@ (800b528 <Get_SerialNum+0x4c>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b4f4:	68fa      	ldr	r2, [r7, #12]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d009      	beq.n	800b516 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b502:	2208      	movs	r2, #8
 800b504:	4909      	ldr	r1, [pc, #36]	@ (800b52c <Get_SerialNum+0x50>)
 800b506:	68f8      	ldr	r0, [r7, #12]
 800b508:	f000 f814 	bl	800b534 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b50c:	2204      	movs	r2, #4
 800b50e:	4908      	ldr	r1, [pc, #32]	@ (800b530 <Get_SerialNum+0x54>)
 800b510:	68b8      	ldr	r0, [r7, #8]
 800b512:	f000 f80f 	bl	800b534 <IntToUnicode>
  }
}
 800b516:	bf00      	nop
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	1fff7590 	.word	0x1fff7590
 800b524:	1fff7594 	.word	0x1fff7594
 800b528:	1fff7598 	.word	0x1fff7598
 800b52c:	2000017a 	.word	0x2000017a
 800b530:	2000018a 	.word	0x2000018a

0800b534 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b534:	b480      	push	{r7}
 800b536:	b087      	sub	sp, #28
 800b538:	af00      	add	r7, sp, #0
 800b53a:	60f8      	str	r0, [r7, #12]
 800b53c:	60b9      	str	r1, [r7, #8]
 800b53e:	4613      	mov	r3, r2
 800b540:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b542:	2300      	movs	r3, #0
 800b544:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b546:	2300      	movs	r3, #0
 800b548:	75fb      	strb	r3, [r7, #23]
 800b54a:	e027      	b.n	800b59c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	0f1b      	lsrs	r3, r3, #28
 800b550:	2b09      	cmp	r3, #9
 800b552:	d80b      	bhi.n	800b56c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	0f1b      	lsrs	r3, r3, #28
 800b558:	b2da      	uxtb	r2, r3
 800b55a:	7dfb      	ldrb	r3, [r7, #23]
 800b55c:	005b      	lsls	r3, r3, #1
 800b55e:	4619      	mov	r1, r3
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	440b      	add	r3, r1
 800b564:	3230      	adds	r2, #48	@ 0x30
 800b566:	b2d2      	uxtb	r2, r2
 800b568:	701a      	strb	r2, [r3, #0]
 800b56a:	e00a      	b.n	800b582 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	0f1b      	lsrs	r3, r3, #28
 800b570:	b2da      	uxtb	r2, r3
 800b572:	7dfb      	ldrb	r3, [r7, #23]
 800b574:	005b      	lsls	r3, r3, #1
 800b576:	4619      	mov	r1, r3
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	440b      	add	r3, r1
 800b57c:	3237      	adds	r2, #55	@ 0x37
 800b57e:	b2d2      	uxtb	r2, r2
 800b580:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	011b      	lsls	r3, r3, #4
 800b586:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b588:	7dfb      	ldrb	r3, [r7, #23]
 800b58a:	005b      	lsls	r3, r3, #1
 800b58c:	3301      	adds	r3, #1
 800b58e:	68ba      	ldr	r2, [r7, #8]
 800b590:	4413      	add	r3, r2
 800b592:	2200      	movs	r2, #0
 800b594:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b596:	7dfb      	ldrb	r3, [r7, #23]
 800b598:	3301      	adds	r3, #1
 800b59a:	75fb      	strb	r3, [r7, #23]
 800b59c:	7dfa      	ldrb	r2, [r7, #23]
 800b59e:	79fb      	ldrb	r3, [r7, #7]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d3d3      	bcc.n	800b54c <IntToUnicode+0x18>
  }
}
 800b5a4:	bf00      	nop
 800b5a6:	bf00      	nop
 800b5a8:	371c      	adds	r7, #28
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr
	...

0800b5b4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b098      	sub	sp, #96	@ 0x60
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b5bc:	f107 030c 	add.w	r3, r7, #12
 800b5c0:	2254      	movs	r2, #84	@ 0x54
 800b5c2:	2100      	movs	r1, #0
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f000 faf9 	bl	800bbbc <memset>
  if(pcdHandle->Instance==USB)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4a15      	ldr	r2, [pc, #84]	@ (800b624 <HAL_PCD_MspInit+0x70>)
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d123      	bne.n	800b61c <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b5d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b5d8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800b5da:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b5de:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b5e0:	f107 030c 	add.w	r3, r7, #12
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7f9 fc19 	bl	8004e1c <HAL_RCCEx_PeriphCLKConfig>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d001      	beq.n	800b5f4 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 800b5f0:	f7f6 f930 	bl	8001854 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b5f4:	4b0c      	ldr	r3, [pc, #48]	@ (800b628 <HAL_PCD_MspInit+0x74>)
 800b5f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b5f8:	4a0b      	ldr	r2, [pc, #44]	@ (800b628 <HAL_PCD_MspInit+0x74>)
 800b5fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b5fe:	6593      	str	r3, [r2, #88]	@ 0x58
 800b600:	4b09      	ldr	r3, [pc, #36]	@ (800b628 <HAL_PCD_MspInit+0x74>)
 800b602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b604:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b608:	60bb      	str	r3, [r7, #8]
 800b60a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b60c:	2200      	movs	r2, #0
 800b60e:	2100      	movs	r1, #0
 800b610:	2014      	movs	r0, #20
 800b612:	f7f6 fe62 	bl	80022da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b616:	2014      	movs	r0, #20
 800b618:	f7f6 fe79 	bl	800230e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b61c:	bf00      	nop
 800b61e:	3760      	adds	r7, #96	@ 0x60
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}
 800b624:	40005c00 	.word	0x40005c00
 800b628:	40021000 	.word	0x40021000

0800b62c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b082      	sub	sp, #8
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800b640:	4619      	mov	r1, r3
 800b642:	4610      	mov	r0, r2
 800b644:	f7fe fd28 	bl	800a098 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b648:	bf00      	nop
 800b64a:	3708      	adds	r7, #8
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}

0800b650 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
 800b658:	460b      	mov	r3, r1
 800b65a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800b662:	78fa      	ldrb	r2, [r7, #3]
 800b664:	6879      	ldr	r1, [r7, #4]
 800b666:	4613      	mov	r3, r2
 800b668:	009b      	lsls	r3, r3, #2
 800b66a:	4413      	add	r3, r2
 800b66c:	00db      	lsls	r3, r3, #3
 800b66e:	440b      	add	r3, r1
 800b670:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b674:	681a      	ldr	r2, [r3, #0]
 800b676:	78fb      	ldrb	r3, [r7, #3]
 800b678:	4619      	mov	r1, r3
 800b67a:	f7fe fd62 	bl	800a142 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b67e:	bf00      	nop
 800b680:	3708      	adds	r7, #8
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b686:	b580      	push	{r7, lr}
 800b688:	b082      	sub	sp, #8
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
 800b68e:	460b      	mov	r3, r1
 800b690:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800b698:	78fa      	ldrb	r2, [r7, #3]
 800b69a:	6879      	ldr	r1, [r7, #4]
 800b69c:	4613      	mov	r3, r2
 800b69e:	009b      	lsls	r3, r3, #2
 800b6a0:	4413      	add	r3, r2
 800b6a2:	00db      	lsls	r3, r3, #3
 800b6a4:	440b      	add	r3, r1
 800b6a6:	3324      	adds	r3, #36	@ 0x24
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	78fb      	ldrb	r3, [r7, #3]
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	f7fe fdab 	bl	800a208 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b6b2:	bf00      	nop
 800b6b4:	3708      	adds	r7, #8
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b082      	sub	sp, #8
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7fe febf 	bl	800a44c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b6ce:	bf00      	nop
 800b6d0:	3708      	adds	r7, #8
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b084      	sub	sp, #16
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	795b      	ldrb	r3, [r3, #5]
 800b6e6:	2b02      	cmp	r3, #2
 800b6e8:	d001      	beq.n	800b6ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b6ea:	f7f6 f8b3 	bl	8001854 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b6f4:	7bfa      	ldrb	r2, [r7, #15]
 800b6f6:	4611      	mov	r1, r2
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7fe fe69 	bl	800a3d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b704:	4618      	mov	r0, r3
 800b706:	f7fe fe15 	bl	800a334 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800b70a:	bf00      	nop
 800b70c:	3710      	adds	r7, #16
 800b70e:	46bd      	mov	sp, r7
 800b710:	bd80      	pop	{r7, pc}
	...

0800b714 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b722:	4618      	mov	r0, r3
 800b724:	f7fe fe64 	bl	800a3f0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	7a5b      	ldrb	r3, [r3, #9]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d005      	beq.n	800b73c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b730:	4b04      	ldr	r3, [pc, #16]	@ (800b744 <HAL_PCD_SuspendCallback+0x30>)
 800b732:	691b      	ldr	r3, [r3, #16]
 800b734:	4a03      	ldr	r2, [pc, #12]	@ (800b744 <HAL_PCD_SuspendCallback+0x30>)
 800b736:	f043 0306 	orr.w	r3, r3, #6
 800b73a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800b73c:	bf00      	nop
 800b73e:	3708      	adds	r7, #8
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	e000ed00 	.word	0xe000ed00

0800b748 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	7a5b      	ldrb	r3, [r3, #9]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d007      	beq.n	800b768 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b758:	4b08      	ldr	r3, [pc, #32]	@ (800b77c <HAL_PCD_ResumeCallback+0x34>)
 800b75a:	691b      	ldr	r3, [r3, #16]
 800b75c:	4a07      	ldr	r2, [pc, #28]	@ (800b77c <HAL_PCD_ResumeCallback+0x34>)
 800b75e:	f023 0306 	bic.w	r3, r3, #6
 800b762:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b764:	f000 f9f8 	bl	800bb58 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fe fe54 	bl	800a41c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800b774:	bf00      	nop
 800b776:	3708      	adds	r7, #8
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	e000ed00 	.word	0xe000ed00

0800b780 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800b788:	4a2b      	ldr	r2, [pc, #172]	@ (800b838 <USBD_LL_Init+0xb8>)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4a29      	ldr	r2, [pc, #164]	@ (800b838 <USBD_LL_Init+0xb8>)
 800b794:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 800b798:	4b27      	ldr	r3, [pc, #156]	@ (800b838 <USBD_LL_Init+0xb8>)
 800b79a:	4a28      	ldr	r2, [pc, #160]	@ (800b83c <USBD_LL_Init+0xbc>)
 800b79c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b79e:	4b26      	ldr	r3, [pc, #152]	@ (800b838 <USBD_LL_Init+0xb8>)
 800b7a0:	2208      	movs	r2, #8
 800b7a2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b7a4:	4b24      	ldr	r3, [pc, #144]	@ (800b838 <USBD_LL_Init+0xb8>)
 800b7a6:	2202      	movs	r2, #2
 800b7a8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b7aa:	4b23      	ldr	r3, [pc, #140]	@ (800b838 <USBD_LL_Init+0xb8>)
 800b7ac:	2202      	movs	r2, #2
 800b7ae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800b7b0:	4b21      	ldr	r3, [pc, #132]	@ (800b838 <USBD_LL_Init+0xb8>)
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b7b6:	4b20      	ldr	r3, [pc, #128]	@ (800b838 <USBD_LL_Init+0xb8>)
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b7bc:	4b1e      	ldr	r3, [pc, #120]	@ (800b838 <USBD_LL_Init+0xb8>)
 800b7be:	2200      	movs	r2, #0
 800b7c0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b7c2:	4b1d      	ldr	r3, [pc, #116]	@ (800b838 <USBD_LL_Init+0xb8>)
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b7c8:	481b      	ldr	r0, [pc, #108]	@ (800b838 <USBD_LL_Init+0xb8>)
 800b7ca:	f7f7 f847 	bl	800285c <HAL_PCD_Init>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d001      	beq.n	800b7d8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800b7d4:	f7f6 f83e 	bl	8001854 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b7de:	2318      	movs	r3, #24
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	2100      	movs	r1, #0
 800b7e4:	f7f8 fcce 	bl	8004184 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b7ee:	2358      	movs	r3, #88	@ 0x58
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	2180      	movs	r1, #128	@ 0x80
 800b7f4:	f7f8 fcc6 	bl	8004184 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b7fe:	23c0      	movs	r3, #192	@ 0xc0
 800b800:	2200      	movs	r2, #0
 800b802:	2181      	movs	r1, #129	@ 0x81
 800b804:	f7f8 fcbe 	bl	8004184 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b80e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b812:	2200      	movs	r2, #0
 800b814:	2101      	movs	r1, #1
 800b816:	f7f8 fcb5 	bl	8004184 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b820:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b824:	2200      	movs	r2, #0
 800b826:	2182      	movs	r1, #130	@ 0x82
 800b828:	f7f8 fcac 	bl	8004184 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b82c:	2300      	movs	r3, #0
}
 800b82e:	4618      	mov	r0, r3
 800b830:	3708      	adds	r7, #8
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	20001af8 	.word	0x20001af8
 800b83c:	40005c00 	.word	0x40005c00

0800b840 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b084      	sub	sp, #16
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b848:	2300      	movs	r3, #0
 800b84a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b84c:	2300      	movs	r3, #0
 800b84e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b856:	4618      	mov	r0, r3
 800b858:	f7f7 f8ce 	bl	80029f8 <HAL_PCD_Start>
 800b85c:	4603      	mov	r3, r0
 800b85e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b860:	7bfb      	ldrb	r3, [r7, #15]
 800b862:	4618      	mov	r0, r3
 800b864:	f000 f97e 	bl	800bb64 <USBD_Get_USB_Status>
 800b868:	4603      	mov	r3, r0
 800b86a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b86c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3710      	adds	r7, #16
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}

0800b876 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b876:	b580      	push	{r7, lr}
 800b878:	b084      	sub	sp, #16
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]
 800b87e:	4608      	mov	r0, r1
 800b880:	4611      	mov	r1, r2
 800b882:	461a      	mov	r2, r3
 800b884:	4603      	mov	r3, r0
 800b886:	70fb      	strb	r3, [r7, #3]
 800b888:	460b      	mov	r3, r1
 800b88a:	70bb      	strb	r3, [r7, #2]
 800b88c:	4613      	mov	r3, r2
 800b88e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b890:	2300      	movs	r3, #0
 800b892:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b894:	2300      	movs	r3, #0
 800b896:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800b89e:	78bb      	ldrb	r3, [r7, #2]
 800b8a0:	883a      	ldrh	r2, [r7, #0]
 800b8a2:	78f9      	ldrb	r1, [r7, #3]
 800b8a4:	f7f7 fa15 	bl	8002cd2 <HAL_PCD_EP_Open>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8ac:	7bfb      	ldrb	r3, [r7, #15]
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f000 f958 	bl	800bb64 <USBD_Get_USB_Status>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3710      	adds	r7, #16
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd80      	pop	{r7, pc}

0800b8c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8c2:	b580      	push	{r7, lr}
 800b8c4:	b084      	sub	sp, #16
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
 800b8ca:	460b      	mov	r3, r1
 800b8cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b8dc:	78fa      	ldrb	r2, [r7, #3]
 800b8de:	4611      	mov	r1, r2
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7f7 fa55 	bl	8002d90 <HAL_PCD_EP_Close>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8ea:	7bfb      	ldrb	r3, [r7, #15]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f000 f939 	bl	800bb64 <USBD_Get_USB_Status>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3710      	adds	r7, #16
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b084      	sub	sp, #16
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	460b      	mov	r3, r1
 800b90a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b90c:	2300      	movs	r3, #0
 800b90e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b910:	2300      	movs	r3, #0
 800b912:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b91a:	78fa      	ldrb	r2, [r7, #3]
 800b91c:	4611      	mov	r1, r2
 800b91e:	4618      	mov	r0, r3
 800b920:	f7f7 fafe 	bl	8002f20 <HAL_PCD_EP_SetStall>
 800b924:	4603      	mov	r3, r0
 800b926:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b928:	7bfb      	ldrb	r3, [r7, #15]
 800b92a:	4618      	mov	r0, r3
 800b92c:	f000 f91a 	bl	800bb64 <USBD_Get_USB_Status>
 800b930:	4603      	mov	r3, r0
 800b932:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b934:	7bbb      	ldrb	r3, [r7, #14]
}
 800b936:	4618      	mov	r0, r3
 800b938:	3710      	adds	r7, #16
 800b93a:	46bd      	mov	sp, r7
 800b93c:	bd80      	pop	{r7, pc}

0800b93e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b93e:	b580      	push	{r7, lr}
 800b940:	b084      	sub	sp, #16
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
 800b946:	460b      	mov	r3, r1
 800b948:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b94a:	2300      	movs	r3, #0
 800b94c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b94e:	2300      	movs	r3, #0
 800b950:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b958:	78fa      	ldrb	r2, [r7, #3]
 800b95a:	4611      	mov	r1, r2
 800b95c:	4618      	mov	r0, r3
 800b95e:	f7f7 fb31 	bl	8002fc4 <HAL_PCD_EP_ClrStall>
 800b962:	4603      	mov	r3, r0
 800b964:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b966:	7bfb      	ldrb	r3, [r7, #15]
 800b968:	4618      	mov	r0, r3
 800b96a:	f000 f8fb 	bl	800bb64 <USBD_Get_USB_Status>
 800b96e:	4603      	mov	r3, r0
 800b970:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b972:	7bbb      	ldrb	r3, [r7, #14]
}
 800b974:	4618      	mov	r0, r3
 800b976:	3710      	adds	r7, #16
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b085      	sub	sp, #20
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
 800b984:	460b      	mov	r3, r1
 800b986:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b98e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b990:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b994:	2b00      	cmp	r3, #0
 800b996:	da0b      	bge.n	800b9b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b998:	78fb      	ldrb	r3, [r7, #3]
 800b99a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b99e:	68f9      	ldr	r1, [r7, #12]
 800b9a0:	4613      	mov	r3, r2
 800b9a2:	009b      	lsls	r3, r3, #2
 800b9a4:	4413      	add	r3, r2
 800b9a6:	00db      	lsls	r3, r3, #3
 800b9a8:	440b      	add	r3, r1
 800b9aa:	3312      	adds	r3, #18
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	e00b      	b.n	800b9c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b9b0:	78fb      	ldrb	r3, [r7, #3]
 800b9b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b9b6:	68f9      	ldr	r1, [r7, #12]
 800b9b8:	4613      	mov	r3, r2
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	4413      	add	r3, r2
 800b9be:	00db      	lsls	r3, r3, #3
 800b9c0:	440b      	add	r3, r1
 800b9c2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b9c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3714      	adds	r7, #20
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b084      	sub	sp, #16
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	460b      	mov	r3, r1
 800b9de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800b9ee:	78fa      	ldrb	r2, [r7, #3]
 800b9f0:	4611      	mov	r1, r2
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7f7 f949 	bl	8002c8a <HAL_PCD_SetAddress>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9fc:	7bfb      	ldrb	r3, [r7, #15]
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f000 f8b0 	bl	800bb64 <USBD_Get_USB_Status>
 800ba04:	4603      	mov	r3, r0
 800ba06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3710      	adds	r7, #16
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}

0800ba12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ba12:	b580      	push	{r7, lr}
 800ba14:	b086      	sub	sp, #24
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	60f8      	str	r0, [r7, #12]
 800ba1a:	607a      	str	r2, [r7, #4]
 800ba1c:	603b      	str	r3, [r7, #0]
 800ba1e:	460b      	mov	r3, r1
 800ba20:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba22:	2300      	movs	r3, #0
 800ba24:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba26:	2300      	movs	r3, #0
 800ba28:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ba30:	7af9      	ldrb	r1, [r7, #11]
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	f7f7 fa3c 	bl	8002eb2 <HAL_PCD_EP_Transmit>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba3e:	7dfb      	ldrb	r3, [r7, #23]
 800ba40:	4618      	mov	r0, r3
 800ba42:	f000 f88f 	bl	800bb64 <USBD_Get_USB_Status>
 800ba46:	4603      	mov	r3, r0
 800ba48:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ba4a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3718      	adds	r7, #24
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b086      	sub	sp, #24
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	607a      	str	r2, [r7, #4]
 800ba5e:	603b      	str	r3, [r7, #0]
 800ba60:	460b      	mov	r3, r1
 800ba62:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba64:	2300      	movs	r3, #0
 800ba66:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 800ba72:	7af9      	ldrb	r1, [r7, #11]
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	f7f7 f9d2 	bl	8002e20 <HAL_PCD_EP_Receive>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba80:	7dfb      	ldrb	r3, [r7, #23]
 800ba82:	4618      	mov	r0, r3
 800ba84:	f000 f86e 	bl	800bb64 <USBD_Get_USB_Status>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ba8c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3718      	adds	r7, #24
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}

0800ba96 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba96:	b580      	push	{r7, lr}
 800ba98:	b082      	sub	sp, #8
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
 800ba9e:	460b      	mov	r3, r1
 800baa0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800baa8:	78fa      	ldrb	r2, [r7, #3]
 800baaa:	4611      	mov	r1, r2
 800baac:	4618      	mov	r0, r3
 800baae:	f7f7 f9e8 	bl	8002e82 <HAL_PCD_EP_GetRxCount>
 800bab2:	4603      	mov	r3, r0
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3708      	adds	r7, #8
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
 800bac4:	460b      	mov	r3, r1
 800bac6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800bac8:	78fb      	ldrb	r3, [r7, #3]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d002      	beq.n	800bad4 <HAL_PCDEx_LPM_Callback+0x18>
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d013      	beq.n	800bafa <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800bad2:	e023      	b.n	800bb1c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	7a5b      	ldrb	r3, [r3, #9]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d007      	beq.n	800baec <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800badc:	f000 f83c 	bl	800bb58 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bae0:	4b10      	ldr	r3, [pc, #64]	@ (800bb24 <HAL_PCDEx_LPM_Callback+0x68>)
 800bae2:	691b      	ldr	r3, [r3, #16]
 800bae4:	4a0f      	ldr	r2, [pc, #60]	@ (800bb24 <HAL_PCDEx_LPM_Callback+0x68>)
 800bae6:	f023 0306 	bic.w	r3, r3, #6
 800baea:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800baf2:	4618      	mov	r0, r3
 800baf4:	f7fe fc92 	bl	800a41c <USBD_LL_Resume>
    break;
 800baf8:	e010      	b.n	800bb1c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7fe fc75 	bl	800a3f0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	7a5b      	ldrb	r3, [r3, #9]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d005      	beq.n	800bb1a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bb0e:	4b05      	ldr	r3, [pc, #20]	@ (800bb24 <HAL_PCDEx_LPM_Callback+0x68>)
 800bb10:	691b      	ldr	r3, [r3, #16]
 800bb12:	4a04      	ldr	r2, [pc, #16]	@ (800bb24 <HAL_PCDEx_LPM_Callback+0x68>)
 800bb14:	f043 0306 	orr.w	r3, r3, #6
 800bb18:	6113      	str	r3, [r2, #16]
    break;
 800bb1a:	bf00      	nop
}
 800bb1c:	bf00      	nop
 800bb1e:	3708      	adds	r7, #8
 800bb20:	46bd      	mov	sp, r7
 800bb22:	bd80      	pop	{r7, pc}
 800bb24:	e000ed00 	.word	0xe000ed00

0800bb28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b083      	sub	sp, #12
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bb30:	4b03      	ldr	r3, [pc, #12]	@ (800bb40 <USBD_static_malloc+0x18>)
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	370c      	adds	r7, #12
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop
 800bb40:	20001dd4 	.word	0x20001dd4

0800bb44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]

}
 800bb4c:	bf00      	nop
 800bb4e:	370c      	adds	r7, #12
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bb5c:	f7f4 ff3c 	bl	80009d8 <SystemClock_Config>
}
 800bb60:	bf00      	nop
 800bb62:	bd80      	pop	{r7, pc}

0800bb64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b085      	sub	sp, #20
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bb72:	79fb      	ldrb	r3, [r7, #7]
 800bb74:	2b03      	cmp	r3, #3
 800bb76:	d817      	bhi.n	800bba8 <USBD_Get_USB_Status+0x44>
 800bb78:	a201      	add	r2, pc, #4	@ (adr r2, 800bb80 <USBD_Get_USB_Status+0x1c>)
 800bb7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb7e:	bf00      	nop
 800bb80:	0800bb91 	.word	0x0800bb91
 800bb84:	0800bb97 	.word	0x0800bb97
 800bb88:	0800bb9d 	.word	0x0800bb9d
 800bb8c:	0800bba3 	.word	0x0800bba3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bb90:	2300      	movs	r3, #0
 800bb92:	73fb      	strb	r3, [r7, #15]
    break;
 800bb94:	e00b      	b.n	800bbae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb96:	2303      	movs	r3, #3
 800bb98:	73fb      	strb	r3, [r7, #15]
    break;
 800bb9a:	e008      	b.n	800bbae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	73fb      	strb	r3, [r7, #15]
    break;
 800bba0:	e005      	b.n	800bbae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bba2:	2303      	movs	r3, #3
 800bba4:	73fb      	strb	r3, [r7, #15]
    break;
 800bba6:	e002      	b.n	800bbae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bba8:	2303      	movs	r3, #3
 800bbaa:	73fb      	strb	r3, [r7, #15]
    break;
 800bbac:	bf00      	nop
  }
  return usb_status;
 800bbae:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3714      	adds	r7, #20
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <memset>:
 800bbbc:	4402      	add	r2, r0
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	4293      	cmp	r3, r2
 800bbc2:	d100      	bne.n	800bbc6 <memset+0xa>
 800bbc4:	4770      	bx	lr
 800bbc6:	f803 1b01 	strb.w	r1, [r3], #1
 800bbca:	e7f9      	b.n	800bbc0 <memset+0x4>

0800bbcc <__libc_init_array>:
 800bbcc:	b570      	push	{r4, r5, r6, lr}
 800bbce:	4d0d      	ldr	r5, [pc, #52]	@ (800bc04 <__libc_init_array+0x38>)
 800bbd0:	4c0d      	ldr	r4, [pc, #52]	@ (800bc08 <__libc_init_array+0x3c>)
 800bbd2:	1b64      	subs	r4, r4, r5
 800bbd4:	10a4      	asrs	r4, r4, #2
 800bbd6:	2600      	movs	r6, #0
 800bbd8:	42a6      	cmp	r6, r4
 800bbda:	d109      	bne.n	800bbf0 <__libc_init_array+0x24>
 800bbdc:	4d0b      	ldr	r5, [pc, #44]	@ (800bc0c <__libc_init_array+0x40>)
 800bbde:	4c0c      	ldr	r4, [pc, #48]	@ (800bc10 <__libc_init_array+0x44>)
 800bbe0:	f000 f826 	bl	800bc30 <_init>
 800bbe4:	1b64      	subs	r4, r4, r5
 800bbe6:	10a4      	asrs	r4, r4, #2
 800bbe8:	2600      	movs	r6, #0
 800bbea:	42a6      	cmp	r6, r4
 800bbec:	d105      	bne.n	800bbfa <__libc_init_array+0x2e>
 800bbee:	bd70      	pop	{r4, r5, r6, pc}
 800bbf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbf4:	4798      	blx	r3
 800bbf6:	3601      	adds	r6, #1
 800bbf8:	e7ee      	b.n	800bbd8 <__libc_init_array+0xc>
 800bbfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbfe:	4798      	blx	r3
 800bc00:	3601      	adds	r6, #1
 800bc02:	e7f2      	b.n	800bbea <__libc_init_array+0x1e>
 800bc04:	0800bce8 	.word	0x0800bce8
 800bc08:	0800bce8 	.word	0x0800bce8
 800bc0c:	0800bce8 	.word	0x0800bce8
 800bc10:	0800bcec 	.word	0x0800bcec

0800bc14 <memcpy>:
 800bc14:	440a      	add	r2, r1
 800bc16:	4291      	cmp	r1, r2
 800bc18:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc1c:	d100      	bne.n	800bc20 <memcpy+0xc>
 800bc1e:	4770      	bx	lr
 800bc20:	b510      	push	{r4, lr}
 800bc22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc2a:	4291      	cmp	r1, r2
 800bc2c:	d1f9      	bne.n	800bc22 <memcpy+0xe>
 800bc2e:	bd10      	pop	{r4, pc}

0800bc30 <_init>:
 800bc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc32:	bf00      	nop
 800bc34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc36:	bc08      	pop	{r3}
 800bc38:	469e      	mov	lr, r3
 800bc3a:	4770      	bx	lr

0800bc3c <_fini>:
 800bc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc3e:	bf00      	nop
 800bc40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc42:	bc08      	pop	{r3}
 800bc44:	469e      	mov	lr, r3
 800bc46:	4770      	bx	lr
